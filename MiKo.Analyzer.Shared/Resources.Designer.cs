//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MiKoSolutions.Analyzers {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MiKoSolutions.Analyzers.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should be short to ease reading and maintenance (SRP, SLoA)..
        /// </summary>
        internal static string MiKo_0001_Description {
            get {
                return ResourceManager.GetString("MiKo_0001_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Too many LoC: {1,4} (allowed are max. {2}).
        /// </summary>
        internal static string MiKo_0001_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_0001_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method is too big.
        /// </summary>
        internal static string MiKo_0001_Title {
            get {
                return ResourceManager.GetString("MiKo_0001_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should be simple to ease maintenance (KISS).
        ///Following code constructs increase the Cyclomatic Complexity (CC) by +1:
        ///    if | while | for | foreach | case | continue | goto | &amp;&amp; | || | catch | catch when | ternary operator ?: | ?? | ?..
        /// </summary>
        internal static string MiKo_0002_Description {
            get {
                return ResourceManager.GetString("MiKo_0002_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Too high CC: {1,4} (allowed are max. {2}).
        /// </summary>
        internal static string MiKo_0002_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_0002_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method is too complex.
        /// </summary>
        internal static string MiKo_0002_Title {
            get {
                return ResourceManager.GetString("MiKo_0002_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Types should be limited in their size to ease reading and maintenance (SRP)..
        /// </summary>
        internal static string MiKo_0003_Description {
            get {
                return ResourceManager.GetString("MiKo_0003_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Too many LoC: {1,4} (allowed are max. {2}).
        /// </summary>
        internal static string MiKo_0003_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_0003_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type is too big.
        /// </summary>
        internal static string MiKo_0003_Title {
            get {
                return ResourceManager.GetString("MiKo_0003_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To follow the SRP, methods should have as few parameters as possible..
        /// </summary>
        internal static string MiKo_0004_Description {
            get {
                return ResourceManager.GetString("MiKo_0004_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Too many parameters: {1,4} (allowed are max. {2}).
        /// </summary>
        internal static string MiKo_0004_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_0004_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method has too many parameters.
        /// </summary>
        internal static string MiKo_0004_Title {
            get {
                return ResourceManager.GetString("MiKo_0004_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Local functions should be short to ease reading and maintenance (SRP, SLoA)..
        /// </summary>
        internal static string MiKo_0005_Description {
            get {
                return ResourceManager.GetString("MiKo_0005_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Too many LoC: {1,4} (allowed are max. {2}).
        /// </summary>
        internal static string MiKo_0005_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_0005_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Local function is too big.
        /// </summary>
        internal static string MiKo_0005_Title {
            get {
                return ResourceManager.GetString("MiKo_0005_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Local functions should be simple to ease maintenance (KISS).
        ///Following code constructs increase the Cyclomatic Complexity (CC) by +1:
        ///    if | while | for | foreach | case | continue | goto | &amp;&amp; | || | catch | catch when | ternary operator ?: | ?? | ?..
        /// </summary>
        internal static string MiKo_0006_Description {
            get {
                return ResourceManager.GetString("MiKo_0006_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Too high CC: {1,4} (allowed are max. {2}).
        /// </summary>
        internal static string MiKo_0006_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_0006_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Local function is too complex.
        /// </summary>
        internal static string MiKo_0006_Title {
            get {
                return ResourceManager.GetString("MiKo_0006_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To follow the SRP, local functions should have as few parameters as possible..
        /// </summary>
        internal static string MiKo_0007_Description {
            get {
                return ResourceManager.GetString("MiKo_0007_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Too many parameters: {1,4} (allowed are max. {2}).
        /// </summary>
        internal static string MiKo_0007_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_0007_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Local function has too many parameters.
        /// </summary>
        internal static string MiKo_0007_Title {
            get {
                return ResourceManager.GetString("MiKo_0007_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Append suffix &apos;EventArgs&apos;.
        /// </summary>
        internal static string MiKo_1000_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1000_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Event argument types should follow the pattern that they inherit from &apos;System.EventArgs&apos; and their names end with &apos;EventArgs&apos;..
        /// </summary>
        internal static string MiKo_1000_Description {
            get {
                return ResourceManager.GetString("MiKo_1000_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos; instead.
        /// </summary>
        internal static string MiKo_1000_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1000_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;System.EventArgs&apos; types should be suffixed with &apos;EventArgs&apos;.
        /// </summary>
        internal static string MiKo_1000_Title {
            get {
                return ResourceManager.GetString("MiKo_1000_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rename event argument.
        /// </summary>
        internal static string MiKo_1001_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1001_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, parameters that inherit from &apos;System.EventArgs&apos; should be named &apos;e&apos; ..
        /// </summary>
        internal static string MiKo_1001_Description {
            get {
                return ResourceManager.GetString("MiKo_1001_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/event.
        /// </summary>
        internal static string MiKo_1001_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_1001_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1001_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1001_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;System.EventArgs&apos; parameters should be named &apos;e&apos;.
        /// </summary>
        internal static string MiKo_1001_Title {
            get {
                return ResourceManager.GetString("MiKo_1001_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rename event argument.
        /// </summary>
        internal static string MiKo_1002_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1002_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To follow the .NET Framework Design Guidelines, parameters of event handlers should be named &apos;sender&apos; and &apos;e&apos;..
        /// </summary>
        internal static string MiKo_1002_Description {
            get {
                return ResourceManager.GetString("MiKo_1002_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/event.
        /// </summary>
        internal static string MiKo_1002_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_1002_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1002_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1002_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameters should be named according the .NET Framework Design Guidelines for event handlers.
        /// </summary>
        internal static string MiKo_1002_Title {
            get {
                return ResourceManager.GetString("MiKo_1002_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rename method according to event pattern.
        /// </summary>
        internal static string MiKo_1003_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1003_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Event handlers should start with &apos;On&apos;, followed by the name of the event, to indicate that they handle events..
        /// </summary>
        internal static string MiKo_1003_Description {
            get {
                return ResourceManager.GetString("MiKo_1003_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://learn.microsoft.com/en-us/dotnet/csharp/event-pattern.
        /// </summary>
        internal static string MiKo_1003_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_1003_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1003_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1003_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Event handling method names should follow the .NET Framework Design Guidelines.
        /// </summary>
        internal static string MiKo_1003_Title {
            get {
                return ResourceManager.GetString("MiKo_1003_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;Event&apos; suffix.
        /// </summary>
        internal static string MiKo_1004_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1004_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;Event&apos; as suffix in event names is noise and should be avoided..
        /// </summary>
        internal static string MiKo_1004_Description {
            get {
                return ResourceManager.GetString("MiKo_1004_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1004_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1004_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Events should not contain term &apos;Event&apos; in their names.
        /// </summary>
        internal static string MiKo_1004_Title {
            get {
                return ResourceManager.GetString("MiKo_1004_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rename EventArgs variable.
        /// </summary>
        internal static string MiKo_1005_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1005_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, variables that are of type &apos;System.EventArgs&apos; (or any inheritors) should be named &apos;e&apos;..
        /// </summary>
        internal static string MiKo_1005_Description {
            get {
                return ResourceManager.GetString("MiKo_1005_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1005_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1005_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;System.EventArgs&apos; variables should be named properly.
        /// </summary>
        internal static string MiKo_1005_Title {
            get {
                return ResourceManager.GetString("MiKo_1005_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Events shall use &apos;EventHandler&lt;T&gt;&apos; where &apos;T&apos; is a class inherited from &apos;System.EventArgs&apos; that is named after the event.
        ///Example: A &apos;Loaded&apos; event should use an &apos;EventHandler&lt;LoadedEventArgs&gt;&apos;..
        /// </summary>
        internal static string MiKo_1006_Description {
            get {
                return ResourceManager.GetString("MiKo_1006_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;EventHandler&lt;{1}&gt;&apos; instead.
        /// </summary>
        internal static string MiKo_1006_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1006_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Events should use &apos;EventHandler&lt;T&gt;&apos; with &apos;EventArgs&apos; which are named after the event.
        /// </summary>
        internal static string MiKo_1006_Title {
            get {
                return ResourceManager.GetString("MiKo_1006_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Events and their event arguments belong together logically. Hence, both should be located in the same namespace..
        /// </summary>
        internal static string MiKo_1007_Description {
            get {
                return ResourceManager.GetString("MiKo_1007_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Used &apos;{1}&apos; should be in namespace &apos;{2}&apos;.
        /// </summary>
        internal static string MiKo_1007_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1007_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Events and their corresponding &apos;EventArgs&apos; types should be located in the same namespace.
        /// </summary>
        internal static string MiKo_1007_Title {
            get {
                return ResourceManager.GetString("MiKo_1007_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rename DependencyProperty event handler argument.
        /// </summary>
        internal static string MiKo_1008_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1008_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To follow the .NET Framework Design Guidelines, parameters of DependencyProperty event handlers should be named &apos;d&apos; and &apos;e&apos;..
        /// </summary>
        internal static string MiKo_1008_Description {
            get {
                return ResourceManager.GetString("MiKo_1008_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1008_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1008_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameters should be named according the .NET Framework Design Guidelines for DependencyProperty event handlers.
        /// </summary>
        internal static string MiKo_1008_Title {
            get {
                return ResourceManager.GetString("MiKo_1008_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name event handler variable &apos;handler&apos;.
        /// </summary>
        internal static string MiKo_1009_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1009_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EventHandler variables should be named handler, to indicate that they handle events..
        /// </summary>
        internal static string MiKo_1009_Description {
            get {
                return ResourceManager.GetString("MiKo_1009_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;handler&apos;.
        /// </summary>
        internal static string MiKo_1009_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1009_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;System.EventHandler&apos; variables should be named properly.
        /// </summary>
        internal static string MiKo_1009_Title {
            get {
                return ResourceManager.GetString("MiKo_1009_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;Execute&apos; from name.
        /// </summary>
        internal static string MiKo_1010_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1010_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The purpose of methods is to execute code, so it&apos;s useless and repetitive to have &apos;CanExecute&apos; or &apos;Execute&apos; in their names..
        /// </summary>
        internal static string MiKo_1010_Description {
            get {
                return ResourceManager.GetString("MiKo_1010_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1010_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1010_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should not contain &apos;CanExecute&apos; or &apos;Execute&apos; in their names.
        /// </summary>
        internal static string MiKo_1010_Title {
            get {
                return ResourceManager.GetString("MiKo_1010_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;Do&apos; from name.
        /// </summary>
        internal static string MiKo_1011_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1011_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The purpose of methods is to execute code, so it&apos;s useless and repetitive to have &apos;Do&apos; in their names..
        /// </summary>
        internal static string MiKo_1011_Description {
            get {
                return ResourceManager.GetString("MiKo_1011_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1011_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1011_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should not contain &apos;Do&apos; in their names.
        /// </summary>
        internal static string MiKo_1011_Title {
            get {
                return ResourceManager.GetString("MiKo_1011_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rename &apos;fire&apos; to &apos;raise&apos;.
        /// </summary>
        internal static string MiKo_1012_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1012_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The term &apos;Fire&apos; is a negative term. Employees get fired (or guns), but not events. Events get raised. So use &apos;Raise&apos; instead..
        /// </summary>
        internal static string MiKo_1012_Description {
            get {
                return ResourceManager.GetString("MiKo_1012_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1012_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1012_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should be named &apos;Raise&apos; instead of &apos;Fire&apos;.
        /// </summary>
        internal static string MiKo_1012_Title {
            get {
                return ResourceManager.GetString("MiKo_1012_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rename &apos;Notify&apos; to &apos;On&apos;.
        /// </summary>
        internal static string MiKo_1013_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1013_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Many times, the term &apos;Notify&apos; indicates that an event shall be raised. In such case, the prefix &apos;On&apos; should be used instead.
        ///Example: Instead of &apos;NotifyPropertyChanged&apos; use &apos;OnPropertyChanged&apos;..
        /// </summary>
        internal static string MiKo_1013_Description {
            get {
                return ResourceManager.GetString("MiKo_1013_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use term &apos;Notify&apos;.
        /// </summary>
        internal static string MiKo_1013_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1013_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should not be named &apos;Notify&apos; or &apos;OnNotify&apos;.
        /// </summary>
        internal static string MiKo_1013_Title {
            get {
                return ResourceManager.GetString("MiKo_1013_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rename &apos;Check&apos;.
        /// </summary>
        internal static string MiKo_1014_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1014_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The term &apos;Check&apos; is ambiguous. If validation of parameters is meant, use something like &apos;Validate&apos; or &apos;Verify&apos;. If a check for a specific state is meant, use &apos;Is&apos;, &apos;Can&apos; or &apos;Has&apos; instead..
        /// </summary>
        internal static string MiKo_1014_Description {
            get {
                return ResourceManager.GetString("MiKo_1014_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use ambiguous term &apos;Check&apos;.
        /// </summary>
        internal static string MiKo_1014_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1014_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should not be named with ambiguous &apos;Check&apos;.
        /// </summary>
        internal static string MiKo_1014_Title {
            get {
                return ResourceManager.GetString("MiKo_1014_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rename &apos;Init&apos; to &apos;Initialize&apos;.
        /// </summary>
        internal static string MiKo_1015_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1015_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The term &apos;Init&apos; is a lazy abbreviation and should not be used. &apos;Initialize&apos; should be used instead..
        /// </summary>
        internal static string MiKo_1015_Description {
            get {
                return ResourceManager.GetString("MiKo_1015_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1015_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1015_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should be named &apos;Initialize&apos; instead of &apos;Init&apos;.
        /// </summary>
        internal static string MiKo_1015_Title {
            get {
                return ResourceManager.GetString("MiKo_1015_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rename factory method.
        /// </summary>
        internal static string MiKo_1016_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1016_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The method belongs to a factory and therefore its name should be started with &apos;Create&apos;..
        /// </summary>
        internal static string MiKo_1016_Description {
            get {
                return ResourceManager.GetString("MiKo_1016_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start name with &apos;Create&apos;.
        /// </summary>
        internal static string MiKo_1016_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1016_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Factory methods should be named &apos;Create&apos;.
        /// </summary>
        internal static string MiKo_1016_Title {
            get {
                return ResourceManager.GetString("MiKo_1016_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove prefix from method.
        /// </summary>
        internal static string MiKo_1017_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1017_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should not be prefixed with &apos;Get&apos; or &apos;Set&apos; if followed by &apos;Is&apos;, &apos;Can&apos; or &apos;Has&apos;. That &apos;Get&apos; or &apos;Set&apos; is just additional noise and should be avoided..
        /// </summary>
        internal static string MiKo_1017_Description {
            get {
                return ResourceManager.GetString("MiKo_1017_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1017_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1017_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should not be prefixed with &apos;Get&apos; or &apos;Set&apos; if followed by &apos;Is&apos;, &apos;Can&apos; or &apos;Has&apos;.
        /// </summary>
        internal static string MiKo_1017_Title {
            get {
                return ResourceManager.GetString("MiKo_1017_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change noun to verb.
        /// </summary>
        internal static string MiKo_1018_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1018_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should not be suffixed with a noun form of a verb if the verb would fit perfectly as method name..
        /// </summary>
        internal static string MiKo_1018_Description {
            get {
                return ResourceManager.GetString("MiKo_1018_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1018_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1018_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should not be suffixed with noun of a verb.
        /// </summary>
        internal static string MiKo_1018_Title {
            get {
                return ResourceManager.GetString("MiKo_1018_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rename &apos;Clear&apos; and &apos;Remove&apos;.
        /// </summary>
        internal static string MiKo_1019_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1019_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods that are named &apos;Remove&apos; and have no parameters should be named &apos;Clear&apos; instead as they do not remove parameters.
        ///Methods that are named &apos;Clear&apos; and have parameters should be named &apos;Remove&apos; instead as they do not clear the item..
        /// </summary>
        internal static string MiKo_1019_Description {
            get {
                return ResourceManager.GetString("MiKo_1019_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1019_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1019_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;Clear&apos; and &apos;Remove&apos; methods should be named based on their number of parameters.
        /// </summary>
        internal static string MiKo_1019_Title {
            get {
                return ResourceManager.GetString("MiKo_1019_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Names that have a lot of characters are hard to read when being used. This makes writing code and doing code reviews much harder..
        /// </summary>
        internal static string MiKo_1020_Description {
            get {
                return ResourceManager.GetString("MiKo_1020_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type name exceeds limit of {2} chars by {1}.
        /// </summary>
        internal static string MiKo_1020_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1020_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type names should be limited in length.
        /// </summary>
        internal static string MiKo_1020_Title {
            get {
                return ResourceManager.GetString("MiKo_1020_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Names that have a lot of characters are hard to read when being used. This makes writing code and doing code reviews much harder..
        /// </summary>
        internal static string MiKo_1021_Description {
            get {
                return ResourceManager.GetString("MiKo_1021_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method name exceeds limit of {2} chars by {1}.
        /// </summary>
        internal static string MiKo_1021_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1021_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method names should be limited in length.
        /// </summary>
        internal static string MiKo_1021_Title {
            get {
                return ResourceManager.GetString("MiKo_1021_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Names that have a lot of characters are hard to read when being used. This makes writing code and doing code reviews much harder..
        /// </summary>
        internal static string MiKo_1022_Description {
            get {
                return ResourceManager.GetString("MiKo_1022_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter name exceeds limit of {2} chars by {1}.
        /// </summary>
        internal static string MiKo_1022_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1022_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter names should be limited in length.
        /// </summary>
        internal static string MiKo_1022_Title {
            get {
                return ResourceManager.GetString("MiKo_1022_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Names that have a lot of characters are hard to read when being used. This makes writing code and doing code reviews much harder..
        /// </summary>
        internal static string MiKo_1023_Description {
            get {
                return ResourceManager.GetString("MiKo_1023_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Field name exceeds limit of {2} chars by {1}.
        /// </summary>
        internal static string MiKo_1023_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1023_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Field names should be limited in length.
        /// </summary>
        internal static string MiKo_1023_Title {
            get {
                return ResourceManager.GetString("MiKo_1023_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Names that have a lot of characters are hard to read when being used. This makes writing code and doing code reviews much harder..
        /// </summary>
        internal static string MiKo_1024_Description {
            get {
                return ResourceManager.GetString("MiKo_1024_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property name exceeds limit of {2} chars by {1}.
        /// </summary>
        internal static string MiKo_1024_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1024_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property names should be limited in length.
        /// </summary>
        internal static string MiKo_1024_Title {
            get {
                return ResourceManager.GetString("MiKo_1024_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Names that have a lot of characters are hard to read when being used. This makes writing code and doing code reviews much harder..
        /// </summary>
        internal static string MiKo_1025_Description {
            get {
                return ResourceManager.GetString("MiKo_1025_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Event name exceeds limit of {2} chars by {1}.
        /// </summary>
        internal static string MiKo_1025_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1025_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Event names should be limited in length.
        /// </summary>
        internal static string MiKo_1025_Title {
            get {
                return ResourceManager.GetString("MiKo_1025_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Names that have a lot of characters are hard to read when being used. This makes writing code and doing code reviews much harder..
        /// </summary>
        internal static string MiKo_1026_Description {
            get {
                return ResourceManager.GetString("MiKo_1026_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variable name exceeds limit of {2} chars by {1}.
        /// </summary>
        internal static string MiKo_1026_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1026_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variable names should be limited in length.
        /// </summary>
        internal static string MiKo_1026_Title {
            get {
                return ResourceManager.GetString("MiKo_1026_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Names that have a lot of characters are hard to read when being used. This makes writing code and doing code reviews much harder..
        /// </summary>
        internal static string MiKo_1027_Description {
            get {
                return ResourceManager.GetString("MiKo_1027_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variable name in loop exceeds limit of {2} chars by {1}.
        /// </summary>
        internal static string MiKo_1027_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1027_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variable names in loops should be limited in length.
        /// </summary>
        internal static string MiKo_1027_Title {
            get {
                return ResourceManager.GetString("MiKo_1027_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Names that have a lot of characters are hard to read when being used. This makes writing code and doing code reviews much harder..
        /// </summary>
        internal static string MiKo_1028_Description {
            get {
                return ResourceManager.GetString("MiKo_1028_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Local function name exceeds limit of {2} chars by {1}.
        /// </summary>
        internal static string MiKo_1028_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1028_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Local function names should be limited in length.
        /// </summary>
        internal static string MiKo_1028_Title {
            get {
                return ResourceManager.GetString("MiKo_1028_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove base type indicator.
        /// </summary>
        internal static string MiKo_1030_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1030_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicating that a type is a base type by putting &apos;Abstract&apos; or &apos;Base&apos; in its name does not make sense. Every interface or class that is not sealed can act as a base type, so cluttering its name simply creates an unnecessary distraction for it users..
        /// </summary>
        internal static string MiKo_1030_Description {
            get {
                return ResourceManager.GetString("MiKo_1030_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;{1}&apos; from name.
        /// </summary>
        internal static string MiKo_1030_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1030_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Types should not have an &apos;Abstract&apos; or &apos;Base&apos; marker to indicate that they are base types.
        /// </summary>
        internal static string MiKo_1030_Title {
            get {
                return ResourceManager.GetString("MiKo_1030_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;Model&apos; indicator.
        /// </summary>
        internal static string MiKo_1031_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1031_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicating that a type is an entity by using &apos;Model&apos; as its suffix does not make sense. Entities should not be suffixed at all. (eg. &apos;User&apos; instead of &apos;UserModel&apos;).
        /// </summary>
        internal static string MiKo_1031_Description {
            get {
                return ResourceManager.GetString("MiKo_1031_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1031_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1031_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Entity types should not use a &apos;Model&apos; suffix.
        /// </summary>
        internal static string MiKo_1031_Title {
            get {
                return ResourceManager.GetString("MiKo_1031_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;Model&apos; indicator.
        /// </summary>
        internal static string MiKo_1032_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1032_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicating that a method deals with an entity by using &apos;Model&apos; in its name does not make sense..
        /// </summary>
        internal static string MiKo_1032_Description {
            get {
                return ResourceManager.GetString("MiKo_1032_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1032_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1032_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods dealing with entities should not use a &apos;Model&apos; as marker.
        /// </summary>
        internal static string MiKo_1032_Title {
            get {
                return ResourceManager.GetString("MiKo_1032_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;Model&apos; indicator.
        /// </summary>
        internal static string MiKo_1033_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1033_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicating that a parameter is an entity by using &apos;Model&apos; as its suffix does not make sense. Entities should not be suffixed at all. (eg. &apos;user&apos; instead of &apos;userModel&apos;).
        /// </summary>
        internal static string MiKo_1033_Description {
            get {
                return ResourceManager.GetString("MiKo_1033_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1033_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1033_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameters representing entities should not use a &apos;Model&apos; suffix.
        /// </summary>
        internal static string MiKo_1033_Title {
            get {
                return ResourceManager.GetString("MiKo_1033_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;Model&apos; indicator.
        /// </summary>
        internal static string MiKo_1034_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1034_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicating that a field is an entity by using &apos;Model&apos; as its suffix does not make sense. Entities should not be suffixed at all. (eg. &apos;user&apos; instead of &apos;userModel&apos;).
        /// </summary>
        internal static string MiKo_1034_Description {
            get {
                return ResourceManager.GetString("MiKo_1034_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1034_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1034_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fields representing entities should not use a &apos;Model&apos; suffix.
        /// </summary>
        internal static string MiKo_1034_Title {
            get {
                return ResourceManager.GetString("MiKo_1034_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;Model&apos; indicator.
        /// </summary>
        internal static string MiKo_1035_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1035_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicating that a property deals with an entity by using &apos;Model&apos; in its name does not make sense..
        /// </summary>
        internal static string MiKo_1035_Description {
            get {
                return ResourceManager.GetString("MiKo_1035_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1035_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1035_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Properties dealing with entities should not use a &apos;Model&apos; marker.
        /// </summary>
        internal static string MiKo_1035_Title {
            get {
                return ResourceManager.GetString("MiKo_1035_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;Model&apos; indicator.
        /// </summary>
        internal static string MiKo_1036_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1036_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicating that an event deals with an entity by using &apos;Model&apos; in its name does not make sense..
        /// </summary>
        internal static string MiKo_1036_Description {
            get {
                return ResourceManager.GetString("MiKo_1036_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1036_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1036_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Events dealing with entities should not use a &apos;Model&apos; marker.
        /// </summary>
        internal static string MiKo_1036_Title {
            get {
                return ResourceManager.GetString("MiKo_1036_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;Enum&apos; suffix.
        /// </summary>
        internal static string MiKo_1037_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1037_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicating that a type is an Enum by using &apos;Enum&apos; as its suffix does not make sense..
        /// </summary>
        internal static string MiKo_1037_Description {
            get {
                return ResourceManager.GetString("MiKo_1037_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1037_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1037_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Types should not be suffixed with &apos;Enum&apos;.
        /// </summary>
        internal static string MiKo_1037_Title {
            get {
                return ResourceManager.GetString("MiKo_1037_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suffix type with &apos;Extensions&apos;.
        /// </summary>
        internal static string MiKo_1038_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1038_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, the names of classes that contain extension methods should end with the same suffix..
        /// </summary>
        internal static string MiKo_1038_Description {
            get {
                return ResourceManager.GetString("MiKo_1038_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End name with &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1038_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1038_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Classes that contain extension methods should end with same suffix.
        /// </summary>
        internal static string MiKo_1038_Title {
            get {
                return ResourceManager.GetString("MiKo_1038_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rename &apos;this&apos; argument.
        /// </summary>
        internal static string MiKo_1039_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1039_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, the &apos;this&apos; parameter of extension methods should have a default name..
        /// </summary>
        internal static string MiKo_1039_Description {
            get {
                return ResourceManager.GetString("MiKo_1039_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it {1}.
        /// </summary>
        internal static string MiKo_1039_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1039_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;this&apos; parameter of extension methods should have a default name.
        /// </summary>
        internal static string MiKo_1039_Title {
            get {
                return ResourceManager.GetString("MiKo_1039_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suffixes on parameter names (such as &apos;List&apos;) are noise and should be avoided..
        /// </summary>
        internal static string MiKo_1040_Description {
            get {
                return ResourceManager.GetString("MiKo_1040_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1040_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1040_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameters should not be suffixed with implementation details.
        /// </summary>
        internal static string MiKo_1040_Title {
            get {
                return ResourceManager.GetString("MiKo_1040_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suffixes on field names (such as &apos;List&apos;) are noise and should be avoided..
        /// </summary>
        internal static string MiKo_1041_Description {
            get {
                return ResourceManager.GetString("MiKo_1041_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1041_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1041_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fields should not be suffixed with implementation details.
        /// </summary>
        internal static string MiKo_1041_Title {
            get {
                return ResourceManager.GetString("MiKo_1041_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;cancellationToken&apos;.
        /// </summary>
        internal static string MiKo_1042_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1042_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, and being consistent with the .NET Framework classes, &apos;CancellationToken&apos; parameters should have a very specific name..
        /// </summary>
        internal static string MiKo_1042_Description {
            get {
                return ResourceManager.GetString("MiKo_1042_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1042_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1042_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;CancellationToken&apos; parameters should have specific name.
        /// </summary>
        internal static string MiKo_1042_Title {
            get {
                return ResourceManager.GetString("MiKo_1042_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;token&apos;.
        /// </summary>
        internal static string MiKo_1043_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1043_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, &apos;CancellationToken&apos; variables should have a very specific name..
        /// </summary>
        internal static string MiKo_1043_Description {
            get {
                return ResourceManager.GetString("MiKo_1043_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1043_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1043_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;CancellationToken&apos; variables should have specific name.
        /// </summary>
        internal static string MiKo_1043_Title {
            get {
                return ResourceManager.GetString("MiKo_1043_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Append &apos;Command&apos; suffix.
        /// </summary>
        internal static string MiKo_1044_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1044_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, add the suffix &apos;Command&apos;..
        /// </summary>
        internal static string MiKo_1044_Description {
            get {
                return ResourceManager.GetString("MiKo_1044_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add &apos;{1}&apos; as suffix.
        /// </summary>
        internal static string MiKo_1044_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1044_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Commands should be suffixed with &apos;Command&apos;.
        /// </summary>
        internal static string MiKo_1044_Title {
            get {
                return ResourceManager.GetString("MiKo_1044_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;Command&apos; suffix.
        /// </summary>
        internal static string MiKo_1045_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1045_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, remove the suffix &apos;Command&apos; as the method itself is invoked by a command..
        /// </summary>
        internal static string MiKo_1045_Description {
            get {
                return ResourceManager.GetString("MiKo_1045_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1045_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1045_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods that are invoked by commands should not be suffixed with &apos;Command&apos;.
        /// </summary>
        internal static string MiKo_1045_Title {
            get {
                return ResourceManager.GetString("MiKo_1045_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Append &apos;Async&apos; suffix.
        /// </summary>
        internal static string MiKo_1046_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1046_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, methods that follow the Task-based Asynchronous Pattern (TAP) should be suffixed with &apos;Async&apos;..
        /// </summary>
        internal static string MiKo_1046_Description {
            get {
                return ResourceManager.GetString("MiKo_1046_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://learn.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.
        /// </summary>
        internal static string MiKo_1046_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_1046_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1046_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1046_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Asynchronous methods should follow the Task-based Asynchronous Pattern (TAP).
        /// </summary>
        internal static string MiKo_1046_Title {
            get {
                return ResourceManager.GetString("MiKo_1046_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;Async&apos; suffix.
        /// </summary>
        internal static string MiKo_1047_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1047_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, methods that do not follow the Task-based Asynchronous Pattern (TAP) should not be suffixed with &apos;Async&apos; as that would indicate that they would follow the pattern..
        /// </summary>
        internal static string MiKo_1047_Description {
            get {
                return ResourceManager.GetString("MiKo_1047_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://learn.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.
        /// </summary>
        internal static string MiKo_1047_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_1047_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1047_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1047_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods not following the Task-based Asynchronous Pattern (TAP) should not lie about being asynchronous.
        /// </summary>
        internal static string MiKo_1047_Title {
            get {
                return ResourceManager.GetString("MiKo_1047_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Append &apos;Converter&apos; suffix.
        /// </summary>
        internal static string MiKo_1048_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1048_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Classes that are value converters should end with a specific suffix..
        /// </summary>
        internal static string MiKo_1048_Description {
            get {
                return ResourceManager.GetString("MiKo_1048_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End name with &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1048_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1048_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, the names of classes that are value converters should end with the same suffix.
        /// </summary>
        internal static string MiKo_1048_Title {
            get {
                return ResourceManager.GetString("MiKo_1048_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace requirement term.
        /// </summary>
        internal static string MiKo_1049_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1049_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Requirement terms such as &apos;Must&apos;, &apos;Need&apos;, &apos;Shall&apos;, &apos;Should&apos;, &apos;Will&apos; or &apos;Would&apos; within a name are not explicit enough. Instead, use a positive verb or an adjective like &apos;Is&apos;, &apos;Has&apos;, &apos;Can&apos;, etc..
        /// </summary>
        internal static string MiKo_1049_Description {
            get {
                return ResourceManager.GetString("MiKo_1049_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &apos;{1}&apos; in name.
        /// </summary>
        internal static string MiKo_1049_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1049_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use requirement terms such as &apos;Shall&apos;, &apos;Should&apos;, &apos;Must&apos; or &apos;Need&apos; for names.
        /// </summary>
        internal static string MiKo_1049_Title {
            get {
                return ResourceManager.GetString("MiKo_1049_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rename return value.
        /// </summary>
        internal static string MiKo_1050_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1050_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variables for return values should describe what data they contain and not what they technical are.
        ///So they should have better names than e.g. &apos;ret&apos;, &apos;retVal&apos; or &apos;returnValue&apos;..
        /// </summary>
        internal static string MiKo_1050_Description {
            get {
                return ResourceManager.GetString("MiKo_1050_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use a more descriptive name than &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1050_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1050_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Return values should have descriptive names.
        /// </summary>
        internal static string MiKo_1050_Title {
            get {
                return ResourceManager.GetString("MiKo_1050_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;callback&apos;.
        /// </summary>
        internal static string MiKo_1051_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1051_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suffixing delegate parameters with their type is repetitive and provides no value. A more meaningful name (such as &apos;callback&apos;, &apos;filter&apos; or &apos;map&apos;) provides much more context..
        /// </summary>
        internal static string MiKo_1051_Description {
            get {
                return ResourceManager.GetString("MiKo_1051_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use a better matching name instead.
        /// </summary>
        internal static string MiKo_1051_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1051_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not suffix parameters with delegate types.
        /// </summary>
        internal static string MiKo_1051_Title {
            get {
                return ResourceManager.GetString("MiKo_1051_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;callback&apos;.
        /// </summary>
        internal static string MiKo_1052_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1052_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suffixing delegate variables with their type is repetitive and provides no value. A more meaningful name (such as &apos;callback&apos;, &apos;filter&apos; or &apos;map&apos;) provides much more context..
        /// </summary>
        internal static string MiKo_1052_Description {
            get {
                return ResourceManager.GetString("MiKo_1052_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use a better matching name instead.
        /// </summary>
        internal static string MiKo_1052_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1052_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not suffix variables with delegate types.
        /// </summary>
        internal static string MiKo_1052_Title {
            get {
                return ResourceManager.GetString("MiKo_1052_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rename delegate field.
        /// </summary>
        internal static string MiKo_1053_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1053_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suffixing delegate fields with their type is repetitive and provides no value. A more meaningful name (such as &apos;callback&apos;, &apos;filter&apos; or &apos;map&apos;) provides much more context..
        /// </summary>
        internal static string MiKo_1053_Description {
            get {
                return ResourceManager.GetString("MiKo_1053_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use a better matching name instead.
        /// </summary>
        internal static string MiKo_1053_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1053_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not suffix fields with delegate types.
        /// </summary>
        internal static string MiKo_1053_Title {
            get {
                return ResourceManager.GetString("MiKo_1053_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;Utility&apos; marker suffix.
        /// </summary>
        internal static string MiKo_1054_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1054_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Terms such as &apos;helper&apos; or &apos;utility&apos; are too generic and meaningless.
        ///Types that are named so do not follow the Single Responsibility Principle (SRP); instead they have a scope that is much too broad..
        /// </summary>
        internal static string MiKo_1054_Description {
            get {
                return ResourceManager.GetString("MiKo_1054_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;{1}&apos; from name.
        /// </summary>
        internal static string MiKo_1054_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1054_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not name types &apos;Helper&apos; or &apos;Utility&apos;.
        /// </summary>
        internal static string MiKo_1054_Title {
            get {
                return ResourceManager.GetString("MiKo_1054_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rename dependency property.
        /// </summary>
        internal static string MiKo_1055_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1055_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To indicate that fields are the containers for specific dependency properties, those fields should be suffixed with &apos;Property&apos; (similar as in the .NET Framework)..
        /// </summary>
        internal static string MiKo_1055_Description {
            get {
                return ResourceManager.GetString("MiKo_1055_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://learn.microsoft.com/en-us/dotnet/framework/wpf/advanced/how-to-implement-a-dependency-property.
        /// </summary>
        internal static string MiKo_1055_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_1055_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos; instead.
        /// </summary>
        internal static string MiKo_1055_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1055_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dependency properties should be suffixed with &apos;Property&apos; (as in the .NET Framework).
        /// </summary>
        internal static string MiKo_1055_Title {
            get {
                return ResourceManager.GetString("MiKo_1055_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To indicate that fields are the containers for specific dependency properties, those fields should be prefixed with the name of the property (similar as in the .NET Framework)..
        /// </summary>
        internal static string MiKo_1056_Description {
            get {
                return ResourceManager.GetString("MiKo_1056_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://learn.microsoft.com/en-us/dotnet/framework/wpf/advanced/how-to-implement-a-dependency-property.
        /// </summary>
        internal static string MiKo_1056_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_1056_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it {1} instead.
        /// </summary>
        internal static string MiKo_1056_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1056_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dependency properties should be prefixed with property names (as in the .NET Framework).
        /// </summary>
        internal static string MiKo_1056_Title {
            get {
                return ResourceManager.GetString("MiKo_1056_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rename dependency property key.
        /// </summary>
        internal static string MiKo_1057_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1057_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To indicate that fields are the keys for specific dependency properties, those fields should be suffixed with &apos;Key&apos; (similar as in the .NET Framework)..
        /// </summary>
        internal static string MiKo_1057_Description {
            get {
                return ResourceManager.GetString("MiKo_1057_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://learn.microsoft.com/en-us/dotnet/api/system.windows.dependencypropertykey.
        /// </summary>
        internal static string MiKo_1057_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_1057_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos; instead.
        /// </summary>
        internal static string MiKo_1057_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1057_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dependency property keys should be suffixed with &apos;Key&apos; (as in the .NET Framework).
        /// </summary>
        internal static string MiKo_1057_Title {
            get {
                return ResourceManager.GetString("MiKo_1057_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To indicate that fields are the keys for specific dependency properties, those fields should be prefixed with the name of the property (similar as in the .NET Framework)..
        /// </summary>
        internal static string MiKo_1058_Description {
            get {
                return ResourceManager.GetString("MiKo_1058_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://learn.microsoft.com/en-us/dotnet/api/system.windows.dependencypropertykey.
        /// </summary>
        internal static string MiKo_1058_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_1058_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it {1} instead.
        /// </summary>
        internal static string MiKo_1058_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1058_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dependency property keys should be prefixed with property names (as in the .NET Framework).
        /// </summary>
        internal static string MiKo_1058_Title {
            get {
                return ResourceManager.GetString("MiKo_1058_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;Impl&apos; marker suffix.
        /// </summary>
        internal static string MiKo_1059_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1059_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Terms such as &apos;Impl&apos; or &apos;Implementation&apos; are meaningless and provide no benefit.
        ///Types that are named so should be better named directly after the interface they implement, but without any &apos;Impl&apos; marker..
        /// </summary>
        internal static string MiKo_1059_Description {
            get {
                return ResourceManager.GetString("MiKo_1059_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;{1}&apos; from name.
        /// </summary>
        internal static string MiKo_1059_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1059_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not name types &apos;Impl&apos; or &apos;Implementation&apos;.
        /// </summary>
        internal static string MiKo_1059_Title {
            get {
                return ResourceManager.GetString("MiKo_1059_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change to &apos;NotFound&apos;.
        /// </summary>
        internal static string MiKo_1060_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1060_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sometimes, developers try to report that an entity was not found.
        ///
        ///For example, a repository is requested to return an entity &apos;Xyz&apos; (e.g. via method &apos;GetXyz&apos;). In case that such entity does not exist, they either return an error code (such as null) or they throw an exception.
        ///
        ///The name of the exception is then sometimes &apos;GetXyzFailedException&apos; which is not that clear (why did it fail?). A better name would be &apos;XyzNotFoundException&apos; to indicate that &apos;Xyz&apos; was not found.
        ///
        ///The same applies for &apos;XyzMissin [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MiKo_1060_Description {
            get {
                return ResourceManager.GetString("MiKo_1060_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Consider to name it &apos;{1}&apos; instead.
        /// </summary>
        internal static string MiKo_1060_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1060_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;&lt;Entity&gt;NotFound&apos; instead of &apos;Get&lt;Entity&gt;Failed&apos; or &apos;&lt;Entity&gt;Missing&apos;.
        /// </summary>
        internal static string MiKo_1060_Title {
            get {
                return ResourceManager.GetString("MiKo_1060_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rename out parameter.
        /// </summary>
        internal static string MiKo_1061_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1061_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If a &apos;TryXyz&apos; method has an [out] parameter, that [out] parameter shall be named specifically because it is the actual result of the method. The method&apos;s return value only exists to indicate a success or failure of the operation.
        ///
        ///- For a &apos;Try&apos; method, that parameter shall be named &apos;result&apos;.
        ///- For a &apos;TryGet&apos; method, that parameter shall be named after the name of the method without the &apos;TryGet&apos; prefix.
        ///   Example: For the &apos;TryGetMyValue&apos; method the parameter shall be named &apos;myValue&apos;..
        /// </summary>
        internal static string MiKo_1061_Description {
            get {
                return ResourceManager.GetString("MiKo_1061_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1061_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1061_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of &apos;Try&apos; method&apos;s [out] parameter should be specific.
        /// </summary>
        internal static string MiKo_1061_Title {
            get {
                return ResourceManager.GetString("MiKo_1061_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Detection methods (properties or fields) such as &apos;Can&apos;, &apos;Has&apos; or &apos;Contains&apos; should consist only of a few words, such as &apos;HasConnection&apos; or &apos;ContainsKey&apos;.
        ///If they consist of more than those few words, these methods (properties or fields) are probably placed at the wrong place and violate the SRP..
        /// </summary>
        internal static string MiKo_1062_Description {
            get {
                return ResourceManager.GetString("MiKo_1062_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid name with more than {1} words.
        /// </summary>
        internal static string MiKo_1062_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1062_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;Can/Has/Contains&apos; methods, properties or fields shall consist of only a few words.
        /// </summary>
        internal static string MiKo_1062_Title {
            get {
                return ResourceManager.GetString("MiKo_1062_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using abbreviations in names is bad practice.
        ///It makes it hard for every developer that is new to the code base to understand what is meant by the code.
        ///In addition, they distract the reader&apos;s attention as they have to translate the meaning each time..
        /// </summary>
        internal static string MiKo_1063_Description {
            get {
                return ResourceManager.GetString("MiKo_1063_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;{2}&apos; instead of abbreviation &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1063_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1063_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use abbreviations in names.
        /// </summary>
        internal static string MiKo_1063_Title {
            get {
                return ResourceManager.GetString("MiKo_1063_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, parameter names should be based on the parameter&apos;s meaning rather than the parameter&apos;s type..
        /// </summary>
        internal static string MiKo_1064_Description {
            get {
                return ResourceManager.GetString("MiKo_1064_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name parameter based on its meaning instead of its type.
        /// </summary>
        internal static string MiKo_1064_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1064_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter names reflect their meaning and not their type.
        /// </summary>
        internal static string MiKo_1064_Title {
            get {
                return ResourceManager.GetString("MiKo_1064_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rename operator parameter.
        /// </summary>
        internal static string MiKo_1065_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1065_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameters of operator overloads should have default names if there is no meaning to the parameters.
        ///For binary operator overloads use the names &apos;left&apos; and &apos;right&apos;, for unary operator overloads use the name &apos;value&apos;..
        /// </summary>
        internal static string MiKo_1065_Description {
            get {
                return ResourceManager.GetString("MiKo_1065_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/naming-parameters.
        /// </summary>
        internal static string MiKo_1065_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_1065_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1065_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1065_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operator parameters should be named according the .NET Framework Design Guidelines for operator overloads.
        /// </summary>
        internal static string MiKo_1065_Title {
            get {
                return ResourceManager.GetString("MiKo_1065_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rename parameter to match its property.
        /// </summary>
        internal static string MiKo_1066_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1066_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease usage of a class, constructor parameters that get assigned directly to properties should have the same name as the property. So a client of the class easily knows what the parameter is used for..
        /// </summary>
        internal static string MiKo_1066_Description {
            get {
                return ResourceManager.GetString("MiKo_1066_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name parameter according to the assigned property.
        /// </summary>
        internal static string MiKo_1066_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1066_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Constructor parameters that are assigned to a property should be named after the property.
        /// </summary>
        internal static string MiKo_1066_Title {
            get {
                return ResourceManager.GetString("MiKo_1066_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;Perform&apos; from name.
        /// </summary>
        internal static string MiKo_1067_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1067_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The purpose of methods is to execute code, so it&apos;s useless and repetitive to have &apos;Perform&apos; in their names..
        /// </summary>
        internal static string MiKo_1067_Description {
            get {
                return ResourceManager.GetString("MiKo_1067_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;Perform&apos; from name.
        /// </summary>
        internal static string MiKo_1067_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1067_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should not contain &apos;Perform&apos; in their names.
        /// </summary>
        internal static string MiKo_1067_Title {
            get {
                return ResourceManager.GetString("MiKo_1067_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Workflows are a high-level construct and encapsulate functionality that belongs into the business layer.
        ///Hence, their methods should be named &apos;CanRun&apos; or &apos;Run&apos; (similar to commands where they are named &apos;CanExecute&apos; and &apos;Execute&apos;)..
        /// </summary>
        internal static string MiKo_1068_Description {
            get {
                return ResourceManager.GetString("MiKo_1068_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1068_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1068_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Workflow methods should be named &apos;CanRun&apos; or &apos;Run&apos;.
        /// </summary>
        internal static string MiKo_1068_Title {
            get {
                return ResourceManager.GetString("MiKo_1068_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, property names should be based on the property&apos;s meaning rather than its type..
        /// </summary>
        internal static string MiKo_1069_Description {
            get {
                return ResourceManager.GetString("MiKo_1069_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name property based on its meaning instead of its type.
        /// </summary>
        internal static string MiKo_1069_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1069_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property names reflect their meaning and not their type.
        /// </summary>
        internal static string MiKo_1069_Title {
            get {
                return ResourceManager.GetString("MiKo_1069_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rename variable into plural.
        /// </summary>
        internal static string MiKo_1070_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1070_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Local variables for collections (that is any which is an &apos;IEnumerable&apos;) should have names in plural form. Their names should describe the contents of the collection; and not the collection itself..
        /// </summary>
        internal static string MiKo_1070_Description {
            get {
                return ResourceManager.GetString("MiKo_1070_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1070_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1070_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Local collection variables shall use plural name.
        /// </summary>
        internal static string MiKo_1070_Title {
            get {
                return ResourceManager.GetString("MiKo_1070_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Boolean variables define some state. So they should be named as statements and not as questions.
        ///That easies reading, as most likely, boolean variables are used in if/else or switch statements.
        ///
        ///Example:
        ///   &apos;isDeviceOnline&apos; is a question.
        ///   &apos;deviceIsOnline&apos; instead is a statement.
        ///
        ///   &apos;if (isDeviceOnline) DoSomething();&apos; is harder to read
        ///   &apos;if (deviceIsOnline) DoSomething();&apos; is more fluent to read..
        /// </summary>
        internal static string MiKo_1071_Description {
            get {
                return ResourceManager.GetString("MiKo_1071_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Formulate question as statement.
        /// </summary>
        internal static string MiKo_1071_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1071_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Local boolean variables should be named as statements and not as questions.
        /// </summary>
        internal static string MiKo_1071_Title {
            get {
                return ResourceManager.GetString("MiKo_1071_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Boolean properties or methods define some state. So they should be named as statements and not as questions.
        ///That easies reading, as most likely, boolean properties or methods are used in if/else or switch statements.
        ///
        ///Example:
        ///   &apos;IsDeviceOnline&apos; is a question.
        ///   &apos;DeviceIsOnline&apos; instead is a statement.
        ///
        ///   &apos;if (IsDeviceOnline) DoSomething();&apos; is harder to read
        ///   &apos;if (DeviceIsOnline) DoSomething();&apos; is more fluent to read..
        /// </summary>
        internal static string MiKo_1072_Description {
            get {
                return ResourceManager.GetString("MiKo_1072_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Formulate question as statement.
        /// </summary>
        internal static string MiKo_1072_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1072_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Boolean properties or methods should be named as statements and not as questions.
        /// </summary>
        internal static string MiKo_1072_Title {
            get {
                return ResourceManager.GetString("MiKo_1072_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Boolean fields define some state. So they should be named as statements and not as questions.
        ///That easies reading, as most likely, boolean fields are used in if/else or switch statements.
        ///
        ///Example:
        ///   &apos;IsDeviceOnline&apos; is a question.
        ///   &apos;DeviceIsOnline&apos; instead is a statement.
        ///
        ///   &apos;if (IsDeviceOnline) DoSomething();&apos; is harder to read
        ///   &apos;if (DeviceIsOnline) DoSomething();&apos; is more fluent to read..
        /// </summary>
        internal static string MiKo_1073_Description {
            get {
                return ResourceManager.GetString("MiKo_1073_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Formulate question as statement.
        /// </summary>
        internal static string MiKo_1073_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1073_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Boolean fields should be named as statements and not as questions.
        /// </summary>
        internal static string MiKo_1073_Title {
            get {
                return ResourceManager.GetString("MiKo_1073_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In case an object is used for synchronizing threads via lock statements, that object should be named with a suffix &quot;Lock&quot;. So it&apos;s easy to spot whether an object is used as synchronization mechanism for a lock..
        /// </summary>
        internal static string MiKo_1074_Description {
            get {
                return ResourceManager.GetString("MiKo_1074_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suffix field with &apos;Lock&apos; because it is used as lock object.
        /// </summary>
        internal static string MiKo_1074_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1074_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Objects used to lock on should be suffixed with &apos;Lock&apos;.
        /// </summary>
        internal static string MiKo_1074_Title {
            get {
                return ResourceManager.GetString("MiKo_1074_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove suffix &apos;EventArgs&apos;.
        /// </summary>
        internal static string MiKo_1075_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1075_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Event argument types should follow the pattern that they inherit from &apos;System.EventArgs&apos; and their names end with &apos;EventArgs&apos;.
        ///Types that end their names with &apos;EventArgs&apos; but do not follow that pattern lie about being event arguments types. Such types should not end their names with &apos;EventArgs&apos; at all..
        /// </summary>
        internal static string MiKo_1075_Description {
            get {
                return ResourceManager.GetString("MiKo_1075_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos; instead.
        /// </summary>
        internal static string MiKo_1075_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1075_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Non-&apos;System.EventArgs&apos; types should not be suffixed with &apos;EventArgs&apos;.
        /// </summary>
        internal static string MiKo_1075_Title {
            get {
                return ResourceManager.GetString("MiKo_1075_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change suffix to &apos;Event&apos;.
        /// </summary>
        internal static string MiKo_1076_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1076_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prism event types follow the pattern defined by Prism and end their names with &apos;Event&apos;..
        /// </summary>
        internal static string MiKo_1076_Description {
            get {
                return ResourceManager.GetString("MiKo_1076_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos; instead.
        /// </summary>
        internal static string MiKo_1076_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1076_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prism event types should be suffixed with &apos;Event&apos;.
        /// </summary>
        internal static string MiKo_1076_Title {
            get {
                return ResourceManager.GetString("MiKo_1076_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is much easier to read a number inside a name if it is written as number and not its spelling (e.g. &apos;issue42&apos; in contrast to &apos;issueFortyTwo&apos;)..
        /// </summary>
        internal static string MiKo_1080_Description {
            get {
                return ResourceManager.GetString("MiKo_1080_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use number instead of spelling.
        /// </summary>
        internal static string MiKo_1080_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1080_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Names should contain numbers instead of their spellings.
        /// </summary>
        internal static string MiKo_1080_Title {
            get {
                return ResourceManager.GetString("MiKo_1080_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove number.
        /// </summary>
        internal static string MiKo_1081_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1081_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suffixing methods with a number makes it hard for the users of the methods to use them as it is unclear which one is the correct or whether they have to be used in conjunction. So instead of using a number suffix methods should have a proper descriptive name..
        /// </summary>
        internal static string MiKo_1081_Description {
            get {
                return ResourceManager.GetString("MiKo_1081_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use a number as suffix.
        /// </summary>
        internal static string MiKo_1081_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1081_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should not be suffixed with a number.
        /// </summary>
        internal static string MiKo_1081_Title {
            get {
                return ResourceManager.GetString("MiKo_1081_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove number.
        /// </summary>
        internal static string MiKo_1082_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1082_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suffixing properties with a number (especially if the type they return have a number as well) makes them unnecessary difficult to read. Most times the number can simply be avoided, which in turn makes them easier to read (and they are to the point)..
        /// </summary>
        internal static string MiKo_1082_Description {
            get {
                return ResourceManager.GetString("MiKo_1082_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use a number as suffix.
        /// </summary>
        internal static string MiKo_1082_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1082_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Properties should not be suffixed with a number if their types have number suffixes.
        /// </summary>
        internal static string MiKo_1082_Title {
            get {
                return ResourceManager.GetString("MiKo_1082_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove number.
        /// </summary>
        internal static string MiKo_1083_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1083_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suffixing fields with a number (especially if their types have a number as well) makes them unnecessary difficult to read. Most times the number can simply be avoided, which in turn makes them easier to read (and they are to the point)..
        /// </summary>
        internal static string MiKo_1083_Description {
            get {
                return ResourceManager.GetString("MiKo_1083_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use a number as suffix.
        /// </summary>
        internal static string MiKo_1083_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1083_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fields should not be suffixed with a number if their types have number suffixes.
        /// </summary>
        internal static string MiKo_1083_Title {
            get {
                return ResourceManager.GetString("MiKo_1083_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove number.
        /// </summary>
        internal static string MiKo_1084_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1084_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suffixing variables with a number (especially if their types have a number as well) makes them unnecessary difficult to read. Most times the number can simply be avoided, which in turn makes them easier to read (and they are to the point)..
        /// </summary>
        internal static string MiKo_1084_Description {
            get {
                return ResourceManager.GetString("MiKo_1084_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use a number as suffix.
        /// </summary>
        internal static string MiKo_1084_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1084_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variables should not be suffixed with a number if their types have number suffixes.
        /// </summary>
        internal static string MiKo_1084_Title {
            get {
                return ResourceManager.GetString("MiKo_1084_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove number.
        /// </summary>
        internal static string MiKo_1085_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1085_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suffixing parameters with number provides no benefit. So instead of using a number suffix parameters should have a proper descriptive name..
        /// </summary>
        internal static string MiKo_1085_Description {
            get {
                return ResourceManager.GetString("MiKo_1085_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use a number as suffix.
        /// </summary>
        internal static string MiKo_1085_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1085_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameters should not be suffixed with a number.
        /// </summary>
        internal static string MiKo_1085_Title {
            get {
                return ResourceManager.GetString("MiKo_1085_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using numbers in method names such &apos;Send2You&apos; or &apos;Do4You&apos; is slang and should be avoided. Instead, the correct words &apos;To&apos; or &apos;For&apos; should be used..
        /// </summary>
        internal static string MiKo_1086_Description {
            get {
                return ResourceManager.GetString("MiKo_1086_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use a number as slang.
        /// </summary>
        internal static string MiKo_1086_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1086_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should not be named using numbers as slang.
        /// </summary>
        internal static string MiKo_1086_Title {
            get {
                return ResourceManager.GetString("MiKo_1086_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rename constructor parameter after counterpart in base class.
        /// </summary>
        internal static string MiKo_1087_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1087_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease usage and avoid misunderstandings, the names of constructor parameters should be identical to the names of constructors of the base class..
        /// </summary>
        internal static string MiKo_1087_Description {
            get {
                return ResourceManager.GetString("MiKo_1087_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name constructor parameter &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1087_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1087_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name constructor parameters after their counterparts in the base class.
        /// </summary>
        internal static string MiKo_1087_Title {
            get {
                return ResourceManager.GetString("MiKo_1087_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To indicate that something is a singleton, the specific property or field should be named &apos;Instance&apos; as convention. That makes it easier to spot..
        /// </summary>
        internal static string MiKo_1088_Description {
            get {
                return ResourceManager.GetString("MiKo_1088_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;Instance&apos;.
        /// </summary>
        internal static string MiKo_1088_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1088_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Singleton instances should be named &apos;Instance&apos;.
        /// </summary>
        internal static string MiKo_1088_Title {
            get {
                return ResourceManager.GetString("MiKo_1088_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rename parameter.
        /// </summary>
        internal static string MiKo_1090_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1090_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Instead of suffixing a parameter with a specific type (such as xyzComparer, xyzView, or xyzItem), the parameter should be named so (comparer, view or item).
        ///
        ///The reason is that the type already states what the parameter is - so its name should not have that additional, redundant information..
        /// </summary>
        internal static string MiKo_1090_Description {
            get {
                return ResourceManager.GetString("MiKo_1090_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1090_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1090_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameters should not be suffixed with specific types.
        /// </summary>
        internal static string MiKo_1090_Title {
            get {
                return ResourceManager.GetString("MiKo_1090_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove variable suffix.
        /// </summary>
        internal static string MiKo_1091_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1091_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Instead of suffixing a variable with a specific type (such as xyzComparer, xyzView, or xyzItem), the variable should be named so (comparer, view or item).
        ///
        ///The reason is that the type already states what the variable is - so its name should not have that additional, redundant information..
        /// </summary>
        internal static string MiKo_1091_Description {
            get {
                return ResourceManager.GetString("MiKo_1091_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1091_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1091_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variables should not be suffixed with specific types.
        /// </summary>
        internal static string MiKo_1091_Title {
            get {
                return ResourceManager.GetString("MiKo_1091_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove suffix.
        /// </summary>
        internal static string MiKo_1092_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1092_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Instead of suffixing an &apos;ability&apos; type with redundant information (such as &apos;ComparableItem&apos;), the redundant information should be left out of the name of the type (such as &apos;Comparable&apos;)..
        /// </summary>
        internal static string MiKo_1092_Description {
            get {
                return ResourceManager.GetString("MiKo_1092_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1092_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1092_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;Ability&apos; Types should not be suffixed with redundant information.
        /// </summary>
        internal static string MiKo_1092_Title {
            get {
                return ResourceManager.GetString("MiKo_1092_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove suffix &apos;Object&apos; or &apos;Struct&apos;.
        /// </summary>
        internal static string MiKo_1093_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1093_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Identifiers should not have the term &apos;Object&apos; or &apos;Struct&apos; as suffix. Many times, a mcuh better name can be given that avoids the usage of the term &apos;Object&apos; or &apos;Struct&apos; at all (such as &apos;Identifier&apos; instead of &apos;IdentificationObject&apos;)..
        /// </summary>
        internal static string MiKo_1093_Description {
            get {
                return ResourceManager.GetString("MiKo_1093_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use suffix &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1093_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1093_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use the suffix &apos;Object&apos; or &apos;Struct&apos;.
        /// </summary>
        internal static string MiKo_1093_Title {
            get {
                return ResourceManager.GetString("MiKo_1093_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Types should use suffixes that identify them as types and are in active case, they should not use suffixes that are passive and would belong into names of namespaces.
        ///For example, types should not be suffixed with &apos;Management&apos; or &apos;Handling&apos;. Instead, they should be suffixed with the more active terms &apos;Manager&apos; or &apos;Handler&apos;..
        /// </summary>
        internal static string MiKo_1094_Description {
            get {
                return ResourceManager.GetString("MiKo_1094_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos; instead.
        /// </summary>
        internal static string MiKo_1094_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1094_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not suffix types with passive namespace names.
        /// </summary>
        internal static string MiKo_1094_Title {
            get {
                return ResourceManager.GetString("MiKo_1094_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Although the terms &apos;Delete&apos; and &apos;Remove&apos; are defined quite similarly, there is a main difference between both:
        ///- &apos;Delete&apos; means &apos;erase&apos; (i.e. render nonexistent or nonrecoverable)
        ///- &apos;Remove&apos; means &apos;take away and set aside&apos; (but keep in existence)
        ///
        ///Therefore, both terms should not be used together in documentation and naming (such as a method is named &apos;RemoveUser&apos; but the documentation states &apos;Deletes the user from the database.&apos;).
        /// </summary>
        internal static string MiKo_1095_Description {
            get {
                return ResourceManager.GetString("MiKo_1095_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Choose wisely between &apos;Delete&apos; and &apos;Remove&apos;.
        /// </summary>
        internal static string MiKo_1095_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1095_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &apos;Delete&apos; and &apos;Remove&apos; both in names and documentation.
        /// </summary>
        internal static string MiKo_1095_Title {
            get {
                return ResourceManager.GetString("MiKo_1095_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To be more explicit and direct, names should use &apos;Failed&apos; instead of &apos;NotSuccesful&apos;..
        /// </summary>
        internal static string MiKo_1096_Description {
            get {
                return ResourceManager.GetString("MiKo_1096_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Failed&apos; instead of &apos;NotSuccessful&apos;.
        /// </summary>
        internal static string MiKo_1096_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1096_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Names should use &apos;Failed&apos; instead of &apos;NotSuccessful&apos;.
        /// </summary>
        internal static string MiKo_1096_Title {
            get {
                return ResourceManager.GetString("MiKo_1096_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove field prefix.
        /// </summary>
        internal static string MiKo_1097_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1097_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameters should not use the same prefixes as fields because that would be make them difficult to distinguish from fields. Reviewers probably are not aware of such and might come to wrong conclusions when reading the code..
        /// </summary>
        internal static string MiKo_1097_Description {
            get {
                return ResourceManager.GetString("MiKo_1097_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use field prefix &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1097_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1097_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter names should not follow the naming scheme for fields.
        /// </summary>
        internal static string MiKo_1097_Title {
            get {
                return ResourceManager.GetString("MiKo_1097_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In case a type implements a specific business interface, that type should indicate that within its name. This allows to identify the types more easily when a developer wants to use one of them.
        ///
        ///Example:
        ///A type implements interface &apos;IPart&apos;. So it should be named accordingly, such as &apos;XyzPart&apos;..
        /// </summary>
        internal static string MiKo_1098_Description {
            get {
                return ResourceManager.GetString("MiKo_1098_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suffix type name according to one of the following interfaces: {1}.
        /// </summary>
        internal static string MiKo_1098_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1098_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type names should reflect the business interface(s) they implement.
        /// </summary>
        internal static string MiKo_1098_Title {
            get {
                return ResourceManager.GetString("MiKo_1098_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rename parameter to match overload.
        /// </summary>
        internal static string MiKo_1099_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1099_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameters on method overloads should have the same name. The reason is that most likely these parameters represent the same inputs accross the different overloads which should be reflected in their names..
        /// </summary>
        internal static string MiKo_1099_Description {
            get {
                return ResourceManager.GetString("MiKo_1099_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos; to match overload.
        /// </summary>
        internal static string MiKo_1099_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1099_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matching parameters on method overloads should have identical names.
        /// </summary>
        internal static string MiKo_1099_Title {
            get {
                return ResourceManager.GetString("MiKo_1099_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A class that is marked as a unit test class should indicate via its name which type it tests.
        ///The name should be constructed by having the name of the type under test as prefix and &apos;Tests&apos; as suffix (e.g. for class &apos;MyXyzClass&apos; the test class should be named &apos;MyXyzClassTests&apos;)..
        /// </summary>
        internal static string MiKo_1100_Description {
            get {
                return ResourceManager.GetString("MiKo_1100_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1100_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1100_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test classes should start with the name of the type under test.
        /// </summary>
        internal static string MiKo_1100_Title {
            get {
                return ResourceManager.GetString("MiKo_1100_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Append &apos;Tests&apos; suffix.
        /// </summary>
        internal static string MiKo_1101_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1101_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A class that is marked as a unit test class should indicate that by the suffix &apos;Tests&apos; as it normally contains multiple tests..
        /// </summary>
        internal static string MiKo_1101_Description {
            get {
                return ResourceManager.GetString("MiKo_1101_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1101_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1101_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test classes should end with &apos;Tests&apos;.
        /// </summary>
        internal static string MiKo_1101_Title {
            get {
                return ResourceManager.GetString("MiKo_1101_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove test marker from name.
        /// </summary>
        internal static string MiKo_1102_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1102_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A method that is marked as a unit test should not additionally indicate that it is a unit test by having &apos;Test&apos; in its name..
        /// </summary>
        internal static string MiKo_1102_Description {
            get {
                return ResourceManager.GetString("MiKo_1102_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;{1}&apos; from name.
        /// </summary>
        internal static string MiKo_1102_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1102_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test methods should not contain &apos;Test&apos; in their names.
        /// </summary>
        internal static string MiKo_1102_Title {
            get {
                return ResourceManager.GetString("MiKo_1102_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rename to &apos;PrepareTest&apos;.
        /// </summary>
        internal static string MiKo_1103_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1103_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A method that is marked as unit test initialization method should be named &apos;PrepareTest&apos;..
        /// </summary>
        internal static string MiKo_1103_Description {
            get {
                return ResourceManager.GetString("MiKo_1103_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1103_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1103_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test initialization methods should be named &apos;PrepareTest&apos;.
        /// </summary>
        internal static string MiKo_1103_Title {
            get {
                return ResourceManager.GetString("MiKo_1103_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rename to &apos;CleanupTest&apos;.
        /// </summary>
        internal static string MiKo_1104_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1104_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A method that is marked as unit test cleanup method should be named &apos;CleanupTest&apos;..
        /// </summary>
        internal static string MiKo_1104_Description {
            get {
                return ResourceManager.GetString("MiKo_1104_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1104_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1104_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test cleanup methods should be named &apos;CleanupTest&apos;.
        /// </summary>
        internal static string MiKo_1104_Title {
            get {
                return ResourceManager.GetString("MiKo_1104_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rename to &apos;PrepareTestEnvironment&apos;.
        /// </summary>
        internal static string MiKo_1105_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1105_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A method that is marked as one-time unit test initialization method should be named &apos;PrepareTestEnvironment&apos;..
        /// </summary>
        internal static string MiKo_1105_Description {
            get {
                return ResourceManager.GetString("MiKo_1105_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1105_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1105_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One-time test initialization methods should be named &apos;PrepareTestEnvironment&apos;.
        /// </summary>
        internal static string MiKo_1105_Title {
            get {
                return ResourceManager.GetString("MiKo_1105_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rename to &apos;CleanupTestEnvironment&apos;.
        /// </summary>
        internal static string MiKo_1106_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1106_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A method that is marked as one-time unit test cleanup method should be named &apos;CleanupTestEnvironment&apos;..
        /// </summary>
        internal static string MiKo_1106_Description {
            get {
                return ResourceManager.GetString("MiKo_1106_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1106_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1106_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One-time test cleanup methods should be named &apos;CleanupTestEnvironment&apos;.
        /// </summary>
        internal static string MiKo_1106_Title {
            get {
                return ResourceManager.GetString("MiKo_1106_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use underscores instead of Pascal-casing.
        /// </summary>
        internal static string MiKo_1107_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1107_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For maintenance reasons, test methods whose names are written in Pascal-casing are hard to read.
        ///To ease reading, use underscores between the different words instead..
        /// </summary>
        internal static string MiKo_1107_Description {
            get {
                return ResourceManager.GetString("MiKo_1107_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use underscores instead of Pascal-casing.
        /// </summary>
        internal static string MiKo_1107_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1107_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test methods should not be in Pascal-casing.
        /// </summary>
        internal static string MiKo_1107_Title {
            get {
                return ResourceManager.GetString("MiKo_1107_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove Mock suffix.
        /// </summary>
        internal static string MiKo_1108_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1108_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For maintenance reasons, variables, parameters, properties and fields should be named about what they represent and not what they technically are.
        ///Hence naming them e.g. &apos;Mock&apos;, &apos;Stub&apos;, &apos;Fake&apos; or &apos;Shim&apos; does not provide any additional value and is just some cluttering noise. In addition, those names put the developer&apos;s attention and focus on the wrong thing..
        /// </summary>
        internal static string MiKo_1108_Description {
            get {
                return ResourceManager.GetString("MiKo_1108_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not name it &apos;Mock&apos;, &apos;Stub&apos;, &apos;Fake&apos; or &apos;Shim&apos;.
        /// </summary>
        internal static string MiKo_1108_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1108_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not name variables, parameters, fields and properties &apos;Mock&apos;, &apos;Stub&apos;, &apos;Fake&apos; or &apos;Shim&apos;.
        /// </summary>
        internal static string MiKo_1108_Title {
            get {
                return ResourceManager.GetString("MiKo_1108_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prefix with &apos;Testable&apos; instead of suffix &apos;Ut&apos;.
        /// </summary>
        internal static string MiKo_1109_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1109_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sometimes types or some of their functionality cannot be tested directly due to wrong visibility. To work around that, a solution is to inherit from such types and use that special type during test. Additionally, additional methods or properties are added to such types to access the orginal, invisible method resp. property.
        ///Those specifically introduced types should be named as the original type, but prefixed with &apos;Testable&apos; - they should not be suffixed with the hard-to-understand &apos;Ut&apos; suffix..
        /// </summary>
        internal static string MiKo_1109_Description {
            get {
                return ResourceManager.GetString("MiKo_1109_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1109_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1109_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prefix testable types with &apos;Testable&apos; instead of using the &apos;Ut&apos; suffix.
        /// </summary>
        internal static string MiKo_1109_Title {
            get {
                return ResourceManager.GetString("MiKo_1109_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Append underscore.
        /// </summary>
        internal static string MiKo_1110_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1110_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For maintenance reasons, parameterized test methods should be easy to read and parameters easy to spot.
        ///Therefore, the methods should be suffixed with underscores.
        ///
        ///Example:
        ///   &quot;Do_something_for_value_(42)&quot; is easier to read than &quot;Do_something_for_value(42)&quot; because of the additional space before the brace..
        /// </summary>
        internal static string MiKo_1110_Description {
            get {
                return ResourceManager.GetString("MiKo_1110_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suffix name with underscore.
        /// </summary>
        internal static string MiKo_1110_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1110_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test methods with parameters should be suffixed with underscore.
        /// </summary>
        internal static string MiKo_1110_Title {
            get {
                return ResourceManager.GetString("MiKo_1110_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove underscore.
        /// </summary>
        internal static string MiKo_1111_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1111_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For maintenance reasons, parameterless test methods should be easy to read. Therefore they should not be suffixed with underscores, in contrast to parameterized methods.
        ///
        ///Example:
        ///   &quot;Do_something_for_value()&quot; is easier to read than &quot;Do_something_for_value_()&quot;..
        /// </summary>
        internal static string MiKo_1111_Description {
            get {
                return ResourceManager.GetString("MiKo_1111_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not suffix name with underscore.
        /// </summary>
        internal static string MiKo_1111_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1111_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test methods without parameters should not be suffixed with underscore.
        /// </summary>
        internal static string MiKo_1111_Title {
            get {
                return ResourceManager.GetString("MiKo_1111_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;arbitrary&apos; from name.
        /// </summary>
        internal static string MiKo_1112_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1112_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tests usually deal with arbitrary test data, hence there is no benefit in naming a field, parameter, variable (etc.) &apos;arbitrary&apos;. That phrase can be removed without losing any meaning..
        /// </summary>
        internal static string MiKo_1112_Description {
            get {
                return ResourceManager.GetString("MiKo_1112_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;arbitrary&apos; from name.
        /// </summary>
        internal static string MiKo_1112_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1112_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not name test data &apos;arbitrary&apos;.
        /// </summary>
        internal static string MiKo_1112_Title {
            get {
                return ResourceManager.GetString("MiKo_1112_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The BDD style via &quot;Given ... When ... Then ...&quot; is considered to be used with stakeholders that are no developers.
        ///
        ///The audience of unit tests, however, are developers. Hence, such tests should not use the BDD style at all as that makes them harder to read and understand..
        /// </summary>
        internal static string MiKo_1113_Description {
            get {
                return ResourceManager.GetString("MiKo_1113_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not name BDD style.
        /// </summary>
        internal static string MiKo_1113_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1113_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test methods should not be named according BDD style.
        /// </summary>
        internal static string MiKo_1113_Title {
            get {
                return ResourceManager.GetString("MiKo_1113_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test methods should be named according to what scenario they test but not according to whether that is a so-called &apos;happy path&apos; or &apos;bad path&apos; inside the code..
        /// </summary>
        internal static string MiKo_1114_Description {
            get {
                return ResourceManager.GetString("MiKo_1114_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not name &apos;{0}&apos; a happy or bad path.
        /// </summary>
        internal static string MiKo_1114_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1114_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test methods should not be named &apos;HappyPath&apos; or &apos;BadPath&apos;.
        /// </summary>
        internal static string MiKo_1114_Title {
            get {
                return ResourceManager.GetString("MiKo_1114_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fix &quot;Yoda-speak&quot; method name.
        /// </summary>
        internal static string MiKo_1115_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1115_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For maintenance reasons, the names of test methods should be easy to read.
        ///They should describe the scenario that is tested in a fluent way and not in a &apos;Yoda&apos; like way.
        ///
        ///Example:
        ///&quot;Send_EMailAddressValid_SendsMail&quot; is hard to read. Much easier to read udn understand would be &quot;Send_sends_email_to_valid_address&quot;..
        /// </summary>
        internal static string MiKo_1115_Description {
            get {
                return ResourceManager.GetString("MiKo_1115_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &quot;Yoda-speak&quot; for method names.
        /// </summary>
        internal static string MiKo_1115_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1115_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test methods should be named in a fluent way.
        /// </summary>
        internal static string MiKo_1115_Title {
            get {
                return ResourceManager.GetString("MiKo_1115_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rename exception.
        /// </summary>
        internal static string MiKo_1200_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1200_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, exceptions in catch blocks should be named consistently..
        /// </summary>
        internal static string MiKo_1200_Description {
            get {
                return ResourceManager.GetString("MiKo_1200_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1200_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1200_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name exceptions in catch blocks consistently.
        /// </summary>
        internal static string MiKo_1200_Title {
            get {
                return ResourceManager.GetString("MiKo_1200_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rename exception.
        /// </summary>
        internal static string MiKo_1201_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1201_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, exceptions as parameters should be named consistently..
        /// </summary>
        internal static string MiKo_1201_Description {
            get {
                return ResourceManager.GetString("MiKo_1201_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos; or &apos;{2}&apos;.
        /// </summary>
        internal static string MiKo_1201_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1201_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name exceptions as parameters consistently.
        /// </summary>
        internal static string MiKo_1201_Title {
            get {
                return ResourceManager.GetString("MiKo_1201_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;_&apos;.
        /// </summary>
        internal static string MiKo_1300_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_1300_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance and avoid visual noise, unimportant identifiers in lambdas should be consistently named &apos;_&apos;..
        /// </summary>
        internal static string MiKo_1300_Description {
            get {
                return ResourceManager.GetString("MiKo_1300_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;_&apos; instead.
        /// </summary>
        internal static string MiKo_1300_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1300_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unimportant identifiers in lambda statements should be named &apos;_&apos;.
        /// </summary>
        internal static string MiKo_1300_Title {
            get {
                return ResourceManager.GetString("MiKo_1300_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Namespaces group functionalities, so their names should be in plural..
        /// </summary>
        internal static string MiKo_1400_Description {
            get {
                return ResourceManager.GetString("MiKo_1400_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/names-of-namespaces.
        /// </summary>
        internal static string MiKo_1400_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_1400_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use plural for namespace, such as &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1400_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1400_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Namespace names should be in plural.
        /// </summary>
        internal static string MiKo_1400_Title {
            get {
                return ResourceManager.GetString("MiKo_1400_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Namespaces should not contain any language specific (technical) name, such as &apos;Interfaces&apos;, &apos;Exceptions&apos; or &apos;Enums&apos;..
        /// </summary>
        internal static string MiKo_1401_Description {
            get {
                return ResourceManager.GetString("MiKo_1401_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use technical name &apos;{0}&apos; in namespace.
        /// </summary>
        internal static string MiKo_1401_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1401_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Namespaces should not contain technical language names.
        /// </summary>
        internal static string MiKo_1401_Title {
            get {
                return ResourceManager.GetString("MiKo_1401_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Namespaces should not be named after WPF specific design patterns, such as &apos;Commands&apos;, &apos;Models&apos;, &apos;ViewModels&apos; or &apos;Views&apos;.
        ///Models are Entities. Commands, ViewModels and Views belong together and are UI specific parts..
        /// </summary>
        internal static string MiKo_1402_Description {
            get {
                return ResourceManager.GetString("MiKo_1402_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use WPF design pattern name &apos;{0}&apos; in namespace.
        /// </summary>
        internal static string MiKo_1402_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1402_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Namespaces should not be named after WPF specific design patterns.
        /// </summary>
        internal static string MiKo_1402_Title {
            get {
                return ResourceManager.GetString("MiKo_1402_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To avoid redundancy and confused developers, namespaces should not be named after any parent namespace. Instead, it should be made more clear into which namespace a type belongs by choosing a proper name..
        /// </summary>
        internal static string MiKo_1403_Description {
            get {
                return ResourceManager.GetString("MiKo_1403_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not re-use &apos;{0}&apos; in namespace.
        /// </summary>
        internal static string MiKo_1403_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1403_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Namespaces should not be named after any of their parent namespaces.
        /// </summary>
        internal static string MiKo_1403_Title {
            get {
                return ResourceManager.GetString("MiKo_1403_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Namespaces should not contain any unspecific name, such as &apos;Miscellaneous&apos; or &apos;Utilities&apos;..
        /// </summary>
        internal static string MiKo_1404_Description {
            get {
                return ResourceManager.GetString("MiKo_1404_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &apos;{0}&apos; in namespace.
        /// </summary>
        internal static string MiKo_1404_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1404_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Namespaces should not contain unspecific names.
        /// </summary>
        internal static string MiKo_1404_Title {
            get {
                return ResourceManager.GetString("MiKo_1404_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Namespaces should be named after features, not deployment details.
        ///Most times, a Lib suffix only signals that the assembly is a DLL (dynamic link library). This information is not needed at all.
        ///It does not matter if it is a library or an executable, what matters is the functionality it contains/provides..
        /// </summary>
        internal static string MiKo_1405_Description {
            get {
                return ResourceManager.GetString("MiKo_1405_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &apos;{1}&apos; in namespace.
        /// </summary>
        internal static string MiKo_1405_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1405_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Namespaces should not contain &apos;Lib&apos;.
        /// </summary>
        internal static string MiKo_1405_Title {
            get {
                return ResourceManager.GetString("MiKo_1405_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease their finding, value converters should be placed and grouped in a specific namespace called &apos;Converters&apos;..
        /// </summary>
        internal static string MiKo_1406_Description {
            get {
                return ResourceManager.GetString("MiKo_1406_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place in &apos;Converters&apos; namespace.
        /// </summary>
        internal static string MiKo_1406_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1406_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Value converters should be placed in &apos;Converters&apos; namespace.
        /// </summary>
        internal static string MiKo_1406_Title {
            get {
                return ResourceManager.GetString("MiKo_1406_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A test should be located in the same namespace as the class it shall test..
        /// </summary>
        internal static string MiKo_1407_Description {
            get {
                return ResourceManager.GetString("MiKo_1407_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &apos;Test&apos; in namespace.
        /// </summary>
        internal static string MiKo_1407_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1407_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test namespaces should not contain &apos;Test&apos;.
        /// </summary>
        internal static string MiKo_1407_Title {
            get {
                return ResourceManager.GetString("MiKo_1407_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease usage, extension method classes should be placed in same namespace as the extended types.
        ///That allows an easy detection and use via IntelliSense..
        /// </summary>
        internal static string MiKo_1408_Description {
            get {
                return ResourceManager.GetString("MiKo_1408_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place class in namespace &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_1408_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1408_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extension methods should be placed in same namespace as the extended types.
        /// </summary>
        internal static string MiKo_1408_Title {
            get {
                return ResourceManager.GetString("MiKo_1408_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Namespaces should consist of complete words and should therefore not have leading or trailing underscore(s)..
        /// </summary>
        internal static string MiKo_1409_Description {
            get {
                return ResourceManager.GetString("MiKo_1409_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos; instead.
        /// </summary>
        internal static string MiKo_1409_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1409_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not prefix or suffix namespaces with underscores.
        /// </summary>
        internal static string MiKo_1409_Title {
            get {
                return ResourceManager.GetString("MiKo_1409_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fix malformed XML.
        /// </summary>
        internal static string MiKo_2000_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2000_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should be valid XML so that it can be generated as API documentation/IntelliSense to support the developers..
        /// </summary>
        internal static string MiKo_2000_Description {
            get {
                return ResourceManager.GetString("MiKo_2000_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation is malformed (contains invalid characters, eg. &apos;&amp;&apos;, &apos;&gt;&apos;, &apos;&lt;&apos;).
        /// </summary>
        internal static string MiKo_2000_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2000_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should be valid XML.
        /// </summary>
        internal static string MiKo_2000_Title {
            get {
                return ResourceManager.GetString("MiKo_2000_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start comment with &apos;Occurs &apos;.
        /// </summary>
        internal static string MiKo_2001_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2001_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Events should be documented with &apos;Occurs ...&apos; to indicate that events actually occur..
        /// </summary>
        internal static string MiKo_2001_Description {
            get {
                return ResourceManager.GetString("MiKo_2001_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;summary&gt; with: &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_2001_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2001_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Events should be documented properly.
        /// </summary>
        internal static string MiKo_2001_Title {
            get {
                return ResourceManager.GetString("MiKo_2001_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Apply &apos;Provides data for the &lt;see cref=&quot;TODO&quot;/&gt; event.&apos; comment.
        /// </summary>
        internal static string MiKo_2002_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2002_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, classes that inherit from &apos;System.EventArgs&apos; should be documented with &apos;Provides data for the &lt;see cref=&quot;XYZ&quot; /&gt; event.&apos; to indicate for which event they are valid..
        /// </summary>
        internal static string MiKo_2002_Description {
            get {
                return ResourceManager.GetString("MiKo_2002_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; should follow pattern: &apos;{1} ... {2}&apos;.
        /// </summary>
        internal static string MiKo_2002_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2002_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EventArgs should be documented properly.
        /// </summary>
        internal static string MiKo_2002_Title {
            get {
                return ResourceManager.GetString("MiKo_2002_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start comment with &apos;Handles the &apos;.
        /// </summary>
        internal static string MiKo_2003_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2003_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation of an event handler should have a default starting phrase that describes what event gets handled..
        /// </summary>
        internal static string MiKo_2003_Description {
            get {
                return ResourceManager.GetString("MiKo_2003_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;summary&gt; with: &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_2003_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2003_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation of event handlers should have a default starting phrase.
        /// </summary>
        internal static string MiKo_2003_Title {
            get {
                return ResourceManager.GetString("MiKo_2003_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fix comment of event handler parameter.
        /// </summary>
        internal static string MiKo_2004_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2004_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Event method parameters should define what exactly they are..
        /// </summary>
        internal static string MiKo_2004_Description {
            get {
                return ResourceManager.GetString("MiKo_2004_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change documentation to: &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_2004_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2004_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation of event handler parameter names should follow .NET Framework Design Guidelines for event handlers.
        /// </summary>
        internal static string MiKo_2004_Title {
            get {
                return ResourceManager.GetString("MiKo_2004_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should not contain the term &apos;event arg&apos;. Instead, it should contain the reference to the specific class, such as &apos;&lt;see cref=&quot;XyzEventArgs&quot; /&gt;&apos;..
        /// </summary>
        internal static string MiKo_2005_Description {
            get {
                return ResourceManager.GetString("MiKo_2005_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use term &apos;event arg&apos;.
        /// </summary>
        internal static string MiKo_2005_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2005_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Textual references to EventArgs should be documented properly.
        /// </summary>
        internal static string MiKo_2005_Title {
            get {
                return ResourceManager.GetString("MiKo_2005_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Apply standard comment to RoutedEvent.
        /// </summary>
        internal static string MiKo_2006_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2006_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Routed events should be documented in the same way as they are documented by the .NET Framework..
        /// </summary>
        internal static string MiKo_2006_Description {
            get {
                return ResourceManager.GetString("MiKo_2006_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;{1}&gt; should be: &apos;{2}&apos;.
        /// </summary>
        internal static string MiKo_2006_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2006_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Routed events should be documented as done by the .NET Framework.
        /// </summary>
        internal static string MiKo_2006_Title {
            get {
                return ResourceManager.GetString("MiKo_2006_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Append sealed text to comment.
        /// </summary>
        internal static string MiKo_2010_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2010_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease their usage when it comes to inheritance, sealed classes should document the fact that they are sealed..
        /// </summary>
        internal static string MiKo_2010_Description {
            get {
                return ResourceManager.GetString("MiKo_2010_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End &lt;summary&gt; with: &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_2010_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2010_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sealed classes should document being sealed.
        /// </summary>
        internal static string MiKo_2010_Title {
            get {
                return ResourceManager.GetString("MiKo_2010_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove sealed text to comment.
        /// </summary>
        internal static string MiKo_2011_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2011_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unsealed classes should not report that they are sealed..
        /// </summary>
        internal static string MiKo_2011_Description {
            get {
                return ResourceManager.GetString("MiKo_2011_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; should not contain: &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_2011_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2011_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unsealed classes should not lie about sealing.
        /// </summary>
        internal static string MiKo_2011_Title {
            get {
                return ResourceManager.GetString("MiKo_2011_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fix meaningless phrase.
        /// </summary>
        internal static string MiKo_2012_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2012_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease development and maintenance, the &lt;summary&gt; documentation should shortly describe a type&apos;s responsibility from the user&apos;s point of view. It should not be described from the implementer&apos;s point of view, except for callback interfaces.
        ///So it should not start with or contain a meaningless phrase like &apos;Used to&apos;. Instead, it should start with a phrase like &apos;Allows to &apos;, &apos;Represents &apos; or &apos;Provides &apos;..
        /// </summary>
        internal static string MiKo_2012_Description {
            get {
                return ResourceManager.GetString("MiKo_2012_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; should not {1} meaningless phrase: &apos;{2}&apos;.
        /// </summary>
        internal static string MiKo_2012_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2012_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation should describe the type&apos;s responsibility.
        /// </summary>
        internal static string MiKo_2012_Title {
            get {
                return ResourceManager.GetString("MiKo_2012_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start comment with &apos;{0}&apos;.
        /// </summary>
        internal static string MiKo_2013_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2013_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease their usage, enums should specify what kind of values they define..
        /// </summary>
        internal static string MiKo_2013_Description {
            get {
                return ResourceManager.GetString("MiKo_2013_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;summary&gt; with: &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_2013_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2013_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation of Enums should have a default starting phrase.
        /// </summary>
        internal static string MiKo_2013_Title {
            get {
                return ResourceManager.GetString("MiKo_2013_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Apply standard &apos;Dispose&apos; comment.
        /// </summary>
        internal static string MiKo_2014_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2014_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dispose methods should be documented in the same way as they are documented by the .NET Framework..
        /// </summary>
        internal static string MiKo_2014_Description {
            get {
                return ResourceManager.GetString("MiKo_2014_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change documentation to: &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_2014_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2014_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dispose methods should be documented as done by the .NET Framework.
        /// </summary>
        internal static string MiKo_2014_Title {
            get {
                return ResourceManager.GetString("MiKo_2014_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace term &apos;fire&apos;.
        /// </summary>
        internal static string MiKo_2015_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2015_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The term &apos;Fire&apos; is a negative term. Employees get fired (or guns), but not events or exceptions. Events get raised and exceptions get thrown..
        /// </summary>
        internal static string MiKo_2015_Description {
            get {
                return ResourceManager.GetString("MiKo_2015_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use {1} instead of {2} in documentation.
        /// </summary>
        internal static string MiKo_2015_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2015_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should use &apos;raise&apos; or &apos;throw&apos; instead of &apos;fire&apos;.
        /// </summary>
        internal static string MiKo_2015_Title {
            get {
                return ResourceManager.GetString("MiKo_2015_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start comment with &apos;{0}&apos;.
        /// </summary>
        internal static string MiKo_2016_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2016_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation for asynchronous methods should indicate that method is run asynchronously..
        /// </summary>
        internal static string MiKo_2016_Description {
            get {
                return ResourceManager.GetString("MiKo_2016_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;summary&gt; with: &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_2016_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2016_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation for asynchronous methods should start with specific phrase.
        /// </summary>
        internal static string MiKo_2016_Title {
            get {
                return ResourceManager.GetString("MiKo_2016_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Apply standard comment to DependencyProperty.
        /// </summary>
        internal static string MiKo_2017_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2017_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dependency properties should be documented in the same way as they are documented by the .NET Framework..
        /// </summary>
        internal static string MiKo_2017_Description {
            get {
                return ResourceManager.GetString("MiKo_2017_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;{1}&gt; should be: &apos;{2}&apos;.
        /// </summary>
        internal static string MiKo_2017_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2017_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dependency properties should be documented as done by the .NET Framework.
        /// </summary>
        internal static string MiKo_2017_Title {
            get {
                return ResourceManager.GetString("MiKo_2017_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;summary&gt; with &apos;{0}&apos;.
        /// </summary>
        internal static string MiKo_2018_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2018_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The terms &apos;Check&apos; or &apos;Test&apos; are ambiguous. If validation of parameters is meant, use something like &apos;Validates&apos; or &apos;Verifies&apos;. If a check for a specific state is meant, use &apos;Determines whether&apos; instead..
        /// </summary>
        internal static string MiKo_2018_Description {
            get {
                return ResourceManager.GetString("MiKo_2018_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;summary&gt; with &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_2018_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2018_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should not use the ambiguous terms &apos;Check&apos; or &apos;Test&apos;.
        /// </summary>
        internal static string MiKo_2018_Title {
            get {
                return ResourceManager.GetString("MiKo_2018_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation should start with a third person singular verb as it shall be a short description of the functionality that the class, property, etc. provides or represents..
        /// </summary>
        internal static string MiKo_2019_Description {
            get {
                return ResourceManager.GetString("MiKo_2019_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;summary&gt; with a third person singular verb.
        /// </summary>
        internal static string MiKo_2019_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2019_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation should start with a third person singular verb (for example &quot;Provides &quot;).
        /// </summary>
        internal static string MiKo_2019_Title {
            get {
                return ResourceManager.GetString("MiKo_2019_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &lt;inheritdoc/&gt;.
        /// </summary>
        internal static string MiKo_2020_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2020_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It does not make sense to use a &lt;summary&gt; documentation that only reference something else via &lt;see cref=&quot;...&quot; /&gt; as IntelliSense does not show these descriptions. For such a scenario &lt;inheritdoc /&gt; should be used..
        /// </summary>
        internal static string MiKo_2020_Description {
            get {
                return ResourceManager.GetString("MiKo_2020_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &lt;inheritdoc /&gt; instead.
        /// </summary>
        internal static string MiKo_2020_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2020_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inherited documentation should be used with &lt;inheritdoc /&gt; marker.
        /// </summary>
        internal static string MiKo_2020_Title {
            get {
                return ResourceManager.GetString("MiKo_2020_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of parameters should describe what they represent..
        /// </summary>
        internal static string MiKo_2021_Description {
            get {
                return ResourceManager.GetString("MiKo_2021_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start documentation with: {1}.
        /// </summary>
        internal static string MiKo_2021_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2021_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation of parameter should have a default starting phrase.
        /// </summary>
        internal static string MiKo_2021_Title {
            get {
                return ResourceManager.GetString("MiKo_2021_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fix comment start of [out] parameter.
        /// </summary>
        internal static string MiKo_2022_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2022_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of [out] parameters should start with the success case..
        /// </summary>
        internal static string MiKo_2022_Description {
            get {
                return ResourceManager.GetString("MiKo_2022_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start documentation with: {1}.
        /// </summary>
        internal static string MiKo_2022_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2022_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation of [out] parameters should have a default starting phrase.
        /// </summary>
        internal static string MiKo_2022_Title {
            get {
                return ResourceManager.GetString("MiKo_2022_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fix comment start of Boolean parameter.
        /// </summary>
        internal static string MiKo_2023_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2023_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of a Boolean as parameter should have a specific phrase that first describes the &apos;true&apos; case and then the &apos;false&apos; case..
        /// </summary>
        internal static string MiKo_2023_Description {
            get {
                return ResourceManager.GetString("MiKo_2023_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should follow pattern: &apos;{1} ... {2}&apos;.
        /// </summary>
        internal static string MiKo_2023_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2023_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation of Boolean parameters should have a default starting phrase.
        /// </summary>
        internal static string MiKo_2023_Title {
            get {
                return ResourceManager.GetString("MiKo_2023_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fix comment start of Enum parameter.
        /// </summary>
        internal static string MiKo_2024_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2024_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of Enum parameters should start with a phrase that specifies what will be done with the Enum..
        /// </summary>
        internal static string MiKo_2024_Description {
            get {
                return ResourceManager.GetString("MiKo_2024_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start documentation with: {1}.
        /// </summary>
        internal static string MiKo_2024_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2024_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation of Enum parameters should have a default starting phrase.
        /// </summary>
        internal static string MiKo_2024_Title {
            get {
                return ResourceManager.GetString("MiKo_2024_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fix comment start of CancellationToken.
        /// </summary>
        internal static string MiKo_2025_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2025_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of &apos;CancellationToken&apos; parameters should start with a phrase that describes how it is used..
        /// </summary>
        internal static string MiKo_2025_Description {
            get {
                return ResourceManager.GetString("MiKo_2025_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start documentation with: {1}.
        /// </summary>
        internal static string MiKo_2025_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2025_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation of &apos;CancellationToken&apos; parameters should have a default starting phrase.
        /// </summary>
        internal static string MiKo_2025_Title {
            get {
                return ResourceManager.GetString("MiKo_2025_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation should not state that a parameter is unused although it is still in use..
        /// </summary>
        internal static string MiKo_2026_Description {
            get {
                return ResourceManager.GetString("MiKo_2026_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation lies about being unused.
        /// </summary>
        internal static string MiKo_2026_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2026_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Used parameters should not be documented to be unused.
        /// </summary>
        internal static string MiKo_2026_Title {
            get {
                return ResourceManager.GetString("MiKo_2026_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fix comment start of parameter of serialization constructor.
        /// </summary>
        internal static string MiKo_2027_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2027_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease the usage, the documentation of the parameters of the serialization constructors shall have a specific phrase that describes what they contain..
        /// </summary>
        internal static string MiKo_2027_Description {
            get {
                return ResourceManager.GetString("MiKo_2027_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change documentation to: &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_2027_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2027_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Serialization constructor parameters shall be documented with a specific phrase.
        /// </summary>
        internal static string MiKo_2027_Title {
            get {
                return ResourceManager.GetString("MiKo_2027_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of parameters should describe what they represent and what they are used for. Only stating the name of the parameter is simply not enough..
        /// </summary>
        internal static string MiKo_2028_Description {
            get {
                return ResourceManager.GetString("MiKo_2028_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should contain more than just the parameter name.
        /// </summary>
        internal static string MiKo_2028_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2028_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation of parameter should not just contain the name of the parameter.
        /// </summary>
        internal static string MiKo_2028_Title {
            get {
                return ResourceManager.GetString("MiKo_2028_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;cref&apos; value from &lt;inheritdoc/&gt;.
        /// </summary>
        internal static string MiKo_2029_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2029_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Instead of faking an XML documentation by using &lt;inheritdoc&gt; with a &apos;cref&apos; to itself, a well-written &lt;summary&gt; XML documentation should be used..
        /// </summary>
        internal static string MiKo_2029_Description {
            get {
                return ResourceManager.GetString("MiKo_2029_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &lt;inheritdoc cref=&quot;{0}&quot; /&gt;.
        /// </summary>
        internal static string MiKo_2029_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2029_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;inheritdoc&gt; documentation should not use a &apos;cref&apos; to itself.
        /// </summary>
        internal static string MiKo_2029_Title {
            get {
                return ResourceManager.GetString("MiKo_2029_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of a return value should have a default starting phrase that describes the returned value in more detail..
        /// </summary>
        internal static string MiKo_2030_Description {
            get {
                return ResourceManager.GetString("MiKo_2030_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;{1}&gt; with: &apos;{2}&apos;.
        /// </summary>
        internal static string MiKo_2030_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2030_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation of return value should have a default starting phrase.
        /// </summary>
        internal static string MiKo_2030_Title {
            get {
                return ResourceManager.GetString("MiKo_2030_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fix return comment.
        /// </summary>
        internal static string MiKo_2031_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2031_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of a Task as return value should have a default (starting) phrase..
        /// </summary>
        internal static string MiKo_2031_Description {
            get {
                return ResourceManager.GetString("MiKo_2031_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;{1}&gt; with: &apos;{2}&apos;.
        /// </summary>
        internal static string MiKo_2031_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2031_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation of Task return value should have a specific (starting) phrase.
        /// </summary>
        internal static string MiKo_2031_Title {
            get {
                return ResourceManager.GetString("MiKo_2031_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fix return comment.
        /// </summary>
        internal static string MiKo_2032_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2032_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of a Boolean as return value should have a specific phrase that first describes the &apos;true&apos; case and then the &apos;false&apos; case..
        /// </summary>
        internal static string MiKo_2032_Description {
            get {
                return ResourceManager.GetString("MiKo_2032_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;{1}&gt; should follow pattern: &apos;{2} ... {3}&apos;.
        /// </summary>
        internal static string MiKo_2032_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2032_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation of Boolean return value should have a specific phrase.
        /// </summary>
        internal static string MiKo_2032_Title {
            get {
                return ResourceManager.GetString("MiKo_2032_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fix return comment.
        /// </summary>
        internal static string MiKo_2033_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2033_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of a String as return value should have a specific phrase..
        /// </summary>
        internal static string MiKo_2033_Description {
            get {
                return ResourceManager.GetString("MiKo_2033_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;{1}&gt; with: &apos;{2}&apos;.
        /// </summary>
        internal static string MiKo_2033_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2033_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation of String return value should have a default starting phrase.
        /// </summary>
        internal static string MiKo_2033_Title {
            get {
                return ResourceManager.GetString("MiKo_2033_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fix return comment.
        /// </summary>
        internal static string MiKo_2034_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2034_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of an Enum as return value should have a specific phrase..
        /// </summary>
        internal static string MiKo_2034_Description {
            get {
                return ResourceManager.GetString("MiKo_2034_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;{1}&gt; with: &apos;{2}&apos;.
        /// </summary>
        internal static string MiKo_2034_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2034_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation of Enum return value should have a default starting phrase.
        /// </summary>
        internal static string MiKo_2034_Title {
            get {
                return ResourceManager.GetString("MiKo_2034_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fix return comment.
        /// </summary>
        internal static string MiKo_2035_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2035_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of a collection as return value should have a specific phrase..
        /// </summary>
        internal static string MiKo_2035_Description {
            get {
                return ResourceManager.GetString("MiKo_2035_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;{1}&gt; with: &apos;{2}&apos;.
        /// </summary>
        internal static string MiKo_2035_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2035_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation of collection return value should have a default starting phrase.
        /// </summary>
        internal static string MiKo_2035_Title {
            get {
                return ResourceManager.GetString("MiKo_2035_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fix comment for default value &apos;false&apos;.
        /// </summary>
        internal static string MiKo_2036_CodeFixTitle_DefaultFalse {
            get {
                return ResourceManager.GetString("MiKo_2036_CodeFixTitle_DefaultFalse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fix comment for default value &apos;true&apos;.
        /// </summary>
        internal static string MiKo_2036_CodeFixTitle_DefaultTrue {
            get {
                return ResourceManager.GetString("MiKo_2036_CodeFixTitle_DefaultTrue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fix comment for enum default value.
        /// </summary>
        internal static string MiKo_2036_CodeFixTitle_Enum {
            get {
                return ResourceManager.GetString("MiKo_2036_CodeFixTitle_Enum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fix comment for no default value.
        /// </summary>
        internal static string MiKo_2036_CodeFixTitle_NoDefault {
            get {
                return ResourceManager.GetString("MiKo_2036_CodeFixTitle_NoDefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of Boolean or Enum properties shall end with a phrase that describes the value that is returned per default..
        /// </summary>
        internal static string MiKo_2036_Description {
            get {
                return ResourceManager.GetString("MiKo_2036_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End &lt;{1}&gt; with: &apos;{2}&apos;
        ///Or with: &apos;{3}&apos;.
        /// </summary>
        internal static string MiKo_2036_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2036_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation of Boolean or Enum property shall describe the default value.
        /// </summary>
        internal static string MiKo_2036_Title {
            get {
                return ResourceManager.GetString("MiKo_2036_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Apply standard comment to command property.
        /// </summary>
        internal static string MiKo_2037_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2037_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of a property that returns a command should start with a specific phrase that describes what command the property returns..
        /// </summary>
        internal static string MiKo_2037_Description {
            get {
                return ResourceManager.GetString("MiKo_2037_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;{1}&gt; with: &apos;{2}&apos;.
        /// </summary>
        internal static string MiKo_2037_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2037_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation of command properties should have a default starting phrase.
        /// </summary>
        internal static string MiKo_2037_Title {
            get {
                return ResourceManager.GetString("MiKo_2037_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Apply standard comment to command.
        /// </summary>
        internal static string MiKo_2038_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2038_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of a command should start with a specific phrase that describes what the command does..
        /// </summary>
        internal static string MiKo_2038_Description {
            get {
                return ResourceManager.GetString("MiKo_2038_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;{1}&gt; with: &apos;{2}&apos;.
        /// </summary>
        internal static string MiKo_2038_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2038_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation of command should have a default starting phrase.
        /// </summary>
        internal static string MiKo_2038_Title {
            get {
                return ResourceManager.GetString("MiKo_2038_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Apply standard extension methods comment to class.
        /// </summary>
        internal static string MiKo_2039_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2039_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of a class that contains extension methods should start with a specific phrase that describes what the class provides..
        /// </summary>
        internal static string MiKo_2039_Description {
            get {
                return ResourceManager.GetString("MiKo_2039_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;{1}&gt; with: &apos;{2}&apos;.
        /// </summary>
        internal static string MiKo_2039_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2039_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation of classes that contain extension methods should have a default starting phrase.
        /// </summary>
        internal static string MiKo_2039_Title {
            get {
                return ResourceManager.GetString("MiKo_2039_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &lt;see langword=&quot;...&quot;/&gt;.
        /// </summary>
        internal static string MiKo_2040_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2040_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To support other languages than C#, use &apos;&lt;see langword=&quot;...&quot;/&gt;&apos; instead of &apos;&lt;c&gt;...&lt;/c&gt;&apos;..
        /// </summary>
        internal static string MiKo_2040_Description {
            get {
                return ResourceManager.GetString("MiKo_2040_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;{2}&apos; instead of &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_2040_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2040_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;see langword=&quot;...&quot;/&gt; should be used instead of &lt;c&gt;...&lt;/c&gt;.
        /// </summary>
        internal static string MiKo_2040_Title {
            get {
                return ResourceManager.GetString("MiKo_2040_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place XML tag outside &lt;summary&gt;.
        /// </summary>
        internal static string MiKo_2041_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2041_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &lt;summary&gt; documentation should only contain a short summary description. Other documentation should be provided by the other XML tags in parallel to the &lt;summary&gt;..
        /// </summary>
        internal static string MiKo_2041_Description {
            get {
                return ResourceManager.GetString("MiKo_2041_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/recommended-tags-for-documentation-comments.
        /// </summary>
        internal static string MiKo_2041_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_2041_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; should not contain: &apos;&lt;{0}/&gt;&apos;.
        /// </summary>
        internal static string MiKo_2041_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2041_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation should not contain other documentation tags.
        /// </summary>
        internal static string MiKo_2041_Title {
            get {
                return ResourceManager.GetString("MiKo_2041_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace &lt;br/&gt; with &lt;para/&gt;.
        /// </summary>
        internal static string MiKo_2042_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2042_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation should use the &apos;&lt;para/&gt;&apos; XML tags instead of &apos;&lt;br/&gt;&apos; or &apos;&lt;p/&gt;&apos; HTML tags..
        /// </summary>
        internal static string MiKo_2042_Description {
            get {
                return ResourceManager.GetString("MiKo_2042_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/para.
        /// </summary>
        internal static string MiKo_2042_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_2042_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;&lt;para/&gt;&apos; instead of &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_2042_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2042_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should use &apos;&lt;para/&gt;&apos; XML tags instead of &apos;&lt;br/&gt;&apos; HTML tags.
        /// </summary>
        internal static string MiKo_2042_Title {
            get {
                return ResourceManager.GetString("MiKo_2042_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;summary&gt; with &apos;Encapsulates a method that &apos;.
        /// </summary>
        internal static string MiKo_2043_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2043_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of a custom delegate should have a default starting phrase to indicate what the delegate encapsulates..
        /// </summary>
        internal static string MiKo_2043_Description {
            get {
                return ResourceManager.GetString("MiKo_2043_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;{1}&gt; with: &apos;{2}&apos;.
        /// </summary>
        internal static string MiKo_2043_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2043_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation of custom delegates should have a default starting phrase.
        /// </summary>
        internal static string MiKo_2043_Title {
            get {
                return ResourceManager.GetString("MiKo_2043_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &lt;paramref&gt; tag for parameter.
        /// </summary>
        internal static string MiKo_2044_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2044_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method parameters should be referenced via &lt;paramref name=&quot;...&quot;/&gt; inside the documentation..
        /// </summary>
        internal static string MiKo_2044_Description {
            get {
                return ResourceManager.GetString("MiKo_2044_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fix incorrect parameter reference &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_2044_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2044_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation references method parameters correctly.
        /// </summary>
        internal static string MiKo_2044_Title {
            get {
                return ResourceManager.GetString("MiKo_2044_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fix parameter reference.
        /// </summary>
        internal static string MiKo_2045_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2045_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &lt;summary&gt; documentation should not reference method parameters as its only purpose is to give a brief description..
        /// </summary>
        internal static string MiKo_2045_Description {
            get {
                return ResourceManager.GetString("MiKo_2045_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; should not contain parameter reference &apos; {0} &apos;.
        /// </summary>
        internal static string MiKo_2045_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2045_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation should not reference parameters.
        /// </summary>
        internal static string MiKo_2045_Title {
            get {
                return ResourceManager.GetString("MiKo_2045_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace invalid type parameter reference.
        /// </summary>
        internal static string MiKo_2046_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2046_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The XML documentation should reference type parameters properly via &apos;&lt;typeparamref name=&quot;...&quot; /&gt;&apos;..
        /// </summary>
        internal static string MiKo_2046_Description {
            get {
                return ResourceManager.GetString("MiKo_2046_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace invalid type parameter reference.
        /// </summary>
        internal static string MiKo_2046_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2046_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should reference type parameters correctly.
        /// </summary>
        internal static string MiKo_2046_Title {
            get {
                return ResourceManager.GetString("MiKo_2046_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of an Attribute should start with a specific phrase that describes its purpose..
        /// </summary>
        internal static string MiKo_2047_Description {
            get {
                return ResourceManager.GetString("MiKo_2047_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;summary&gt; with: {1}.
        /// </summary>
        internal static string MiKo_2047_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2047_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation of Attributes should have a default starting phrase.
        /// </summary>
        internal static string MiKo_2047_Title {
            get {
                return ResourceManager.GetString("MiKo_2047_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start comment with &apos;{0}&apos;.
        /// </summary>
        internal static string MiKo_2048_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2048_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of a value converters should start with a specific phrase that describes what they convert..
        /// </summary>
        internal static string MiKo_2048_Description {
            get {
                return ResourceManager.GetString("MiKo_2048_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;summary&gt; with: &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_2048_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2048_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation of value converters should have a default starting phrase.
        /// </summary>
        internal static string MiKo_2048_Title {
            get {
                return ResourceManager.GetString("MiKo_2048_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace &apos;will be&apos; with &apos;is&apos;.
        /// </summary>
        internal static string MiKo_2049_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2049_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The term &apos;will be&apos; is not explicit enough and it uses the wrong tense. Instead, a term such as &apos;is&apos; gets to the point and uses present tense..
        /// </summary>
        internal static string MiKo_2049_Description {
            get {
                return ResourceManager.GetString("MiKo_2049_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace &apos;{0}&apos; with &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_2049_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2049_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should be more explicit and not use &apos;will be&apos;.
        /// </summary>
        internal static string MiKo_2049_Title {
            get {
                return ResourceManager.GetString("MiKo_2049_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Apply standard exception comment.
        /// </summary>
        internal static string MiKo_2050_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2050_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of exceptions should follow the .NET Framework documentation..
        /// </summary>
        internal static string MiKo_2050_Description {
            get {
                return ResourceManager.GetString("MiKo_2050_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;{1}&gt; with: &apos;{2}&apos;.
        /// </summary>
        internal static string MiKo_2050_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2050_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exceptions should be documented following the .NET Framework.
        /// </summary>
        internal static string MiKo_2050_Title {
            get {
                return ResourceManager.GetString("MiKo_2050_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fix exception comment.
        /// </summary>
        internal static string MiKo_2051_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2051_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of a thrown exception should be a simple condition phrase, such as: &apos;The item is not available&apos;..
        /// </summary>
        internal static string MiKo_2051_Description {
            get {
                return ResourceManager.GetString("MiKo_2051_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use condition form to document thrown exception.
        /// </summary>
        internal static string MiKo_2051_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2051_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Thrown Exceptions should be documented as kind of a condition (such as &apos;&lt;paramref name=&quot;xyz&quot;/&gt; is &lt;c&gt;42&lt;/c&gt;&apos;).
        /// </summary>
        internal static string MiKo_2051_Title {
            get {
                return ResourceManager.GetString("MiKo_2051_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fix exception comment.
        /// </summary>
        internal static string MiKo_2052_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2052_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of an ArgumentNullException being thrown should be a specific phrase..
        /// </summary>
        internal static string MiKo_2052_Description {
            get {
                return ResourceManager.GetString("MiKo_2052_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {1} should be something like:
        ///
        ///{2}.
        /// </summary>
        internal static string MiKo_2052_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2052_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Throwing of ArgumentNullException should be documented using a default phrase.
        /// </summary>
        internal static string MiKo_2052_Title {
            get {
                return ResourceManager.GetString("MiKo_2052_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of an ArgumentNullException should not refer to a value type parameter as that can never be null..
        /// </summary>
        internal static string MiKo_2053_Description {
            get {
                return ResourceManager.GetString("MiKo_2053_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;{2}&apos; from &lt;exception cref=&quot;ArgumentNullException&quot;/&gt; as &apos;{1}&apos; is a value type.
        /// </summary>
        internal static string MiKo_2053_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2053_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Throwing of ArgumentNullException should be documented only for reference type parameters.
        /// </summary>
        internal static string MiKo_2053_Title {
            get {
                return ResourceManager.GetString("MiKo_2053_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fix exception comment.
        /// </summary>
        internal static string MiKo_2054_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2054_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of an ArgumentException being thrown should have a specific starting phrase..
        /// </summary>
        internal static string MiKo_2054_Description {
            get {
                return ResourceManager.GetString("MiKo_2054_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {1} should be something like:
        ///{2}.
        /// </summary>
        internal static string MiKo_2054_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2054_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Throwing of ArgumentException should be documented using a default starting phrase.
        /// </summary>
        internal static string MiKo_2054_Title {
            get {
                return ResourceManager.GetString("MiKo_2054_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fix exception comment.
        /// </summary>
        internal static string MiKo_2055_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2055_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of an ArgumentOutOfRangeException being thrown should have a specific starting phrase..
        /// </summary>
        internal static string MiKo_2055_Description {
            get {
                return ResourceManager.GetString("MiKo_2055_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {1} should be something like:
        ///{2}.
        /// </summary>
        internal static string MiKo_2055_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2055_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Throwing of ArgumentOutOfRangeException should be documented using a default starting phrase.
        /// </summary>
        internal static string MiKo_2055_Title {
            get {
                return ResourceManager.GetString("MiKo_2055_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Apply default ending comment to documentation of thrown &apos;ObjectDisposedException&apos;.
        /// </summary>
        internal static string MiKo_2056_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2056_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of an ObjectDisposedException being thrown should have a specific ending phrase..
        /// </summary>
        internal static string MiKo_2056_Description {
            get {
                return ResourceManager.GetString("MiKo_2056_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {1} should end with: &apos;{2}&apos;.
        /// </summary>
        internal static string MiKo_2056_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2056_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Throwing of ObjectDisposedException should be documented using a default ending phrase.
        /// </summary>
        internal static string MiKo_2056_Title {
            get {
                return ResourceManager.GetString("MiKo_2056_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove exception comment.
        /// </summary>
        internal static string MiKo_2057_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2057_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Types that do not inherit from &apos;IDisposable&apos; cannot be disposed. Hence they shall not throw an ObjectDisposedException..
        /// </summary>
        internal static string MiKo_2057_Description {
            get {
                return ResourceManager.GetString("MiKo_2057_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;{1}&apos; because type does not inherit from &apos;IDisposable&apos;.
        /// </summary>
        internal static string MiKo_2057_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2057_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Types that are not disposable shall not throw an ObjectDisposedException.
        /// </summary>
        internal static string MiKo_2057_Title {
            get {
                return ResourceManager.GetString("MiKo_2057_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Consolidate exception documentation.
        /// </summary>
        internal static string MiKo_2059_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2059_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease reading, thrown exceptions should be documented only once and not multiple times. So the documentation of those exceptions should be consolidated..
        /// </summary>
        internal static string MiKo_2059_Description {
            get {
                return ResourceManager.GetString("MiKo_2059_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Consolidate the documentation of &lt;exception cref=&apos;{1}&apos;&gt;.
        /// </summary>
        internal static string MiKo_2059_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2059_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple documentation of same exception should be consolidated into one.
        /// </summary>
        internal static string MiKo_2059_Title {
            get {
                return ResourceManager.GetString("MiKo_2059_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Apply standard comment to factory.
        /// </summary>
        internal static string MiKo_2060_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2060_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of factories should be uniform and consistent..
        /// </summary>
        internal static string MiKo_2060_Description {
            get {
                return ResourceManager.GetString("MiKo_2060_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;summary&gt; with: &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_2060_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2060_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Factories should be documented in an uniform way.
        /// </summary>
        internal static string MiKo_2060_Title {
            get {
                return ResourceManager.GetString("MiKo_2060_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace &apos;Return&apos; in comment.
        /// </summary>
        internal static string MiKo_2070_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2070_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If a method comment starts with &apos;Returns&apos;, then it focuses on the return value but not on the purpose (responsibility) of the method.
        ///Instead, the documentation should describe what the method is intended to do..
        /// </summary>
        internal static string MiKo_2070_Description {
            get {
                return ResourceManager.GetString("MiKo_2070_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;summary&gt; with: &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_2070_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2070_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation should not start with &apos;Returns&apos;.
        /// </summary>
        internal static string MiKo_2070_Title {
            get {
                return ResourceManager.GetString("MiKo_2070_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enum types are no boolean values. Hence the documentation should not contain any phrase that would handle enums as if they were booleans (such as it would be the case in phrase &apos;indicates whether&apos;)..
        /// </summary>
        internal static string MiKo_2071_Description {
            get {
                return ResourceManager.GetString("MiKo_2071_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &apos;{0}&apos; in &lt;summary&gt;.
        /// </summary>
        internal static string MiKo_2071_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2071_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation for methods that return Enum types should not contain phrase for boolean type.
        /// </summary>
        internal static string MiKo_2071_Title {
            get {
                return ResourceManager.GetString("MiKo_2071_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;summary&gt; with &apos;Attempts to&apos;.
        /// </summary>
        internal static string MiKo_2072_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2072_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;Try&apos; methods attempt to achieve something. So their &lt;summary&gt; documentation should start with the phrase &apos;Attempts to &apos;..
        /// </summary>
        internal static string MiKo_2072_Description {
            get {
                return ResourceManager.GetString("MiKo_2072_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;summary&gt; with &apos;Attempts to &apos;.
        /// </summary>
        internal static string MiKo_2072_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2072_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation should not start with &apos;Try&apos;.
        /// </summary>
        internal static string MiKo_2072_Title {
            get {
                return ResourceManager.GetString("MiKo_2072_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;summary&gt; with &apos;Determines whether&apos;.
        /// </summary>
        internal static string MiKo_2073_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2073_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;Contain&apos; methods attempt to determine if something exists inside something else. So their &lt;summary&gt; documentation should start with the phrase &apos;Determines whether &apos;..
        /// </summary>
        internal static string MiKo_2073_Description {
            get {
                return ResourceManager.GetString("MiKo_2073_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;summary&gt; with &apos;Determines whether&apos;.
        /// </summary>
        internal static string MiKo_2073_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2073_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation of &apos;Contains&apos; methods should start with &apos;Determines whether &apos;.
        /// </summary>
        internal static string MiKo_2073_Title {
            get {
                return ResourceManager.GetString("MiKo_2073_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fix comment of parameter.
        /// </summary>
        internal static string MiKo_2074_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2074_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;Contain&apos; methods attempt to determine if the value of a given parameter exists inside something. So the &lt;param&gt; documentation of the given parameter should end with the phrase &apos; to seek.&apos;..
        /// </summary>
        internal static string MiKo_2074_Description {
            get {
                return ResourceManager.GetString("MiKo_2074_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;param name=&quot;{0}&quot;&gt; should end with: &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_2074_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2074_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation of parameter of &apos;Contains&apos; method should have a default ending phrase.
        /// </summary>
        internal static string MiKo_2074_Title {
            get {
                return ResourceManager.GetString("MiKo_2074_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change to &apos;{0}&apos;.
        /// </summary>
        internal static string MiKo_2075_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2075_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML documentation is intended for other developers. If you mention &apos;Action&apos; or &apos;Function&apos; delegates in your documentation, the developers already have the type information available. So those delegates should not be mentioned as &apos;action&apos;, &apos;func&apos; or &apos;function&apos;.
        ///
        ///Instead, they should be mentioned as &apos;callback&apos; because - as delegates represent references to methods with a particular parameter list and return type - they actually act as callbacks to those methods when used within code..
        /// </summary>
        internal static string MiKo_2075_Description {
            get {
                return ResourceManager.GetString("MiKo_2075_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace &apos;{0}&apos; with &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_2075_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2075_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should use the term &apos;callback&apos; instead of &apos;action&apos;, &apos;func&apos; or &apos;function&apos;.
        /// </summary>
        internal static string MiKo_2075_Title {
            get {
                return ResourceManager.GetString("MiKo_2075_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Document default value.
        /// </summary>
        internal static string MiKo_2076_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2076_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In case a parameter is an optional one it is important to document its default value. This is because the values of those optional parameters are &quot;baked into&quot; the calling code..
        /// </summary>
        internal static string MiKo_2076_Description {
            get {
                return ResourceManager.GetString("MiKo_2076_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Document the default value via &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_2076_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2076_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should document default values of optional parameters.
        /// </summary>
        internal static string MiKo_2076_Title {
            get {
                return ResourceManager.GetString("MiKo_2076_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The summary documentation should be short. Code snippets most often act as examples, so they should be places in &lt;example&gt; instead of &lt;summary&gt;..
        /// </summary>
        internal static string MiKo_2077_Description {
            get {
                return ResourceManager.GetString("MiKo_2077_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; should not contain &lt;code&gt;.
        /// </summary>
        internal static string MiKo_2077_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2077_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation should not contain &lt;code&gt;.
        /// </summary>
        internal static string MiKo_2077_Title {
            get {
                return ResourceManager.GetString("MiKo_2077_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Code snippets most often act as examples, so they normally contain source code. However, in case they contain plain XML, then they will not be converted into documentation so that the resulting online help (or IntelliSense) information will not show them at all..
        /// </summary>
        internal static string MiKo_2078_Description {
            get {
                return ResourceManager.GetString("MiKo_2078_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;code&gt; should not contain XML.
        /// </summary>
        internal static string MiKo_2078_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2078_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;code&gt; documentation should not contain XML tags.
        /// </summary>
        internal static string MiKo_2078_Title {
            get {
                return ResourceManager.GetString("MiKo_2078_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start field with default phrase.
        /// </summary>
        internal static string MiKo_2080_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2080_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of fields should start with a default phrase..
        /// </summary>
        internal static string MiKo_2080_Description {
            get {
                return ResourceManager.GetString("MiKo_2080_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;summary&gt; with: &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_2080_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2080_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation of fields should have a default starting phrase.
        /// </summary>
        internal static string MiKo_2080_Title {
            get {
                return ResourceManager.GetString("MiKo_2080_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Append read-only text.
        /// </summary>
        internal static string MiKo_2081_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2081_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of a public-visible read-only field should indicate that it is read-only..
        /// </summary>
        internal static string MiKo_2081_Description {
            get {
                return ResourceManager.GetString("MiKo_2081_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End &lt;summary&gt; with: &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_2081_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2081_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation of public-visible read-only fields should have a default ending phrase.
        /// </summary>
        internal static string MiKo_2081_Title {
            get {
                return ResourceManager.GetString("MiKo_2081_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fix enum member starting phrase.
        /// </summary>
        internal static string MiKo_2082_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2082_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The summary of an Enum member should not use any phrase that belongs to the summary of the Enum itself.
        ///Such phrases are for example &apos;Defines&apos;, &apos;Indicates&apos; or &apos;Specifies&apos;. Instead, the Enum member summary should describe the meaning of the member itself..
        /// </summary>
        internal static string MiKo_2082_Description {
            get {
                return ResourceManager.GetString("MiKo_2082_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not start &lt;summary&gt; with: &apos;{0}&apos;.
        /// </summary>
        internal static string MiKo_2082_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2082_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation of Enum members should not start with default starting phrases of Enum &lt;summary&gt; documentation.
        /// </summary>
        internal static string MiKo_2082_Title {
            get {
                return ResourceManager.GetString("MiKo_2082_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Apply standard comment.
        /// </summary>
        internal static string MiKo_2090_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2090_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease development and usage, the XML documentation for equality operators shall have a common default phrase..
        /// </summary>
        internal static string MiKo_2090_Description {
            get {
                return ResourceManager.GetString("MiKo_2090_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;{1}&gt; should be: &apos;{2}&apos;.
        /// </summary>
        internal static string MiKo_2090_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2090_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation for equality operator shall have default phrase.
        /// </summary>
        internal static string MiKo_2090_Title {
            get {
                return ResourceManager.GetString("MiKo_2090_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Apply standard comment.
        /// </summary>
        internal static string MiKo_2091_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2091_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease development and usage, the XML documentation for inequality operators shall have a common default phrase..
        /// </summary>
        internal static string MiKo_2091_Description {
            get {
                return ResourceManager.GetString("MiKo_2091_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;{1}&gt; should be: &apos;{2}&apos;.
        /// </summary>
        internal static string MiKo_2091_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2091_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation for inequality operator shall have default phrase.
        /// </summary>
        internal static string MiKo_2091_Title {
            get {
                return ResourceManager.GetString("MiKo_2091_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start comment with &apos;{0}&apos;.
        /// </summary>
        internal static string MiKo_2100_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2100_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease usage, the example documentation should start with a phrase that shortly describes what the given example demonstrates..
        /// </summary>
        internal static string MiKo_2100_Description {
            get {
                return ResourceManager.GetString("MiKo_2100_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;example&gt; with: &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_2100_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2100_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;example&gt; documentation should start with descriptive default phrase.
        /// </summary>
        internal static string MiKo_2100_Title {
            get {
                return ResourceManager.GetString("MiKo_2100_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround sample code with &apos;&lt;code&gt;&apos;.
        /// </summary>
        internal static string MiKo_2101_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2101_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease reading, example documentation should place code samples inside &lt;code&gt; tags so that IntelliSense or any XML documentation tool can format them in a special way..
        /// </summary>
        internal static string MiKo_2101_Description {
            get {
                return ResourceManager.GetString("MiKo_2101_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place sample code in &lt;example&gt; inside &apos;&lt;code&gt;&apos; tags.
        /// </summary>
        internal static string MiKo_2101_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2101_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;example&gt; documentation should show code example in &lt;code&gt; tags.
        /// </summary>
        internal static string MiKo_2101_Title {
            get {
                return ResourceManager.GetString("MiKo_2101_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use capitalized letter.
        /// </summary>
        internal static string MiKo_2200_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2200_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should start with a capitalized letter to have a full sentence..
        /// </summary>
        internal static string MiKo_2200_Description {
            get {
                return ResourceManager.GetString("MiKo_2200_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;{1}&gt; with capitalized letter.
        /// </summary>
        internal static string MiKo_2200_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2200_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use a capitalized letter to start the comment.
        /// </summary>
        internal static string MiKo_2200_Title {
            get {
                return ResourceManager.GetString("MiKo_2200_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation sentences should start with a capitalized letter to have a full sentence..
        /// </summary>
        internal static string MiKo_2201_Description {
            get {
                return ResourceManager.GetString("MiKo_2201_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start the sentence(s) in &lt;{1}&gt; with capitalized letter.
        /// </summary>
        internal static string MiKo_2201_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2201_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use a capitalized letter to start the sentences in the comment.
        /// </summary>
        internal static string MiKo_2201_Title {
            get {
                return ResourceManager.GetString("MiKo_2201_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change &apos;id&apos; into &apos;identifier&apos;.
        /// </summary>
        internal static string MiKo_2202_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2202_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The XML documentation should not use the abbreviation &apos;id&apos;. Instead, it should clearly document that this is an identifier. Hence, it should use the term &apos;identifier&apos; instead..
        /// </summary>
        internal static string MiKo_2202_Description {
            get {
                return ResourceManager.GetString("MiKo_2202_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;identifier&apos; instead of &apos;id&apos;.
        /// </summary>
        internal static string MiKo_2202_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2202_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should use the term &apos;identifier&apos; instead of &apos;id&apos;.
        /// </summary>
        internal static string MiKo_2202_Title {
            get {
                return ResourceManager.GetString("MiKo_2202_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change &apos;GUID&apos; into &apos;unique identifier&apos;.
        /// </summary>
        internal static string MiKo_2203_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2203_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The XML documentation should not use the abbreviation &apos;guid&apos;. Instead, it should clearly document that this is an unique identifier. Hence, it should use the term &apos;unique identifier&apos; instead..
        /// </summary>
        internal static string MiKo_2203_Description {
            get {
                return ResourceManager.GetString("MiKo_2203_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;unique identifier&apos; instead of &apos;guid&apos;.
        /// </summary>
        internal static string MiKo_2203_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2203_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should use the term &apos;unique identifier&apos; instead of &apos;guid&apos;.
        /// </summary>
        internal static string MiKo_2203_Title {
            get {
                return ResourceManager.GetString("MiKo_2203_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &lt;list&gt; to list items.
        /// </summary>
        internal static string MiKo_2204_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2204_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The XML documentation should use the &lt;list&gt; tag if items get enumerated. It should not use terms such as 1.), 2.) etc. directly.
        ///This is because IntelliSense or any XML documentation tool are not aware of such terms and therefore the comment will become strangely formatted and hard to read..
        /// </summary>
        internal static string MiKo_2204_Description {
            get {
                return ResourceManager.GetString("MiKo_2204_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/list.
        /// </summary>
        internal static string MiKo_2204_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_2204_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &lt;list&gt; to list items in documentation.
        /// </summary>
        internal static string MiKo_2204_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2204_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should use &lt;list&gt; for enumerations.
        /// </summary>
        internal static string MiKo_2204_Title {
            get {
                return ResourceManager.GetString("MiKo_2204_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The XML documentation should use the &lt;note&gt; tag to mark important information. It should not use terms such as &apos;Important&apos; or &apos;Attention&apos; directly.
        ///This is because XML documentation tools are aware of &lt;note&gt; and can format the information in a special way..
        /// </summary>
        internal static string MiKo_2205_Description {
            get {
                return ResourceManager.GetString("MiKo_2205_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &lt;note&gt; for important information in documentation.
        /// </summary>
        internal static string MiKo_2205_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2205_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should use &lt;note&gt; for important information.
        /// </summary>
        internal static string MiKo_2205_Title {
            get {
                return ResourceManager.GetString("MiKo_2205_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation should not use the term &apos;flag&apos; which is often used to describe a boolean value. Instead, the documentation should be re-phrased so that the term is no longer necessary..
        /// </summary>
        internal static string MiKo_2206_Description {
            get {
                return ResourceManager.GetString("MiKo_2206_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;{0}&apos; from documentation.
        /// </summary>
        internal static string MiKo_2206_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2206_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should not use the term &apos;flag&apos;.
        /// </summary>
        internal static string MiKo_2206_Title {
            get {
                return ResourceManager.GetString("MiKo_2206_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &lt;summary&gt; documentation shall be descriptive and short as its intent is to give a short overview about a functionality.
        ///More detailed information should be placed inside a &lt;remarks&gt; section..
        /// </summary>
        internal static string MiKo_2207_Description {
            get {
                return ResourceManager.GetString("MiKo_2207_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; is too long, use &lt;remarks&gt; section for all the details.
        /// </summary>
        internal static string MiKo_2207_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2207_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation shall be short.
        /// </summary>
        internal static string MiKo_2207_Title {
            get {
                return ResourceManager.GetString("MiKo_2207_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;an instance of&apos;.
        /// </summary>
        internal static string MiKo_2208_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2208_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation should use a more meaningful description than the phrase &apos;an instance of&apos;.
        ///By having a more concrete description it makes it easier for a developer to understand the meaning..
        /// </summary>
        internal static string MiKo_2208_Description {
            get {
                return ResourceManager.GetString("MiKo_2208_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use a better description than &apos;{0}&apos;.
        /// </summary>
        internal static string MiKo_2208_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2208_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should not use the term &apos;an instance of&apos;.
        /// </summary>
        internal static string MiKo_2208_Title {
            get {
                return ResourceManager.GetString("MiKo_2208_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;..&apos; from documentation.
        /// </summary>
        internal static string MiKo_2209_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2209_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML documentation is intended for other developers. It shall contain all the information that is important for them in a way that they can easily read and understand. Typos or other kinds of strange comments however are harder to understand. Thus, such things need to be avoided to not confuse the developers..
        /// </summary>
        internal static string MiKo_2209_Description {
            get {
                return ResourceManager.GetString("MiKo_2209_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;..&apos; from documentation.
        /// </summary>
        internal static string MiKo_2209_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2209_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use double periods in documentation.
        /// </summary>
        internal static string MiKo_2209_Title {
            get {
                return ResourceManager.GetString("MiKo_2209_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change &apos;info&apos; into &apos;information&apos;.
        /// </summary>
        internal static string MiKo_2210_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2210_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The XML documentation should not use the abbreviation &apos;info&apos;. Instead, it should clearly document that this is an information. Hence, it should use the term &apos;information&apos; instead..
        /// </summary>
        internal static string MiKo_2210_Description {
            get {
                return ResourceManager.GetString("MiKo_2210_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;information&apos; instead of &apos;info&apos;.
        /// </summary>
        internal static string MiKo_2210_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2210_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should use the term &apos;information&apos; instead of &apos;info&apos;.
        /// </summary>
        internal static string MiKo_2210_Title {
            get {
                return ResourceManager.GetString("MiKo_2210_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Move remarks comment into summary.
        /// </summary>
        internal static string MiKo_2211_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2211_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unfortunately, tools such as Sandcastle cannot handle &lt;remarks&gt; sections on enum members. The resulting output (CHM, HTML, ...) does not contain any Remarks section.
        ///
        ///As developers may use the HTML/CHM version only when working with 3rd party frameworks, the information of the &lt;remarks&gt; section is typically not available to them.
        ///
        ///Hence, to provide them with all the information they need, the information should be placed inside the &lt;summary&gt; section..
        /// </summary>
        internal static string MiKo_2211_Description {
            get {
                return ResourceManager.GetString("MiKo_2211_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &lt;summary&gt; instead of &lt;remarks&gt;.
        /// </summary>
        internal static string MiKo_2211_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2211_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enum members should not have &lt;remarks&gt; sections.
        /// </summary>
        internal static string MiKo_2211_Title {
            get {
                return ResourceManager.GetString("MiKo_2211_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change &apos;was not successful&apos; to &apos;failed&apos;.
        /// </summary>
        internal static string MiKo_2212_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2212_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To shorten documentation - and still be to the point - the documentation should use the phrase &apos;failed&apos; instead of &apos;was not succesful&apos;..
        /// </summary>
        internal static string MiKo_2212_Description {
            get {
                return ResourceManager.GetString("MiKo_2212_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;failed&apos; instead of &apos;was not successful&apos;.
        /// </summary>
        internal static string MiKo_2212_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2212_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should use the phrase &apos;failed&apos; instead of &apos;was not successful&apos;.
        /// </summary>
        internal static string MiKo_2212_Title {
            get {
                return ResourceManager.GetString("MiKo_2212_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change &quot;n&apos;t&quot; to &quot; not&quot;.
        /// </summary>
        internal static string MiKo_2213_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2213_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It may happen to read over and not recognize a contradiction. This then leads to unintentional errors.
        ///It would therefore be better to clearly highlight the contradiction..
        /// </summary>
        internal static string MiKo_2213_Description {
            get {
                return ResourceManager.GetString("MiKo_2213_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use contradiction &quot;n&apos;t&quot;.
        /// </summary>
        internal static string MiKo_2213_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2213_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should not use the contradiction &quot;n&apos;t&quot;.
        /// </summary>
        internal static string MiKo_2213_Title {
            get {
                return ResourceManager.GetString("MiKo_2213_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace empty line with &lt;para/&gt;.
        /// </summary>
        internal static string MiKo_2214_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2214_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation should not contain empty lines. Developers tend to use them when they write paragraphs.
        ///However, in the generated documentation (eg. for IntelliSense) those empty lines are simply ignored, get removed and the text becomes quite dense.
        ///In contrast, using the &lt;para&gt; tags avoids that situation as the &lt;para&gt; tag is intended to be used to mark paragraphs..
        /// </summary>
        internal static string MiKo_2214_Description {
            get {
                return ResourceManager.GetString("MiKo_2214_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace empty line with &lt;para/&gt;.
        /// </summary>
        internal static string MiKo_2214_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2214_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should not contain empty lines.
        /// </summary>
        internal static string MiKo_2214_Title {
            get {
                return ResourceManager.GetString("MiKo_2214_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sentences containing up to 15 words are most effective in terms of content and descriptiveness. Longer sentences are hard to read any may boring out readers..
        /// </summary>
        internal static string MiKo_2215_Description {
            get {
                return ResourceManager.GetString("MiKo_2215_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Shorten sentences to contain up to 15 words each.
        /// </summary>
        internal static string MiKo_2215_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2215_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sentences in documentation shall be short.
        /// </summary>
        internal static string MiKo_2215_Title {
            get {
                return ResourceManager.GetString("MiKo_2215_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change &lt;param&gt; to &lt;paramref&gt;.
        /// </summary>
        internal static string MiKo_2216_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2216_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &lt;param&gt; tag is used to describe parameters while the &lt;paramref&gt; tag gives you a way to indicate that a word in the code comments refers to a parameter.
        ///So if you want to reference a parameter inside e.g. the &lt;summary&gt; or &lt;remarks&gt; section, you should use the &lt;paramref&gt; tag..
        /// </summary>
        internal static string MiKo_2216_Description {
            get {
                return ResourceManager.GetString("MiKo_2216_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &lt;paramref&gt; instead of &lt;param&gt;.
        /// </summary>
        internal static string MiKo_2216_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2216_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &lt;paramref&gt; instead of &lt;param&gt; to reference parameters.
        /// </summary>
        internal static string MiKo_2216_Title {
            get {
                return ResourceManager.GetString("MiKo_2216_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fix &apos;&lt;list&gt;&apos;.
        /// </summary>
        internal static string MiKo_2217_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2217_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of a &lt;list&gt; is a little bit ambiguous.
        ///There are 3 types of lists: &apos;number&apos;, &apos;bullet&apos; and &apos;table&apos;. Only the &apos;table&apos; can have a single &lt;listheader&gt; and multiple &lt;item&gt; entries, the others have only &lt;item&gt; entries.
        ///
        ///For a &apos;table&apos;, each &lt;listheader&gt; and &lt;item&gt;s can contain either a single but optional &lt;term&gt; and a single required &lt;description&gt;, or multiple &lt;term&gt; entries.
        ///For a &apos;bullet&apos; or &apos;number&apos; list, each &lt;item&gt; can contain a single but optional &lt;term&gt; and a single required &lt;descripti [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MiKo_2217_Description {
            get {
                return ResourceManager.GetString("MiKo_2217_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to http://www.blackwasp.co.uk/DocumentationLists.aspx.
        /// </summary>
        internal static string MiKo_2217_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_2217_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;description&gt; is missing.
        /// </summary>
        internal static string MiKo_2217_MessageArgument_MissingDescription {
            get {
                return ResourceManager.GetString("MiKo_2217_MessageArgument_MissingDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;description&gt; or &lt;term&gt; is missing.
        /// </summary>
        internal static string MiKo_2217_MessageArgument_MissingTermOrDescription {
            get {
                return ResourceManager.GetString("MiKo_2217_MessageArgument_MissingTermOrDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;listheader&gt; is not allowed for this type of &lt;list&gt;.
        /// </summary>
        internal static string MiKo_2217_MessageArgument_NoHeaderAllowed {
            get {
                return ResourceManager.GetString("MiKo_2217_MessageArgument_NoHeaderAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;description&gt; is not allowed to occur multiple times for this type of &lt;list&gt;.
        /// </summary>
        internal static string MiKo_2217_MessageArgument_OnlySingleDescriptionAllowed {
            get {
                return ResourceManager.GetString("MiKo_2217_MessageArgument_OnlySingleDescriptionAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;term&gt; is not allowed to occur multiple times for this type of &lt;list&gt;.
        /// </summary>
        internal static string MiKo_2217_MessageArgument_OnlySingleTermAllowed {
            get {
                return ResourceManager.GetString("MiKo_2217_MessageArgument_OnlySingleTermAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;type&apos; attribute contains the unknown type {0}.
        /// </summary>
        internal static string MiKo_2217_MessageArgument_UnknownTypeSpecified {
            get {
                return ResourceManager.GetString("MiKo_2217_MessageArgument_UnknownTypeSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &lt;list&gt; properly: {1}.
        /// </summary>
        internal static string MiKo_2217_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2217_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;list&gt; documentation is done properly.
        /// </summary>
        internal static string MiKo_2217_Title {
            get {
                return ResourceManager.GetString("MiKo_2217_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Shorten term.
        /// </summary>
        internal static string MiKo_2218_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2218_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Terms such as &apos;that is used to&apos; or &apos;which shall be used to&apos; are simply bloated and should be shortened to the equivalent term &apos;to&apos;..
        /// </summary>
        internal static string MiKo_2218_Description {
            get {
                return ResourceManager.GetString("MiKo_2218_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace &apos;{0}&apos; with &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_2218_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2218_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should use shorter terms instead of longer term &apos;used to/in/by&apos;.
        /// </summary>
        internal static string MiKo_2218_Title {
            get {
                return ResourceManager.GetString("MiKo_2218_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML documentation is intended for other developers. It shall contain all the information that is important for them in a way that they can easily read and understand.
        ///- Ending a text with an exclamation mark is more difficult to spot than e.g. placing the text inside a &lt;note type=&quot;important&quot;&gt; tag.
        ///   So ending texts with exclamation marks should be avoided.
        ///- Ending a text with a question mark shows that the whole sentence is a question.
        ///   However, documention should state and not question things - so  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MiKo_2219_Description {
            get {
                return ResourceManager.GetString("MiKo_2219_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &apos;{0}&apos; in documentation.
        /// </summary>
        internal static string MiKo_2219_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2219_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use question or explamation marks in documentation.
        /// </summary>
        internal static string MiKo_2219_Title {
            get {
                return ResourceManager.GetString("MiKo_2219_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace with &apos;to seek&apos;.
        /// </summary>
        internal static string MiKo_2220_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2220_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Terms such as &apos;to look for&apos;, &apos;to inspect for&apos; or &apos;to test for&apos; all mean the same - to seek for something. Hence, they should be changed to the equivalent term &apos;to seek&apos;..
        /// </summary>
        internal static string MiKo_2220_Description {
            get {
                return ResourceManager.GetString("MiKo_2220_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;to seek&apos; instead.
        /// </summary>
        internal static string MiKo_2220_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2220_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should use &apos;to seek&apos; instead of &apos;to look for&apos;, &apos;to inspect for&apos; or &apos;to test for&apos;.
        /// </summary>
        internal static string MiKo_2220_Title {
            get {
                return ResourceManager.GetString("MiKo_2220_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An empty documentation is a code smell. The developer created the empty XML documentation tag by intent but did not provide any documentation at all..
        /// </summary>
        internal static string MiKo_2221_Description {
            get {
                return ResourceManager.GetString("MiKo_2221_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide a documentation for &lt;{1}/&gt;.
        /// </summary>
        internal static string MiKo_2221_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2221_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should not use empty XML tags.
        /// </summary>
        internal static string MiKo_2221_Title {
            get {
                return ResourceManager.GetString("MiKo_2221_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change &apos;ident&apos; into identification&apos;.
        /// </summary>
        internal static string MiKo_2222_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2222_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The XML documentation should not use the abbreviation &apos;ident&apos;. Instead, it should clearly document that this is an identification. Hence, it should use the term &apos;identification&apos; instead..
        /// </summary>
        internal static string MiKo_2222_Description {
            get {
                return ResourceManager.GetString("MiKo_2222_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;identification&apos; instead of &apos;ident&apos;.
        /// </summary>
        internal static string MiKo_2222_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2222_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should use the term &apos;identification&apos; instead of &apos;ident&apos;.
        /// </summary>
        internal static string MiKo_2222_Title {
            get {
                return ResourceManager.GetString("MiKo_2222_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The XML documentation should link references (such as methods or types) via &lt;see cref=&quot;...&quot;/&gt; instead of just having them as plain text. Doing so allows refactoring tools to adjust also those references during renames, thus preventing the documentation from mentioning no-longer-existing code..
        /// </summary>
        internal static string MiKo_2223_Description {
            get {
                return ResourceManager.GetString("MiKo_2223_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;&lt;see cref=&quot;{0}&quot;/&gt;&apos; instead.
        /// </summary>
        internal static string MiKo_2223_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2223_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation links references via &lt;see cref=&quot;...&quot;/&gt;.
        /// </summary>
        internal static string MiKo_2223_Title {
            get {
                return ResourceManager.GetString("MiKo_2223_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place on separate line.
        /// </summary>
        internal static string MiKo_2224_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2224_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease usage, XML documentation should have its XML tags and texts placed on separate lines..
        /// </summary>
        internal static string MiKo_2224_Description {
            get {
                return ResourceManager.GetString("MiKo_2224_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place &apos;{0}&apos; on separate line.
        /// </summary>
        internal static string MiKo_2224_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2224_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should have XML tags and texts placed on separate lines.
        /// </summary>
        internal static string MiKo_2224_Title {
            get {
                return ResourceManager.GetString("MiKo_2224_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place on same line.
        /// </summary>
        internal static string MiKo_2225_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2225_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &lt;c&gt; tag allows developers to indicate that text within a description should be marked as code. However, the text should be a single line. To indicate multiple lines as code, the &lt;code&gt; tag has to be used..
        /// </summary>
        internal static string MiKo_2225_Description {
            get {
                return ResourceManager.GetString("MiKo_2225_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/xmldoc/recommended-tags#c.
        /// </summary>
        internal static string MiKo_2225_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_2225_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place &apos;&lt;c&gt;&apos; tag with its content on same line.
        /// </summary>
        internal static string MiKo_2225_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2225_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Code marked with &lt;c&gt; tags should be placed on single line.
        /// </summary>
        internal static string MiKo_2225_Title {
            get {
                return ResourceManager.GetString("MiKo_2225_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Instead of stating *that* the intention exists, documentation should better explain *what* the intention behind actually is.
        ///So developers have more background information at hand, allowing them to make better decisions based on that information..
        /// </summary>
        internal static string MiKo_2226_Description {
            get {
                return ResourceManager.GetString("MiKo_2226_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Explain what the intention behind actually is.
        /// </summary>
        internal static string MiKo_2226_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2226_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should explain the &apos;Why&apos; and not the &apos;That&apos;.
        /// </summary>
        internal static string MiKo_2226_Title {
            get {
                return ResourceManager.GetString("MiKo_2226_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ReSharper allows to suppress some rules by applying an inline comment &apos;// ReSharper disable&apos; or &apos;// ReSharper disable once&apos;.
        ///When defined, ReSharper disables the specific rule once or until the document end is reached or the rule is re-enabled. However, those suppressions should be defined as inline comments and should not be accidentally part of any&quot;official&quot; documentation..
        /// </summary>
        internal static string MiKo_2227_Description {
            get {
                return ResourceManager.GetString("MiKo_2227_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove from documentation and use inline comment instead.
        /// </summary>
        internal static string MiKo_2227_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2227_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should not contain ReSharper suppressions.
        /// </summary>
        internal static string MiKo_2227_Title {
            get {
                return ResourceManager.GetString("MiKo_2227_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Negative wording is difficult to understand, especially when being combined (eg. &quot;You cannot do this if it is not empty&quot;).
        ///Positive wording is much easier to understand as it is straight forward and comes to the point..
        /// </summary>
        internal static string MiKo_2228_Description {
            get {
                return ResourceManager.GetString("MiKo_2228_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use positive wording instead of negative.
        /// </summary>
        internal static string MiKo_2228_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2228_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should use positive wording instead of negative.
        /// </summary>
        internal static string MiKo_2228_Title {
            get {
                return ResourceManager.GetString("MiKo_2228_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Delete XML fragment.
        /// </summary>
        internal static string MiKo_2229_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2229_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML fragments in XML documentation are a left over and were not recognized by the developer. However, they may end up in documentation that is available to everybody and therefore should be avoided..
        /// </summary>
        internal static string MiKo_2229_Description {
            get {
                return ResourceManager.GetString("MiKo_2229_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Delete XML fragment &apos;{0}&apos;.
        /// </summary>
        internal static string MiKo_2229_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2229_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should not contain left-over XML fragments.
        /// </summary>
        internal static string MiKo_2229_Title {
            get {
                return ResourceManager.GetString("MiKo_2229_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Comments should explain the deeper reasons behind the code to understand why the code is written in that way.
        ///They should not describe how it is achieved because that&apos;s what the code is for..
        /// </summary>
        internal static string MiKo_2300_Description {
            get {
                return ResourceManager.GetString("MiKo_2300_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove comment or describe why exactly the code is the way it is.
        /// </summary>
        internal static string MiKo_2300_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2300_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Comments should explain the &apos;Why&apos; and not the &apos;How&apos;.
        /// </summary>
        internal static string MiKo_2300_Title {
            get {
                return ResourceManager.GetString("MiKo_2300_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove obvious AAA comment.
        /// </summary>
        internal static string MiKo_2301_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2301_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inside tests that follow the Arrange/Act/Assert style, the comments &apos;// arrange&apos;, &apos;// act&apos; and &apos;// assert&apos; are obvious and provide no benefit. Therefore, they can be removed..
        /// </summary>
        internal static string MiKo_2301_Description {
            get {
                return ResourceManager.GetString("MiKo_2301_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove obvious AAA comment.
        /// </summary>
        internal static string MiKo_2301_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2301_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use obvious comments in AAA-Tests.
        /// </summary>
        internal static string MiKo_2301_Title {
            get {
                return ResourceManager.GetString("MiKo_2301_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The longer code is kept that is commented out, the much likelier the code cannot compile anymore.
        ///As code should be commited in to Source Control Systems, developers can use the SCS&apos;s history and go back to an older version that still contains the code. So there is no need to keep the code commented out..
        /// </summary>
        internal static string MiKo_2302_Description {
            get {
                return ResourceManager.GetString("MiKo_2302_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove commented out code.
        /// </summary>
        internal static string MiKo_2302_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2302_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not keep code that is commented out.
        /// </summary>
        internal static string MiKo_2302_Title {
            get {
                return ResourceManager.GetString("MiKo_2302_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove ending period from comment.
        /// </summary>
        internal static string MiKo_2303_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2303_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In contrast to API documentation inline comments are intended to team members. They should contain the important information in a short way, so they should not be complete sentences.
        ///
        ///This rule contradicts rule MiKo_2306..
        /// </summary>
        internal static string MiKo_2303_Description {
            get {
                return ResourceManager.GetString("MiKo_2303_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not end comment with period.
        /// </summary>
        internal static string MiKo_2303_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2303_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not end comments with a period.
        /// </summary>
        internal static string MiKo_2303_Title {
            get {
                return ResourceManager.GetString("MiKo_2303_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Comments should explain the code and the reasons behind, they should not question things.
        ///If it question things, then the reasons behind are still unclear. This makes it (in the long run) hard to maintain because such questions don&apos;t get answered (otherwise, the comment would have been gone meanwhile)..
        /// </summary>
        internal static string MiKo_2304_Description {
            get {
                return ResourceManager.GetString("MiKo_2304_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Comment should explain, not ask.
        /// </summary>
        internal static string MiKo_2304_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2304_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not formulate comments as questions.
        /// </summary>
        internal static string MiKo_2304_Title {
            get {
                return ResourceManager.GetString("MiKo_2304_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;..&apos; from comment.
        /// </summary>
        internal static string MiKo_2305_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2305_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In contrast to API documentation inline comments are intended for team members. They should contain the important information in a short way, so they should not be complete sentences..
        /// </summary>
        internal static string MiKo_2305_Description {
            get {
                return ResourceManager.GetString("MiKo_2305_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;..&apos; from comment.
        /// </summary>
        internal static string MiKo_2305_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2305_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use double periods in comments.
        /// </summary>
        internal static string MiKo_2305_Title {
            get {
                return ResourceManager.GetString("MiKo_2305_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In contrast to API documentation inline comments are intended to team members. They should contain the important information in a short way, so they should be complete sentences.
        ///
        ///This rule contradicts rule MiKo_2303..
        /// </summary>
        internal static string MiKo_2306_Description {
            get {
                return ResourceManager.GetString("MiKo_2306_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End comment with period.
        /// </summary>
        internal static string MiKo_2306_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2306_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End comments with a period.
        /// </summary>
        internal static string MiKo_2306_Title {
            get {
                return ResourceManager.GetString("MiKo_2306_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace with &apos;failed&apos;.
        /// </summary>
        internal static string MiKo_2307_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2307_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To shorten comments - and still be to the point - comments should use the phrase &apos;failed&apos; instead of &apos;was not successful&apos;..
        /// </summary>
        internal static string MiKo_2307_Description {
            get {
                return ResourceManager.GetString("MiKo_2307_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;failed&apos; instead of &apos;was not successful&apos;.
        /// </summary>
        internal static string MiKo_2307_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2307_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Comments should use the phrase &apos;failed&apos; instead of &apos;was not successful&apos;.
        /// </summary>
        internal static string MiKo_2307_Title {
            get {
                return ResourceManager.GetString("MiKo_2307_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place comment before code.
        /// </summary>
        internal static string MiKo_2308_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2308_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Most times, a comment describes something that is related to an operation.
        ///That&apos;s why the comment should not be placed after the operation, but before. So the reader can easily associate the comment with the operation and does not need to guess if both are related or not..
        /// </summary>
        internal static string MiKo_2308_Description {
            get {
                return ResourceManager.GetString("MiKo_2308_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place comment before code.
        /// </summary>
        internal static string MiKo_2308_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2308_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not place comment on single line before closing brace but after code.
        /// </summary>
        internal static string MiKo_2308_Title {
            get {
                return ResourceManager.GetString("MiKo_2308_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change &quot;n&apos;t&quot; to &quot; not&quot;.
        /// </summary>
        internal static string MiKo_2309_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_2309_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It may happen to read over and not recognize a contradiction. This then leads to unintentional errors.
        ///It would therefore be better to clearly highlight the contradiction..
        /// </summary>
        internal static string MiKo_2309_Description {
            get {
                return ResourceManager.GetString("MiKo_2309_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use contradiction &quot;n&apos;t&quot;.
        /// </summary>
        internal static string MiKo_2309_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2309_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Comments should not use the contradiction &quot;n&apos;t&quot;.
        /// </summary>
        internal static string MiKo_2309_Title {
            get {
                return ResourceManager.GetString("MiKo_2309_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Instead of stating *that* the intention exists, comments should better explain *what* the intention behind actually is.
        ///So developers have more background information at hand, allowing them to make better decisions based on that information..
        /// </summary>
        internal static string MiKo_2310_Description {
            get {
                return ResourceManager.GetString("MiKo_2310_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Explain what the intention behind actually is.
        /// </summary>
        internal static string MiKo_2310_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2310_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Comments should explain the &apos;Why&apos; and not the &apos;That&apos;.
        /// </summary>
        internal static string MiKo_2310_Title {
            get {
                return ResourceManager.GetString("MiKo_2310_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If #region shall be used, then any empty #region shall be avoided.
        ///Such empty regions solely clutter the code without providing any benefit at all..
        /// </summary>
        internal static string MiKo_3000_Description {
            get {
                return ResourceManager.GetString("MiKo_3000_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove empty {0}.
        /// </summary>
        internal static string MiKo_3000_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3000_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use empty regions.
        /// </summary>
        internal static string MiKo_3000_Title {
            get {
                return ResourceManager.GetString("MiKo_3000_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, use the pre-defined .NET Framework delegate types such as &apos;Action&apos;, &apos;Func&apos; or &apos;Expression&apos; instead of custom delegates..
        /// </summary>
        internal static string MiKo_3001_Description {
            get {
                return ResourceManager.GetString("MiKo_3001_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/events-and-callbacks.
        /// </summary>
        internal static string MiKo_3001_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_3001_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Action&apos;, &apos;Func&apos; or &apos;Expression&apos; instead.
        /// </summary>
        internal static string MiKo_3001_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3001_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Custom delegates should not be used.
        /// </summary>
        internal static string MiKo_3001_Title {
            get {
                return ResourceManager.GetString("MiKo_3001_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If a class has too many dependencies, that class is doing too much and does not follow the SRP..
        /// </summary>
        internal static string MiKo_3002_Description {
            get {
                return ResourceManager.GetString("MiKo_3002_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Too many MEF dependencies: {1,4} (allowed are max. {2}).
        /// </summary>
        internal static string MiKo_3002_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3002_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Classes should not have too many dependencies.
        /// </summary>
        internal static string MiKo_3002_Title {
            get {
                return ResourceManager.GetString("MiKo_3002_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease usage, events should follow the .NET Framework Design Guidelines for Event Design..
        /// </summary>
        internal static string MiKo_3003_Description {
            get {
                return ResourceManager.GetString("MiKo_3003_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/event.
        /// </summary>
        internal static string MiKo_3003_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_3003_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;EventHandler&apos; or &apos;EventHandler&lt;T&gt;&apos; instead.
        /// </summary>
        internal static string MiKo_3003_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3003_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Events should follow .NET Framework Design Guidelines for events.
        /// </summary>
        internal static string MiKo_3003_Title {
            get {
                return ResourceManager.GetString("MiKo_3003_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EventArgs exist only to raise events and to pass some data that to the listening event handlers.
        ///If the carried event data now changes between the different handlers, the behavior gets unpredictable and a race condition occurs.
        ///
        ///To avoid that situation, the properties of EventArgs shall be read-only or only privately settable. If you have to set the event data, provide a method to do so and ensure that the method acts as circuit breaker (that is you can set the data exactly once)..
        /// </summary>
        internal static string MiKo_3004_Description {
            get {
                return ResourceManager.GetString("MiKo_3004_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make setter private or property read-only.
        /// </summary>
        internal static string MiKo_3004_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3004_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property setters of EventArgs shall be private.
        /// </summary>
        internal static string MiKo_3004_Title {
            get {
                return ResourceManager.GetString("MiKo_3004_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, methods that are named &apos;Try&apos; should follow the Trier-Doer-Pattern.
        ///
        ///That is they should return a Boolean and have the last parameter as [out] parameter for the result. In the success case the method should return &apos;true&apos; and provide valid out data; in all other cases the method should return &apos;false&apos;..
        /// </summary>
        internal static string MiKo_3005_Description {
            get {
                return ResourceManager.GetString("MiKo_3005_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Follow the Trier-Doer-Pattern.
        /// </summary>
        internal static string MiKo_3005_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3005_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods named &apos;Try&apos; should follow the Trier-Doer-Pattern.
        /// </summary>
        internal static string MiKo_3005_Title {
            get {
                return ResourceManager.GetString("MiKo_3005_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, and being consistent with the .NET Framework classes, &apos;CancellationToken&apos; parameters should come after all the other parameters of a method..
        /// </summary>
        internal static string MiKo_3006_Description {
            get {
                return ResourceManager.GetString("MiKo_3006_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place &apos;{0}&apos; as last parameter.
        /// </summary>
        internal static string MiKo_3006_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3006_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;CancellationToken&apos; parameter should be last method parameter.
        /// </summary>
        internal static string MiKo_3006_Title {
            get {
                return ResourceManager.GetString("MiKo_3006_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintainability and readability, methods should be written using only one single language. Hence LINQ method syntax and declarative query syntax should not be used within the same method..
        /// </summary>
        internal static string MiKo_3007_Description {
            get {
                return ResourceManager.GetString("MiKo_3007_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not mix LINQ syntax.
        /// </summary>
        internal static string MiKo_3007_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3007_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use LINQ method and declarative query syntax in same method.
        /// </summary>
        internal static string MiKo_3007_Title {
            get {
                return ResourceManager.GetString("MiKo_3007_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should not return changeable collections such as &apos;ICollection&lt;T&gt;&apos; because those can be changed from outside. Instead they should return the read-only variants (e.g. &apos;IReadOnlyCollection&lt;T&gt;&apos;)..
        /// </summary>
        internal static string MiKo_3008_Description {
            get {
                return ResourceManager.GetString("MiKo_3008_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use a read-only immutable variant or &apos;IEnumerable&lt;T&gt;&apos; instead.
        /// </summary>
        internal static string MiKo_3008_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3008_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method should not return collections that can be changed from outside.
        /// </summary>
        internal static string MiKo_3008_Title {
            get {
                return ResourceManager.GetString("MiKo_3008_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods that are invoked by commands should not be lambda expressions as that makes them hard to read, understand and maintain. Instead they should be named methods that have a meaningful name..
        /// </summary>
        internal static string MiKo_3009_Description {
            get {
                return ResourceManager.GetString("MiKo_3009_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use named method instead.
        /// </summary>
        internal static string MiKo_3009_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3009_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Commands should invoke only named methods and no lambda expressions.
        /// </summary>
        internal static string MiKo_3009_Title {
            get {
                return ResourceManager.GetString("MiKo_3009_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specific kinds of exceptions are reserved and thrown by the execution engine (CLR) and in most cases indicate a bug..
        /// </summary>
        internal static string MiKo_3010_Description {
            get {
                return ResourceManager.GetString("MiKo_3010_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/using-standard-exception-types.
        /// </summary>
        internal static string MiKo_3010_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_3010_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not create a &apos;{0}&apos;.
        /// </summary>
        internal static string MiKo_3010_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3010_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not create or throw reserved exception types.
        /// </summary>
        internal static string MiKo_3010_Title {
            get {
                return ResourceManager.GetString("MiKo_3010_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add &apos;paramName&apos; parameter.
        /// </summary>
        internal static string MiKo_3011_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3011_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Thrown ArgumentExceptions (or its subtypes) should contain the name of the parameter that caused the exception to be thrown..
        /// </summary>
        internal static string MiKo_3011_Description {
            get {
                return ResourceManager.GetString("MiKo_3011_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/using-standard-exception-types#argumentexception-argumentnullexception-and-argumentoutofrangeexception.
        /// </summary>
        internal static string MiKo_3011_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_3011_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change &apos;paramName&apos; parameter to {1}.
        /// </summary>
        internal static string MiKo_3011_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3011_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Thrown ArgumentExceptions (or its subtypes) shall provide the correct parameter name.
        /// </summary>
        internal static string MiKo_3011_Title {
            get {
                return ResourceManager.GetString("MiKo_3011_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide actual value.
        /// </summary>
        internal static string MiKo_3012_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3012_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Thrown ArgumentOutOfRangeExceptions (or its subtypes) should contain the actual value of the parameter that caused the exception to be thrown..
        /// </summary>
        internal static string MiKo_3012_Description {
            get {
                return ResourceManager.GetString("MiKo_3012_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide the actual value that causes the exception to be thrown.
        /// </summary>
        internal static string MiKo_3012_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3012_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Thrown ArgumentOutOfRangeExceptions (or its subtypes) shall provide the actual value that causes the exception to be thrown.
        /// </summary>
        internal static string MiKo_3012_Title {
            get {
                return ResourceManager.GetString("MiKo_3012_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change to &apos;ArgumentOutOfRangeException&apos;.
        /// </summary>
        internal static string MiKo_3013_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3013_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;default&apos; clause in &apos;switch&apos; statements should throw an ArgumentOutOfRangeException (or subtype) to indicate that the given argument is out of range, but no ArgumentException..
        /// </summary>
        internal static string MiKo_3013_Description {
            get {
                return ResourceManager.GetString("MiKo_3013_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Throw an &apos;ArgumentOutOfRangeException&apos; instead.
        /// </summary>
        internal static string MiKo_3013_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3013_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;default&apos; clause in &apos;switch&apos; statements should throw an ArgumentOutOfRangeException (or subtype), but no ArgumentException.
        /// </summary>
        internal static string MiKo_3013_Title {
            get {
                return ResourceManager.GetString("MiKo_3013_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add a default reason.
        /// </summary>
        internal static string MiKo_3014_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3014_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, a thrown InvalidOperationException, NotImplementedException or NotSupportedException should have a reason that explains the circumstances why the exception has been thrown and - ideally - how to solve the situation..
        /// </summary>
        internal static string MiKo_3014_Description {
            get {
                return ResourceManager.GetString("MiKo_3014_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide a reason for the thrown &apos;{0}&apos;.
        /// </summary>
        internal static string MiKo_3014_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3014_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to InvalidOperationException, NotImplementedException and NotSupportedException should have a reason as message.
        /// </summary>
        internal static string MiKo_3014_Title {
            get {
                return ResourceManager.GetString("MiKo_3014_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change to &apos;InvalidOperationException&apos;.
        /// </summary>
        internal static string MiKo_3015_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3015_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ArgumentExceptions (or its subtypes) should not be thrown by parameterless methods.
        ///If the method call does not have any argument or if the failure does not involve the arguments themselves, then InvalidOperationException should be used..
        /// </summary>
        internal static string MiKo_3015_Description {
            get {
                return ResourceManager.GetString("MiKo_3015_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/using-standard-exception-types.
        /// </summary>
        internal static string MiKo_3015_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_3015_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Throw an &apos;InvalidOperationException&apos; instead.
        /// </summary>
        internal static string MiKo_3015_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3015_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Throw InvalidOperationExceptions (instead of ArgumentExceptions or its subtypes) to indicate inappropriate states of parameterless methods.
        /// </summary>
        internal static string MiKo_3015_Title {
            get {
                return ResourceManager.GetString("MiKo_3015_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change to &apos;ArgumentException&apos; or &apos;InvalidOperationException&apos;.
        /// </summary>
        internal static string MiKo_3016_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3016_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ArgumentNullExceptions should not be thrown for values of properties that are returned by parameters.
        ///If you want to indicate a problem for the parameter, throw an ArgumentException instead.
        ///If it&apos;s no issue of the parameter itself, throw an InvalidOperationException instead..
        /// </summary>
        internal static string MiKo_3016_Description {
            get {
                return ResourceManager.GetString("MiKo_3016_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/using-standard-exception-types.
        /// </summary>
        internal static string MiKo_3016_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_3016_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Throw an &apos;ArgumentException&apos; or &apos;InvalidOperationException&apos; instead.
        /// </summary>
        internal static string MiKo_3016_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3016_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not throw ArgumentNullException for inappropriate states of property return values.
        /// </summary>
        internal static string MiKo_3016_Title {
            get {
                return ResourceManager.GetString("MiKo_3016_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add inner exception.
        /// </summary>
        internal static string MiKo_3017_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3017_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If an exception gets caught and a new exception gets thrown, it&apos;s much easier if the new exception contains the caught one as inner exception..
        /// </summary>
        internal static string MiKo_3017_Description {
            get {
                return ResourceManager.GetString("MiKo_3017_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide exception as inner exception.
        /// </summary>
        internal static string MiKo_3017_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3017_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not swallow exceptions when throwing new exceptions.
        /// </summary>
        internal static string MiKo_3017_Title {
            get {
                return ResourceManager.GetString("MiKo_3017_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Already disposed instances of disposable types should indicate that they are disposed when invoking methods on them. That makes it easier to spot bugs because the user code should never access already disposed types..
        /// </summary>
        internal static string MiKo_3018_Description {
            get {
                return ResourceManager.GetString("MiKo_3018_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose.
        /// </summary>
        internal static string MiKo_3018_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_3018_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Throw ObjectDisposedException if disposed.
        /// </summary>
        internal static string MiKo_3018_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3018_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Throw ObjectDisposedExceptions on publicly visible methods of disposable types.
        /// </summary>
        internal static string MiKo_3018_Title {
            get {
                return ResourceManager.GetString("MiKo_3018_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Task.CompletedTask&apos;.
        /// </summary>
        internal static string MiKo_3020_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3020_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For performance reasons it&apos;s better to use &apos;Task.CompletedTask&apos; instead of &apos;Task.FromResult()&apos; as the returned task is internally cached..
        /// </summary>
        internal static string MiKo_3020_Description {
            get {
                return ResourceManager.GetString("MiKo_3020_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Task.CompletedTask&apos; instead.
        /// </summary>
        internal static string MiKo_3020_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3020_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Task.CompletedTask&apos; instead of &apos;Task.FromResult&apos;.
        /// </summary>
        internal static string MiKo_3020_Title {
            get {
                return ResourceManager.GetString("MiKo_3020_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you use &apos;Task.Run&apos; to return a Task because a method is a long-running operation, then this most probably means that you&apos;ve doing something wrong. If you have a long-running operation, use &apos;Task.Run&apos; to call it..
        /// </summary>
        internal static string MiKo_3021_Description {
            get {
                return ResourceManager.GetString("MiKo_3021_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html.
        /// </summary>
        internal static string MiKo_3021_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_3021_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;{0}&apos; to invoke method &apos;{1}&apos;, but not inside.
        /// </summary>
        internal static string MiKo_3021_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3021_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &apos;Task.Run&apos; in the implementation.
        /// </summary>
        internal static string MiKo_3021_Title {
            get {
                return ResourceManager.GetString("MiKo_3021_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If a method returns Task&lt;IEnumerable&gt; or Task&lt;IEnumerable&lt;T&gt;&gt;, then it is likely that the enumerable is not evaluated until it is accessed in a foreach or Linq call.
        ///That accessor likely is another thread (e.g. the main thread) which contradicts the whole idea of returning a dedicated task..
        /// </summary>
        internal static string MiKo_3022_Description {
            get {
                return ResourceManager.GetString("MiKo_3022_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not return &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_3022_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3022_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not return Task&lt;IEnumerable&gt; or Task&lt;IEnumerable&lt;T&gt;&gt;.
        /// </summary>
        internal static string MiKo_3022_Title {
            get {
                return ResourceManager.GetString("MiKo_3022_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A &apos;CancellationTokenSource&apos; should not be passed around. Instead, the &apos;CancellationToken&apos; should be passed around to propagate notifications that operations should be canceled..
        /// </summary>
        internal static string MiKo_3023_Description {
            get {
                return ResourceManager.GetString("MiKo_3023_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use a &apos;{1}&apos; instead.
        /// </summary>
        internal static string MiKo_3023_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3023_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &apos;CancellationTokenSource&apos; as parameter.
        /// </summary>
        internal static string MiKo_3023_Title {
            get {
                return ResourceManager.GetString("MiKo_3023_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [ref] allows to change the storage location of the variable it is declared on. This allows to re-assign values to an already existing variable and therefore altering it.
        ///In case of reference types the altered variable is an altered object reference, thus all callees that access the altered variable later on get the changed one (very similar to an out parameter).
        ///
        ///In most cases this is not wanted. The object reference shall be the same, only the object shall be altered..
        /// </summary>
        internal static string MiKo_3024_Description {
            get {
                return ResourceManager.GetString("MiKo_3024_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &apos;ref&apos;.
        /// </summary>
        internal static string MiKo_3024_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3024_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use the [ref] keyword on reference parameters.
        /// </summary>
        internal static string MiKo_3024_Title {
            get {
                return ResourceManager.GetString("MiKo_3024_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method parameters should be considered as read-only. They should not be re-assigned to other values. If you need them to have another value, use a local variable instead..
        /// </summary>
        internal static string MiKo_3025_Description {
            get {
                return ResourceManager.GetString("MiKo_3025_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not re-assign &apos;{0}&apos;.
        /// </summary>
        internal static string MiKo_3025_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3025_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not re-assign method parameters.
        /// </summary>
        internal static string MiKo_3025_Title {
            get {
                return ResourceManager.GetString("MiKo_3025_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unused parameters are not needed and should be removed as they solely clutter the code base without providing any benefit at all..
        /// </summary>
        internal static string MiKo_3026_Description {
            get {
                return ResourceManager.GetString("MiKo_3026_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter is not used and can be safely removed.
        /// </summary>
        internal static string MiKo_3026_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3026_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unused parameters should be removed.
        /// </summary>
        internal static string MiKo_3026_Title {
            get {
                return ResourceManager.GetString("MiKo_3026_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Marking parameters for future usage leads to a bad design. It is unclear whether the parameter will ever be used. It is also unclear whether the type of the parameter will match future needs. In future, you can always override methods and add new parameters..
        /// </summary>
        internal static string MiKo_3027_Description {
            get {
                return ResourceManager.GetString("MiKo_3027_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/parameter-design.
        /// </summary>
        internal static string MiKo_3027_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_3027_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not reserve &apos;{0}&apos; for future usage.
        /// </summary>
        internal static string MiKo_3027_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3027_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameters should not be marked to be reserved for future usage.
        /// </summary>
        internal static string MiKo_3027_Title {
            get {
                return ResourceManager.GetString("MiKo_3027_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If a collection shall be cleared, then &apos;Clear()&apos; should be invoked. Assigning &apos;null&apos; to a parameter will not do anything here because the parameter is only a copy (reference) of the original parameter..
        /// </summary>
        internal static string MiKo_3028_Description {
            get {
                return ResourceManager.GetString("MiKo_3028_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not assign null (is cleanup wanted here?).
        /// </summary>
        internal static string MiKo_3028_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3028_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not assign null to lambda parameters.
        /// </summary>
        internal static string MiKo_3028_Title {
            get {
                return ResourceManager.GetString("MiKo_3028_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you register for an event but forget to unregister, a memory leak may occur. This especially happens in case the event (which is registered on) is static or belongs to an object having a long lifetime..
        /// </summary>
        internal static string MiKo_3029_Description {
            get {
                return ResourceManager.GetString("MiKo_3029_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assignment causes potential memory leak.
        /// </summary>
        internal static string MiKo_3029_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3029_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Event registrations should not cause memory leaks.
        /// </summary>
        internal static string MiKo_3029_Title {
            get {
                return ResourceManager.GetString("MiKo_3029_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, methods assume as little as possible about the structure or properties of objects they use. They should only work with objects they get directly, but they should not reach through them to access other objects and their services..
        /// </summary>
        internal static string MiKo_3030_Description {
            get {
                return ResourceManager.GetString("MiKo_3030_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://en.wikipedia.org/wiki/Law_of_Demeter.
        /// </summary>
        internal static string MiKo_3030_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_3030_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid to violate the Law of Demeter.
        /// </summary>
        internal static string MiKo_3030_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3030_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should follow the Law of Demeter.
        /// </summary>
        internal static string MiKo_3030_Title {
            get {
                return ResourceManager.GetString("MiKo_3030_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ICloneable.Clone() method does not define whether a deep or a swallow copy shall be returned.
        ///
        ///As that is not defined, there is no guarantee how it gets implemented, and - because of that - it simply cannot be used as there is a huge difference between a deep and a swallow copy..
        /// </summary>
        internal static string MiKo_3031_Description {
            get {
                return ResourceManager.GetString("MiKo_3031_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not implement &apos;ICloneable.Clone()&apos;.
        /// </summary>
        internal static string MiKo_3031_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3031_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ICloneable.Clone() should not be implemented.
        /// </summary>
        internal static string MiKo_3031_Title {
            get {
                return ResourceManager.GetString("MiKo_3031_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;nameof&apos;.
        /// </summary>
        internal static string MiKo_3032_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3032_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property names that are passed into the &apos;PropertyChangedEventArgs&apos; constructors shall be provided via the &apos;nameof&apos; operator. This eases refactorings..
        /// </summary>
        internal static string MiKo_3032_Description {
            get {
                return ResourceManager.GetString("MiKo_3032_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;{1}&apos; instead.
        /// </summary>
        internal static string MiKo_3032_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3032_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;nameof&apos; instead of Cinch for names of properties for created &apos;PropertyChangedEventArgs&apos; instances.
        /// </summary>
        internal static string MiKo_3032_Title {
            get {
                return ResourceManager.GetString("MiKo_3032_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;nameof&apos;.
        /// </summary>
        internal static string MiKo_3033_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3033_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property names that are passed into the &apos;PropertyChangingEventArgs&apos; and &apos;PropertyChangedEventArgs&apos; constructors shall be provided via the &apos;nameof&apos; operator. This prevents typos or non-existing invalid names and eases refactorings..
        /// </summary>
        internal static string MiKo_3033_Description {
            get {
                return ResourceManager.GetString("MiKo_3033_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;nameof&apos;.
        /// </summary>
        internal static string MiKo_3033_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3033_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;nameof&apos; for names of properties for created &apos;PropertyChangingEventArgs&apos; and &apos;PropertyChangedEventArgs&apos; instances.
        /// </summary>
        internal static string MiKo_3033_Title {
            get {
                return ResourceManager.GetString("MiKo_3033_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Apply [CallerMemberName].
        /// </summary>
        internal static string MiKo_3034_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3034_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A method that raises the PropertyChanging or PropertyChanged events should use the [CallerMemberNameAttribute] to specify the name of the property automatically..
        /// </summary>
        internal static string MiKo_3034_Description {
            get {
                return ResourceManager.GetString("MiKo_3034_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Apply [CallerMemberName] attribute.
        /// </summary>
        internal static string MiKo_3034_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3034_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PropertyChanged event raiser shall use [CallerMemberName] attribute.
        /// </summary>
        internal static string MiKo_3034_Title {
            get {
                return ResourceManager.GetString("MiKo_3034_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;WaitOne&apos; methods are normally invoked to wait for a specific situation to occur. If the wait is forever, deadlocks or livelocks can occur. To avoid that, allow the wait to time out b providing a &apos;TimeSpan&apos; to &apos;WaitOne&apos;..
        /// </summary>
        internal static string MiKo_3035_Description {
            get {
                return ResourceManager.GetString("MiKo_3035_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide a timeout value.
        /// </summary>
        internal static string MiKo_3035_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3035_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not invoke &apos;WaitOne&apos; methods without timeouts.
        /// </summary>
        internal static string MiKo_3035_Title {
            get {
                return ResourceManager.GetString("MiKo_3035_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use factory method.
        /// </summary>
        internal static string MiKo_3036_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3036_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;TimeSpan&apos; .NET struct contains a lot of constructors having different amounts of parameters. Those constructor invocations are hard to read. As the struct also provides static factory methods such as &apos;FromMinutes&apos; or &apos;FromDays&apos;, these should be preferred. They are much easier to read and more explicit.
        ///
        ///Please note:
        ///It would be even better to use extension methods such as &apos;Minutes()&apos; or &apos;Days()&apos; that would allow a more natural usage, such as &apos; var x = 5.Days(); &apos;..
        /// </summary>
        internal static string MiKo_3036_Description {
            get {
                return ResourceManager.GetString("MiKo_3036_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use factory or extension method instead.
        /// </summary>
        internal static string MiKo_3036_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3036_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prefer to use &apos;TimeSpan&apos; factory methods instead of constructors.
        /// </summary>
        internal static string MiKo_3036_Title {
            get {
                return ResourceManager.GetString("MiKo_3036_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Classes may provide methods such as WaitForExit, WaitOne, ... that have a parameter that is of type int. That parameter is used to specify a timeout, but - as it is a &apos;magic&apos; number - it is hard to find out the exact amount of time just from reading the number (is it milliseconds, seconds, ... ?)
        ///So to ease maintenance, the number should not be hard-coded. Most times a TimeSpan an be used instead that eases reading a lot.
        ///
        ///
        ///Please note:
        ///It would be even better to use extension methods such as &apos;Minutes( [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MiKo_3037_Description {
            get {
                return ResourceManager.GetString("MiKo_3037_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use magic number.
        /// </summary>
        internal static string MiKo_3037_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3037_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use magic numbers for timeouts.
        /// </summary>
        internal static string MiKo_3037_Title {
            get {
                return ResourceManager.GetString("MiKo_3037_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hard-coded numbers are difficult to understand why they are exactly as they are. So they are kind of &apos;magic&apos; numbers.
        ///To ease maintenance, such numbers should not be hard-coded - instead they should be defined as constants..
        /// </summary>
        internal static string MiKo_3038_Description {
            get {
                return ResourceManager.GetString("MiKo_3038_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Introduce constant for magic number {1}.
        /// </summary>
        internal static string MiKo_3038_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3038_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use magic numbers.
        /// </summary>
        internal static string MiKo_3038_Title {
            get {
                return ResourceManager.GetString("MiKo_3038_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Properties that use Linq internally most probably behave differently when being accessed later on or multiple times. As the idea of properties is to be able to access fields (with some safety checks in place), that contradicts the intention of being a property and lead to all sorts of unwanted side-effects.
        ///Such properties should be methods instead to make it clear that they behave differently between calls..
        /// </summary>
        internal static string MiKo_3039_Description {
            get {
                return ResourceManager.GetString("MiKo_3039_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &apos;{1}&apos; inside property.
        /// </summary>
        internal static string MiKo_3039_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3039_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Properties should not use Linq or yield.
        /// </summary>
        internal static string MiKo_3039_Title {
            get {
                return ResourceManager.GetString("MiKo_3039_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance and increase readability, do not use Booleans unless you are absolutely sure there will never be a need for more than two values. Instead, use an Enum..
        /// </summary>
        internal static string MiKo_3040_Description {
            get {
                return ResourceManager.GetString("MiKo_3040_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/parameter-design.
        /// </summary>
        internal static string MiKo_3040_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_3040_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use an Enum instead.
        /// </summary>
        internal static string MiKo_3040_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3040_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use Booleans unless you are absolutely sure that you will never ever need more than 2 values.
        /// </summary>
        internal static string MiKo_3040_Title {
            get {
                return ResourceManager.GetString("MiKo_3040_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EventArgs should not use delegates such as &apos;Action&apos; or &apos;Func&apos; because the callee needs to know exactly how the delegate behaves.
        ///Failures inside the delegate(s) are really hard to tackle down because an exception gets thrown at a completely unrelated area..
        /// </summary>
        internal static string MiKo_3041_Description {
            get {
                return ResourceManager.GetString("MiKo_3041_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use a delegate.
        /// </summary>
        internal static string MiKo_3041_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3041_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EventArgs shall not use delegates.
        /// </summary>
        internal static string MiKo_3041_Title {
            get {
                return ResourceManager.GetString("MiKo_3041_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EventArgs are by themselves contracts. Therefore, they should not implement any additional interface..
        /// </summary>
        internal static string MiKo_3042_Description {
            get {
                return ResourceManager.GetString("MiKo_3042_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not implement interface.
        /// </summary>
        internal static string MiKo_3042_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3042_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EventArgs shall not implement interfaces.
        /// </summary>
        internal static string MiKo_3042_Title {
            get {
                return ResourceManager.GetString("MiKo_3042_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;nameof&apos;.
        /// </summary>
        internal static string MiKo_3043_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3043_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The names of events that are (de-)registered on the WeakEventManager shall be provided via &apos;nameof&apos; operator. This prevents typos or non-existing invalid names and eases refactorings..
        /// </summary>
        internal static string MiKo_3043_Description {
            get {
                return ResourceManager.GetString("MiKo_3043_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;nameof&apos;.
        /// </summary>
        internal static string MiKo_3043_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3043_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;nameof&apos; for WeakEventManager event (de-)registrations.
        /// </summary>
        internal static string MiKo_3043_Title {
            get {
                return ResourceManager.GetString("MiKo_3043_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;nameof&apos;.
        /// </summary>
        internal static string MiKo_3044_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3044_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property names that are provided by the &apos;PropertyChangingEventArgs&apos; and &apos;PropertyChangedEventArgs&apos; shall be compared via the &apos;nameof&apos; operator. This prevents typos or non-existing invalid names and eases refactorings..
        /// </summary>
        internal static string MiKo_3044_Description {
            get {
                return ResourceManager.GetString("MiKo_3044_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;nameof&apos;.
        /// </summary>
        internal static string MiKo_3044_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3044_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;nameof&apos; to compare property names of &apos;PropertyChangingEventArgs&apos; and &apos;PropertyChangedEventArgs&apos;.
        /// </summary>
        internal static string MiKo_3044_Title {
            get {
                return ResourceManager.GetString("MiKo_3044_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;nameof&apos;.
        /// </summary>
        internal static string MiKo_3045_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3045_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The names of events that are registered on the EventManager shall be provided via &apos;nameof&apos; operator. This prevents typos or non-existing invalid names and eases refactorings..
        /// </summary>
        internal static string MiKo_3045_Description {
            get {
                return ResourceManager.GetString("MiKo_3045_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;nameof&apos;.
        /// </summary>
        internal static string MiKo_3045_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3045_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;nameof&apos; for EventManager event registrations.
        /// </summary>
        internal static string MiKo_3045_Title {
            get {
                return ResourceManager.GetString("MiKo_3045_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;nameof&apos;.
        /// </summary>
        internal static string MiKo_3046_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3046_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To prevent typos, any property raising method like &apos;OnPropertyChanged&apos; shall use &apos;nameof&apos; to define the property..
        /// </summary>
        internal static string MiKo_3046_Description {
            get {
                return ResourceManager.GetString("MiKo_3046_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;nameof&apos;.
        /// </summary>
        internal static string MiKo_3046_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3046_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;nameof&apos; for property names of property raising methods.
        /// </summary>
        internal static string MiKo_3046_Title {
            get {
                return ResourceManager.GetString("MiKo_3046_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;nameof&apos;.
        /// </summary>
        internal static string MiKo_3047_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3047_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To prevent typos, any applied [ContentProperty] attribute shall use &apos;nameof&apos; to define the property..
        /// </summary>
        internal static string MiKo_3047_Description {
            get {
                return ResourceManager.GetString("MiKo_3047_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;nameof&apos;.
        /// </summary>
        internal static string MiKo_3047_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3047_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;nameof&apos; for applied [ContentProperty] attributes.
        /// </summary>
        internal static string MiKo_3047_Title {
            get {
                return ResourceManager.GetString("MiKo_3047_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To indicate to development tools the data types involved in a conversion, it is a good practice to decorate implementations of the IValueConverter interface with the ValueConversionAttribute attribute..
        /// </summary>
        internal static string MiKo_3048_Description {
            get {
                return ResourceManager.GetString("MiKo_3048_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Apply the [ValueConversion] attribute.
        /// </summary>
        internal static string MiKo_3048_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3048_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ValueConverters shall have the [ValueConversion] attribute applied.
        /// </summary>
        internal static string MiKo_3048_Title {
            get {
                return ResourceManager.GetString("MiKo_3048_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When working with enums in C#, it is sometimes necessary to get a string description of the value associated with the enum. To achieve that, the &apos;System.ComponentModel.DescriptionAttribute&apos; can be used..
        /// </summary>
        internal static string MiKo_3049_Description {
            get {
                return ResourceManager.GetString("MiKo_3049_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Apply a [Description] attribute with a proper description.
        /// </summary>
        internal static string MiKo_3049_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3049_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enum members shall have the [Description] attribute applied.
        /// </summary>
        internal static string MiKo_3049_Title {
            get {
                return ResourceManager.GetString("MiKo_3049_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make DependencyProperty &apos;public static readonly&apos;.
        /// </summary>
        internal static string MiKo_3050_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3050_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fields that are the back of a DependencyProperty should be made &apos;public static readonly&apos; to allow the .NET framework and other clients to find and access those fields..
        /// </summary>
        internal static string MiKo_3050_Description {
            get {
                return ResourceManager.GetString("MiKo_3050_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://learn.microsoft.com/en-us/dotnet/framework/wpf/advanced/how-to-implement-a-dependency-property.
        /// </summary>
        internal static string MiKo_3050_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_3050_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make it &apos;public static readonly&apos;.
        /// </summary>
        internal static string MiKo_3050_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3050_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DependencyProperty fields should be &apos;public static readonly&apos;.
        /// </summary>
        internal static string MiKo_3050_Title {
            get {
                return ResourceManager.GetString("MiKo_3050_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;nameof&apos;.
        /// </summary>
        internal static string MiKo_3051_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3051_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To avoid typos, fields that are the back of a DependencyProperty should be registered via &apos;DependencyProperty.Register()&apos; and the &apos;nameof&apos; operator.
        ///In addition, the correct property names, property types and owing types should be provided..
        /// </summary>
        internal static string MiKo_3051_Description {
            get {
                return ResourceManager.GetString("MiKo_3051_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://learn.microsoft.com/en-us/dotnet/framework/wpf/advanced/how-to-implement-a-dependency-property.
        /// </summary>
        internal static string MiKo_3051_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_3051_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;{1}&apos; instead.
        /// </summary>
        internal static string MiKo_3051_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3051_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DependencyProperty fields should be properly registered.
        /// </summary>
        internal static string MiKo_3051_Title {
            get {
                return ResourceManager.GetString("MiKo_3051_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make DependencyPropertyKey &apos;private static readonly&apos;.
        /// </summary>
        internal static string MiKo_3052_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3052_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fields that are the back of a DependencyPropertyKey should be made non-public, &apos;static readonly&apos; to prevent clients to find and access those fields..
        /// </summary>
        internal static string MiKo_3052_Description {
            get {
                return ResourceManager.GetString("MiKo_3052_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://learn.microsoft.com/en-us/dotnet/api/system.windows.dependencypropertykey.
        /// </summary>
        internal static string MiKo_3052_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_3052_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make it non-public &apos;static readonly&apos;.
        /// </summary>
        internal static string MiKo_3052_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3052_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DependencyPropertyKey fields should be non-public &apos;static readonly&apos;.
        /// </summary>
        internal static string MiKo_3052_Title {
            get {
                return ResourceManager.GetString("MiKo_3052_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To avoid typos, fields that are the Key of a DependencyProperty should be registered via &apos;DependencyProperty.RegisterReadOnly()&apos; and the &apos;nameof&apos; operator.
        ///In addition, the correct property names, property types and owing types should be provided..
        /// </summary>
        internal static string MiKo_3053_Description {
            get {
                return ResourceManager.GetString("MiKo_3053_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://learn.microsoft.com/en-us/dotnet/api/system.windows.dependencyproperty.registerreadonly.
        /// </summary>
        internal static string MiKo_3053_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_3053_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;{1}&apos; instead.
        /// </summary>
        internal static string MiKo_3053_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3053_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DependencyPropertyKey fields should be properly registered.
        /// </summary>
        internal static string MiKo_3053_Title {
            get {
                return ResourceManager.GetString("MiKo_3053_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expose DependencyProperty identifier.
        /// </summary>
        internal static string MiKo_3054_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3054_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Read-only dependency properties are defined by &apos;DependencyPropertyKey&apos; fields and should not be visible to the public.
        ///To made them available, it is recommended to expose a dependency property identifier for such read-only dependency property.
        ///That can be done by exposing the value of &apos;DependencyPropertyKey.DependencyProperty&apos; as a &apos;public static readonly&apos; field on the specific class..
        /// </summary>
        internal static string MiKo_3054_Description {
            get {
                return ResourceManager.GetString("MiKo_3054_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://learn.microsoft.com/en-us/dotnet/api/system.windows.dependencyproperty.registerreadonly.
        /// </summary>
        internal static string MiKo_3054_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_3054_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expose a DependencyProperty identifier for the read-only dependency property &apos;{0}&apos;.
        /// </summary>
        internal static string MiKo_3054_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3054_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A read-only DependencyProperty should have an exposed DependencyProperty identifier.
        /// </summary>
        internal static string MiKo_3054_Title {
            get {
                return ResourceManager.GetString("MiKo_3054_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In WPF view models are used for bindings. In case a view model does not implement the INotifyPropertyChanged interface, the binding is created via reflection. This is done by WPF to be able to detect changes of property values. But due to that a memory leak occurs as the binding instance (called descriptor) is hold in a static hash table for as long as the application runs.
        ///To avoid that &quot;by design&quot; memory leak in WPF, types should implement INotifyPropertyChanged and raise the corresponding events wheneve [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MiKo_3055_Description {
            get {
                return ResourceManager.GetString("MiKo_3055_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Implement INotifyPropertyChanged to avoid WPF binding memory leaks.
        /// </summary>
        internal static string MiKo_3055_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3055_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ViewModels should implement INotifyPropertyChanged.
        /// </summary>
        internal static string MiKo_3055_Title {
            get {
                return ResourceManager.GetString("MiKo_3055_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove Assert call.
        /// </summary>
        internal static string MiKo_3060_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3060_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you use Debug.Assert() or Trace.Assert(), then you want to ensure something. Nevertheless, this has several drawbacks:
        ///1. Debug.Assert() does not work in Release mode (whereas Trace.Assert() does).
        ///2. You cannot do anything here except to confirm the situation.
        ///3. There is no failure handling available.
        ///4. Calling code is not informed about the code and cannot handle the situation properly.
        ///
        ///So instead of using Debug.Assert() or Trace.Assert() throw an exception, such as an InvalidOperationExceptio [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MiKo_3060_Description {
            get {
                return ResourceManager.GetString("MiKo_3060_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_3060_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3060_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debug.Assert or Trace.Assert shall not be used.
        /// </summary>
        internal static string MiKo_3060_Title {
            get {
                return ResourceManager.GetString("MiKo_3060_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Often, loggers are requested via a type. Unfortunately, that most likely results in the situation that the logs contain no useful categories. Even worse, developers try to control the log output via the different severities (Debug, Info, ...).
        ///As a result, the logs contain a lot of garbage. So, while analyzing log files it is unclear which log statement belongs into which category.
        ///
        ///Therefore, the logger should be requested via a string that acts as category..
        /// </summary>
        internal static string MiKo_3061_Description {
            get {
                return ResourceManager.GetString("MiKo_3061_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use a string as category instead.
        /// </summary>
        internal static string MiKo_3061_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3061_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loggers shall use a proper log category.
        /// </summary>
        internal static string MiKo_3061_Title {
            get {
                return ResourceManager.GetString("MiKo_3061_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End log message with colon.
        /// </summary>
        internal static string MiKo_3062_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3062_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log messages that log exceptions should end with a colon, to indicate that there is an exception..
        /// </summary>
        internal static string MiKo_3062_Description {
            get {
                return ResourceManager.GetString("MiKo_3062_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End log message with colon.
        /// </summary>
        internal static string MiKo_3062_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3062_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End log messages for exceptions with a colon.
        /// </summary>
        internal static string MiKo_3062_Title {
            get {
                return ResourceManager.GetString("MiKo_3062_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End log message with dot.
        /// </summary>
        internal static string MiKo_3063_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3063_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log messages that do not log exceptions should end with a dot because there is no exception to focus on..
        /// </summary>
        internal static string MiKo_3063_Description {
            get {
                return ResourceManager.GetString("MiKo_3063_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End log message with dot.
        /// </summary>
        internal static string MiKo_3063_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3063_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End non-exceptional log messages with a dot.
        /// </summary>
        internal static string MiKo_3063_Title {
            get {
                return ResourceManager.GetString("MiKo_3063_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change &quot;n&apos;t&quot; to &quot; not&quot;.
        /// </summary>
        internal static string MiKo_3064_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3064_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It may happen to read over and not recognize a contradiction. This then leads to unintentional errors.
        ///It would therefore be better to clearly highlight the contradiction..
        /// </summary>
        internal static string MiKo_3064_Description {
            get {
                return ResourceManager.GetString("MiKo_3064_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use contradiction &quot;n&apos;t&quot;.
        /// </summary>
        internal static string MiKo_3064_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3064_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log messages should not use the contradiction &quot;n&apos;t&quot;.
        /// </summary>
        internal static string MiKo_3064_Title {
            get {
                return ResourceManager.GetString("MiKo_3064_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods that return IEnumerable are expected to be used in foreach loops or Linq queries.
        ///It is unexpected that such places throw a NullReferenceException or ArgumentNullException, so these methods should never return null..
        /// </summary>
        internal static string MiKo_3070_Description {
            get {
                return ResourceManager.GetString("MiKo_3070_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not return null.
        /// </summary>
        internal static string MiKo_3070_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3070_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not return null for an IEnumerable.
        /// </summary>
        internal static string MiKo_3070_Title {
            get {
                return ResourceManager.GetString("MiKo_3070_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods that return Task are expected to be used for async calls.
        ///It is unexpected that when calling such methods you get a NullReferenceException thrown, so these methods should never return null..
        /// </summary>
        internal static string MiKo_3071_Description {
            get {
                return ResourceManager.GetString("MiKo_3071_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not return null.
        /// </summary>
        internal static string MiKo_3071_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3071_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not return null for a Task.
        /// </summary>
        internal static string MiKo_3071_Title {
            get {
                return ResourceManager.GetString("MiKo_3071_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods that are visible to the public should not return a List&lt;&gt; or Dictionary&lt;&gt;. Instead, they should return the interfaces IList&lt;&gt; or IDictionary&lt;&gt;.
        ///Doing so allows to change the implementation of the return value whenever it&apos;s needed. Otherwise, the method is bound to always and forever return a List&lt;&gt; or Dictionary&lt;&gt;..
        /// </summary>
        internal static string MiKo_3072_Description {
            get {
                return ResourceManager.GetString("MiKo_3072_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not return {1}&lt;&gt;.
        /// </summary>
        internal static string MiKo_3072_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3072_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Non-private methods should not return &apos;List&lt;&gt;&apos; or &apos;Dictionary&lt;&gt;&apos;.
        /// </summary>
        internal static string MiKo_3072_Title {
            get {
                return ResourceManager.GetString("MiKo_3072_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Constructors should run completely. They should not partially initialize the objects..
        /// </summary>
        internal static string MiKo_3073_Description {
            get {
                return ResourceManager.GetString("MiKo_3073_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not return inside constructor.
        /// </summary>
        internal static string MiKo_3073_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3073_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not leave objects partially initialized.
        /// </summary>
        internal static string MiKo_3073_Title {
            get {
                return ResourceManager.GetString("MiKo_3073_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The idea of a constructor is to create an initialized instance of that specific type. Its responsibility is not to create instances of other types.
        ///So, having &apos;ref&apos; or &apos;out&apos; parameters on a constructor contradicts the complete concept of the constructor as these parameters solely exist to provide instances of (other types) out of that constructor in addition to the instance that is created and initialized by the constructor..
        /// </summary>
        internal static string MiKo_3074_Description {
            get {
                return ResourceManager.GetString("MiKo_3074_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &apos;{0}&apos;.
        /// </summary>
        internal static string MiKo_3074_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3074_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not define &apos;ref&apos; or &apos;out&apos; parameters on constructors.
        /// </summary>
        internal static string MiKo_3074_Title {
            get {
                return ResourceManager.GetString("MiKo_3074_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Seal class or make it static.
        /// </summary>
        internal static string MiKo_3075_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3075_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, internal and private types should be either static or sealed unless derivation from them is required.
        ///
        ///As with any implementation detail, they can be easily changed if/when derivation is required in the future..
        /// </summary>
        internal static string MiKo_3075_Description {
            get {
                return ResourceManager.GetString("MiKo_3075_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Seal class or make it static.
        /// </summary>
        internal static string MiKo_3075_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3075_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Internal and private types should be either static or sealed unless derivation from them is required.
        /// </summary>
        internal static string MiKo_3075_Title {
            get {
                return ResourceManager.GetString("MiKo_3075_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If a static member initializer uses another member that is defined below or in another type part, then the chance is high that during runtime the static member gets initialized with the wrong value. That&apos;s because the member gets initialized before the other referenced member gets initialized.
        ///
        ///This leads to subtle bugs, such as TypeInitializerExceptions or incorrect values..
        /// </summary>
        internal static string MiKo_3076_Description {
            get {
                return ResourceManager.GetString("MiKo_3076_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Static member initializer refers to static member(s) {1} below or in other type part.
        /// </summary>
        internal static string MiKo_3076_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3076_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not initialize static member with static member below or in other type part.
        /// </summary>
        internal static string MiKo_3076_Title {
            get {
                return ResourceManager.GetString("MiKo_3076_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Apply a default value.
        /// </summary>
        internal static string MiKo_3077_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3077_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Explicitly setting values for properties that return an &apos;Enum&apos; allows to easily spot the (default) value and detect any change.
        ///So it assists in thinking about whether the value is the intended one..
        /// </summary>
        internal static string MiKo_3077_Description {
            get {
                return ResourceManager.GetString("MiKo_3077_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set a default value.
        /// </summary>
        internal static string MiKo_3077_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3077_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Properties that return an Enum should have a default value.
        /// </summary>
        internal static string MiKo_3077_Title {
            get {
                return ResourceManager.GetString("MiKo_3077_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Apply a default value.
        /// </summary>
        internal static string MiKo_3078_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3078_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Explicitly setting values for &apos;Enum&apos; members prevents change of meanings when the Enum gets modified, may it be by adding, removing, renaming or resorting different values..
        /// </summary>
        internal static string MiKo_3078_Description {
            get {
                return ResourceManager.GetString("MiKo_3078_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set a default value.
        /// </summary>
        internal static string MiKo_3078_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3078_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enum members should have a default value.
        /// </summary>
        internal static string MiKo_3078_Title {
            get {
                return ResourceManager.GetString("MiKo_3078_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace with hex value.
        /// </summary>
        internal static string MiKo_3079_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3079_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HResults should be written in hexadecimal and not as negative integers. That makes them much easier to recognize, such as &apos;0x80070005&apos; instead of &apos;-2147024891&apos;..
        /// </summary>
        internal static string MiKo_3079_Description {
            get {
                return ResourceManager.GetString("MiKo_3079_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;unchecked((int)0x{1})&apos; instead for HResult.
        /// </summary>
        internal static string MiKo_3079_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3079_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HResults should be written in hexadecimal.
        /// </summary>
        internal static string MiKo_3079_Title {
            get {
                return ResourceManager.GetString("MiKo_3079_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Code that assigns variables defined inside methods by using switch statements makes the method more complex and difficult to read.
        ///Most times, such code can be simplified by refactoring the complete switch statement into an own method where the different switch sections simply returning the values instead of assigning them to a &apos;shared&apos; variable and do a break afterwards..
        /// </summary>
        internal static string MiKo_3080_Description {
            get {
                return ResourceManager.GetString("MiKo_3080_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place switch statement in separate method and return value within case blocks.
        /// </summary>
        internal static string MiKo_3080_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3080_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;switch ... return&apos; instead of &apos;switch ... break&apos; when assigning variables.
        /// </summary>
        internal static string MiKo_3080_Title {
            get {
                return ResourceManager.GetString("MiKo_3080_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Apply &apos;is false&apos; pattern.
        /// </summary>
        internal static string MiKo_3081_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3081_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logical NOT conditions are hard to recognize if they are coded using the &apos;!&apos; character. Code that uses &apos;is false&apos; is much easier to read and understand..
        /// </summary>
        internal static string MiKo_3081_Description {
            get {
                return ResourceManager.GetString("MiKo_3081_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use pattern &apos;is false&apos; instead of &apos; ! &apos;.
        /// </summary>
        internal static string MiKo_3081_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3081_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prefer pattern matching over a logical NOT condition.
        /// </summary>
        internal static string MiKo_3081_Title {
            get {
                return ResourceManager.GetString("MiKo_3081_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Apply &apos;is&apos; pattern.
        /// </summary>
        internal static string MiKo_3082_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3082_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logical comparisons using the &apos;is&apos; pattern matching are more natural and therefore easier to read and understand than using the &apos;==&apos; operator..
        /// </summary>
        internal static string MiKo_3082_Description {
            get {
                return ResourceManager.GetString("MiKo_3082_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;is&apos; instead of &apos;==&apos;.
        /// </summary>
        internal static string MiKo_3082_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3082_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prefer pattern matching over a logical comparison with &apos;true&apos; or &apos;false&apos;.
        /// </summary>
        internal static string MiKo_3082_Title {
            get {
                return ResourceManager.GetString("MiKo_3082_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Apply &apos;is null&apos; pattern.
        /// </summary>
        internal static string MiKo_3083_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3083_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Null checks using the &apos;is&apos; pattern matching is more natural and therefore easier to read and understand than using the &apos;==&apos; operator..
        /// </summary>
        internal static string MiKo_3083_Description {
            get {
                return ResourceManager.GetString("MiKo_3083_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;is&apos; instead of &apos;==&apos;.
        /// </summary>
        internal static string MiKo_3083_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3083_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prefer pattern matching for null checks.
        /// </summary>
        internal static string MiKo_3083_Title {
            get {
                return ResourceManager.GetString("MiKo_3083_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place constant value on right side.
        /// </summary>
        internal static string MiKo_3084_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3084_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To increase readability, do not place constants on the left side of an operator. Instead, place it on the right side. This makes the code look more natural..
        /// </summary>
        internal static string MiKo_3084_Description {
            get {
                return ResourceManager.GetString("MiKo_3084_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place it on right side of &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_3084_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3084_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not place constants on the left side for comparisons.
        /// </summary>
        internal static string MiKo_3084_Title {
            get {
                return ResourceManager.GetString("MiKo_3084_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Conditional statements which span a lot of characters are hard to read. That makes them harder to maintain.
        ///They should be either short (to see at a glance what&apos;s going on) or refactored into if-else statements..
        /// </summary>
        internal static string MiKo_3085_Description {
            get {
                return ResourceManager.GetString("MiKo_3085_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Shorten conditional or use &apos;if ... else ...&apos; instead.
        /// </summary>
        internal static string MiKo_3085_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3085_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Conditional statements should be short.
        /// </summary>
        internal static string MiKo_3085_Title {
            get {
                return ResourceManager.GetString("MiKo_3085_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nested conditional (or coalesce) statements are hard to read and understand. Therefore such statements should not be nested. Instead, if-else statements should be used..
        /// </summary>
        internal static string MiKo_3086_Description {
            get {
                return ResourceManager.GetString("MiKo_3086_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not nest conditional.
        /// </summary>
        internal static string MiKo_3086_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3086_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not nest conditional statements.
        /// </summary>
        internal static string MiKo_3086_Title {
            get {
                return ResourceManager.GetString("MiKo_3086_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Complex conditions that use negative logic are difficult to understand. Therefore, these should be changed into positiv logic to ease reading..
        /// </summary>
        internal static string MiKo_3087_Description {
            get {
                return ResourceManager.GetString("MiKo_3087_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Condition is difficult to understand, simplify or convert to positive logic.
        /// </summary>
        internal static string MiKo_3087_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3087_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use negative complex conditions.
        /// </summary>
        internal static string MiKo_3087_Title {
            get {
                return ResourceManager.GetString("MiKo_3087_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exceptions should be thrown inside of try or catch blocks (or normal code blocks), but not inside of finally blocks.
        ///Those finally blocks are intended for cleaning stuff up; or to ensure that some code runs in all (except a few) situations..
        /// </summary>
        internal static string MiKo_3090_Description {
            get {
                return ResourceManager.GetString("MiKo_3090_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not throw from finally block.
        /// </summary>
        internal static string MiKo_3090_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3090_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not throw exceptions in finally blocks.
        /// </summary>
        internal static string MiKo_3090_Title {
            get {
                return ResourceManager.GetString("MiKo_3090_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Events should be raised inside of try or catch blocks (or normal code blocks), but not inside of finally blocks.
        ///Those finally blocks are intended for cleaning stuff up..
        /// </summary>
        internal static string MiKo_3091_Description {
            get {
                return ResourceManager.GetString("MiKo_3091_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not raise &apos;{1}&apos; from finally block.
        /// </summary>
        internal static string MiKo_3091_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3091_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not raise events in finally blocks.
        /// </summary>
        internal static string MiKo_3091_Title {
            get {
                return ResourceManager.GetString("MiKo_3091_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To avoid deadlocks, events should never be raised inside of lock statements. Instead, the event handlers should be collected and the event should be raised outside the lock..
        /// </summary>
        internal static string MiKo_3092_Description {
            get {
                return ResourceManager.GetString("MiKo_3092_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not raise event inside lock.
        /// </summary>
        internal static string MiKo_3092_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3092_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not raise events in locks.
        /// </summary>
        internal static string MiKo_3092_Title {
            get {
                return ResourceManager.GetString("MiKo_3092_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To avoid deadlocks, delegates should never be invoked inside of lock statements. Instead, the information needed should be collected inside the lock and the delegate should be invoked outside the lock..
        /// </summary>
        internal static string MiKo_3093_Description {
            get {
                return ResourceManager.GetString("MiKo_3093_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not invoke delegate inside lock.
        /// </summary>
        internal static string MiKo_3093_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3093_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not invoke delegates inside locks.
        /// </summary>
        internal static string MiKo_3093_Title {
            get {
                return ResourceManager.GetString("MiKo_3093_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To avoid deadlocks, methods or properties of parameters should never be invoked inside of lock statements..
        /// </summary>
        internal static string MiKo_3094_Description {
            get {
                return ResourceManager.GetString("MiKo_3094_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not invoke method or property inside lock.
        /// </summary>
        internal static string MiKo_3094_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3094_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not invoke methods or properties of parameters inside locks.
        /// </summary>
        internal static string MiKo_3094_Title {
            get {
                return ResourceManager.GetString("MiKo_3094_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Empty code blocks should contain at least a reasoning comment why the block is empty. This helps developers to understand the reasoning behind and they know for sure that the block is not just accidentally empty..
        /// </summary>
        internal static string MiKo_3095_Description {
            get {
                return ResourceManager.GetString("MiKo_3095_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide a comment that reasons why the block is empty.
        /// </summary>
        internal static string MiKo_3095_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3095_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Code blocks should not be empty.
        /// </summary>
        internal static string MiKo_3095_Title {
            get {
                return ResourceManager.GetString("MiKo_3095_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In case switch statements with a lot of cases simply perform a mapping from one value to the other, the code is easier to read and maintain when a dictionary is used instead of the switch..
        /// </summary>
        internal static string MiKo_3096_Description {
            get {
                return ResourceManager.GetString("MiKo_3096_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use dictionary as map instead of switch.
        /// </summary>
        internal static string MiKo_3096_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3096_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use dictionaries instead of large switch statements.
        /// </summary>
        internal static string MiKo_3096_Title {
            get {
                return ResourceManager.GetString("MiKo_3096_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no benefit in casting a value to a specific type and returning that cast value when the return type is of type object..
        /// </summary>
        internal static string MiKo_3097_Description {
            get {
                return ResourceManager.GetString("MiKo_3097_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not cast to type when returning object.
        /// </summary>
        internal static string MiKo_3097_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3097_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not cast to type and return object.
        /// </summary>
        internal static string MiKo_3097_Title {
            get {
                return ResourceManager.GetString("MiKo_3097_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If messages get suppressed via the [SuppressMessage] attribute, a justification has to be given. That justification has to explain why the message got suppressed so that later on developers have a chance to understand the reasoning behind the suppression..
        /// </summary>
        internal static string MiKo_3098_Description {
            get {
                return ResourceManager.GetString("MiKo_3098_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Explain the reason why the message is suppressed.
        /// </summary>
        internal static string MiKo_3098_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3098_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Justifications of suppressed messages shall explain.
        /// </summary>
        internal static string MiKo_3098_Title {
            get {
                return ResourceManager.GetString("MiKo_3098_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, test classes should be in the exact same namespace as the type they test.
        ///This allows easy usage without any arbitrary using directives. It also mimics the project structure and allows to discover the tests much easier..
        /// </summary>
        internal static string MiKo_3100_Description {
            get {
                return ResourceManager.GetString("MiKo_3100_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place test class in namespace &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_3100_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3100_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test classes and types under test belong in same namespace.
        /// </summary>
        internal static string MiKo_3100_Title {
            get {
                return ResourceManager.GetString("MiKo_3100_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A class that is marked as a unit test class should contain unit tests..
        /// </summary>
        internal static string MiKo_3101_Description {
            get {
                return ResourceManager.GetString("MiKo_3101_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test class should contain tests.
        /// </summary>
        internal static string MiKo_3101_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3101_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test classes should contain tests.
        /// </summary>
        internal static string MiKo_3101_Title {
            get {
                return ResourceManager.GetString("MiKo_3101_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tests should test a very specific scenario. Therefore there is no need to have a condition, because in that situation a test tests more than one scenario.
        ///So having a condition inside a test is a huge code smell..
        /// </summary>
        internal static string MiKo_3102_Description {
            get {
                return ResourceManager.GetString("MiKo_3102_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Refactor test to remove condition.
        /// </summary>
        internal static string MiKo_3102_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3102_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test methods should not contain conditional statements (such as &apos;if&apos;, &apos;switch&apos;, etc.).
        /// </summary>
        internal static string MiKo_3102_Title {
            get {
                return ResourceManager.GetString("MiKo_3102_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use hard-coded GUID.
        /// </summary>
        internal static string MiKo_3103_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3103_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tests should be specific to make them reproducible and easy to maintain. A GUID that is generated is not reproducible at all and cannot be easily found in case a test fails.
        ///Therefore, a hard-coded GUID should be used instead..
        /// </summary>
        internal static string MiKo_3103_Description {
            get {
                return ResourceManager.GetString("MiKo_3103_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use a hard-coded GUID instead.
        /// </summary>
        internal static string MiKo_3103_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3103_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test methods should not use &apos;Guid.NewGuid()&apos;.
        /// </summary>
        internal static string MiKo_3103_Title {
            get {
                return ResourceManager.GetString("MiKo_3103_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove [Combinatorial] attribute.
        /// </summary>
        internal static string MiKo_3104_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3104_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to NUnit&apos;s [Combinatorial] attribute shall be used only if there is a test method that has at least 2 parameters to create the combinatorial. Otherwise there is no reason to mark a test with that attribute..
        /// </summary>
        internal static string MiKo_3104_Description {
            get {
                return ResourceManager.GetString("MiKo_3104_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Wrong usage of [Combinatorial].
        /// </summary>
        internal static string MiKo_3104_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3104_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use NUnit&apos;s [Combinatorial] attribute properly.
        /// </summary>
        internal static string MiKo_3104_Title {
            get {
                return ResourceManager.GetString("MiKo_3104_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Assert.That&apos;.
        /// </summary>
        internal static string MiKo_3105_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3105_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to NUnit&apos;s fluent Assert approach is easier to understand. Following that approach, developers will most times not make the common mistake to mix up the &apos;actual&apos; and &apos;expected&apos; values..
        /// </summary>
        internal static string MiKo_3105_Description {
            get {
                return ResourceManager.GetString("MiKo_3105_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://github.com/nunit/docs/wiki/Constraint-Model.
        /// </summary>
        internal static string MiKo_3105_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_3105_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Assert.That&apos; instead.
        /// </summary>
        internal static string MiKo_3105_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3105_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test methods should use NUnit&apos;s fluent Assert approach.
        /// </summary>
        internal static string MiKo_3105_Title {
            get {
                return ResourceManager.GetString("MiKo_3105_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assertions such as Assert.That(...) that contain operators such as ==, !=, &lt;=, &lt;, &gt;=, &gt; assert for booleans.
        ///The same is valid for patterns such as &apos;is true&apos; or type checks via &apos;is&apos; or the Equals() method.
        ///
        ///If such a test fails it is difficult to understand why it failed. The failure reason gives no useful hint (e.g. &apos;true&apos; expected but &apos;false&apos; received), so the failure needs to be carefully inspected.
        ///At worst the test needs to be debugged to find out what went wrong. That is annoying and becomes even  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MiKo_3106_Description {
            get {
                return ResourceManager.GetString("MiKo_3106_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &apos;{1}&apos; in assertion.
        /// </summary>
        internal static string MiKo_3106_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3106_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assertions should not use equality or comparison operators.
        /// </summary>
        internal static string MiKo_3106_Title {
            get {
                return ResourceManager.GetString("MiKo_3106_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change Moq call to default value.
        /// </summary>
        internal static string MiKo_3107_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3107_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is troublesome to have code that attemps to use Moq mocks but actually does not use them properly. So condition matchers should be used on mocks to setup or verify conditions. Such matchers should not be used on constructors or methods of non-mocks as they don&apos;t make sense there..
        /// </summary>
        internal static string MiKo_3107_Description {
            get {
                return ResourceManager.GetString("MiKo_3107_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use a mock instead.
        /// </summary>
        internal static string MiKo_3107_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3107_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Moq Mock condition matchers should be used on mocks only.
        /// </summary>
        internal static string MiKo_3107_Title {
            get {
                return ResourceManager.GetString("MiKo_3107_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tests should use assertions to check the behavior of the code for correctness. A missing assertion indicates a test that does not check anything and is therefore not meaningful..
        /// </summary>
        internal static string MiKo_3108_Description {
            get {
                return ResourceManager.GetString("MiKo_3108_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add assertion to test.
        /// </summary>
        internal static string MiKo_3108_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3108_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test methods should use assertions.
        /// </summary>
        internal static string MiKo_3108_Title {
            get {
                return ResourceManager.GetString("MiKo_3108_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add default assertion message.
        /// </summary>
        internal static string MiKo_3109_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3109_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assertions should contain messages that tell the reason(s) why something was expected but failed. This makes it easier to understand why a test failed in particular..
        /// </summary>
        internal static string MiKo_3109_Description {
            get {
                return ResourceManager.GetString("MiKo_3109_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide an assertion message.
        /// </summary>
        internal static string MiKo_3109_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3109_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple assertions shall use assertion messages.
        /// </summary>
        internal static string MiKo_3109_Title {
            get {
                return ResourceManager.GetString("MiKo_3109_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Assert.That(..., Has...)&apos;.
        /// </summary>
        internal static string MiKo_3110_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3110_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assertions such as Assert.That(...) using &apos;Count&apos; or &apos;Length&apos; assert for exact values.
        ///If such a test fails it is difficult to find out why it exactly failed as the failure reason gives no useful hint (e.g. &apos;5&apos; expected but &apos;3&apos; received).
        ///
        ///So the failure needs to be carefully inspected. At worst the test needs to be debugged to find out what went wrong.
        ///That is annoying and becomes even more annoying if the test itself is a shaky one.
        ///
        ///In contrast, the failure would be much easier to understand if the [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MiKo_3110_Description {
            get {
                return ResourceManager.GetString("MiKo_3110_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &apos;{0}&apos; in assertion.
        /// </summary>
        internal static string MiKo_3110_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3110_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assertions should not use &apos;Count&apos; or &apos;Length&apos;.
        /// </summary>
        internal static string MiKo_3110_Title {
            get {
                return ResourceManager.GetString("MiKo_3110_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Zero&apos;.
        /// </summary>
        internal static string MiKo_3111_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3111_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For clarity, tests that assert for zero should use &apos;Is.Zero&apos; instead of &apos;Is.EqualTo(0)&apos;..
        /// </summary>
        internal static string MiKo_3111_Description {
            get {
                return ResourceManager.GetString("MiKo_3111_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Zero&apos; instead.
        /// </summary>
        internal static string MiKo_3111_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3111_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assertions should use &apos;Is.Zero&apos; instead of &apos;Is.EqualTo(0)&apos;.
        /// </summary>
        internal static string MiKo_3111_Title {
            get {
                return ResourceManager.GetString("MiKo_3111_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Is.Empty&apos;.
        /// </summary>
        internal static string MiKo_3112_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3112_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For clarity, tests that assert on collections for emptiness should use &apos;Is.Empty&apos; instead of &apos;Has.Count.Zero&apos;..
        /// </summary>
        internal static string MiKo_3112_Description {
            get {
                return ResourceManager.GetString("MiKo_3112_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Is.Empty&apos; instead.
        /// </summary>
        internal static string MiKo_3112_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3112_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assertions should use &apos;Is.Empty&apos; instead of &apos;Has.Count.Zero&apos;.
        /// </summary>
        internal static string MiKo_3112_Title {
            get {
                return ResourceManager.GetString("MiKo_3112_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Assert.That&apos;.
        /// </summary>
        internal static string MiKo_3113_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3113_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to FluentAssertions uses an approach where you define a &apos;Should&apos; method, followed by the assertion. That makes those assertions more difficult to read and spot. In contrast, NUnit&apos;s fluent assertion approach via &apos;Assert.That&apos; is much easier to spot..
        /// </summary>
        internal static string MiKo_3113_Description {
            get {
                return ResourceManager.GetString("MiKo_3113_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Assert.That&apos; instead of &apos;Should&apos;.
        /// </summary>
        internal static string MiKo_3113_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3113_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use FluentAssertions.
        /// </summary>
        internal static string MiKo_3113_Title {
            get {
                return ResourceManager.GetString("MiKo_3113_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Mock.Of&lt;T&gt;()&apos;.
        /// </summary>
        internal static string MiKo_3114_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3114_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance and increase readability, &apos;Mock.Of&lt;T&gt;()&apos; is easier to identify as some necessary but unimportant mock than &apos;new Mock&lt;T&gt;().Object&apos;..
        /// </summary>
        internal static string MiKo_3114_Description {
            get {
                return ResourceManager.GetString("MiKo_3114_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Mock.Of&lt;T&gt;()&apos; instead.
        /// </summary>
        internal static string MiKo_3114_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3114_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Mock.Of&lt;T&gt;()&apos; instead of &apos;new Mock&lt;T&gt;().Object&apos;.
        /// </summary>
        internal static string MiKo_3114_Title {
            get {
                return ResourceManager.GetString("MiKo_3114_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods that are marked as tests but are empty are considered to be kidding developers.
        ///People may think that such methods test something but instead they do not test anything at all. This tricks them into a wrong feeling of &quot;having it tested&quot;.
        ///
        ///It may even be that the contained code is commented out, leading to the question why it is commented out at all. If that code would lead to a failing test, then either the test code is wrong or it would actually have found a bug that should to be adressed..
        /// </summary>
        internal static string MiKo_3115_Description {
            get {
                return ResourceManager.GetString("MiKo_3115_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Delete empty test method or implement a test.
        /// </summary>
        internal static string MiKo_3115_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3115_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test methods should contain code.
        /// </summary>
        internal static string MiKo_3115_Title {
            get {
                return ResourceManager.GetString("MiKo_3115_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods that are marked as unit test initialization methods but are empty are not needed and clutter only the code base. Hence such methods can be removed without fear..
        /// </summary>
        internal static string MiKo_3116_Description {
            get {
                return ResourceManager.GetString("MiKo_3116_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Delete empty test initialization method.
        /// </summary>
        internal static string MiKo_3116_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3116_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test initialization methods should contain code.
        /// </summary>
        internal static string MiKo_3116_Title {
            get {
                return ResourceManager.GetString("MiKo_3116_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods that are marked as unit test cleanup methods but are empty are not needed and clutter only the code base. Hence such methods can be removed without fear..
        /// </summary>
        internal static string MiKo_3117_Description {
            get {
                return ResourceManager.GetString("MiKo_3117_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Delete empty test cleanup method.
        /// </summary>
        internal static string MiKo_3117_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3117_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test cleanup methods should contain code.
        /// </summary>
        internal static string MiKo_3117_Title {
            get {
                return ResourceManager.GetString("MiKo_3117_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tests should be as explicit as possible.
        ///Different Linq calls such as &apos;Skip&apos; or &apos;Take&apos; or &apos;FirstOrDefault&apos; help in production code but are not clear enough when used inside a tests.
        ///For example, if the test uses &apos;Skip&apos;, it is unclear for the reader why the code should skip some values. Hence the reader needs to find out, which costs some time and could be easily avoided when the test would be more explicit here about the outcome..
        /// </summary>
        internal static string MiKo_3118_Description {
            get {
                return ResourceManager.GetString("MiKo_3118_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use ambiguous Linq call &apos;{0}&apos;.
        /// </summary>
        internal static string MiKo_3118_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3118_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test methods should not use ambiguous Linq calls.
        /// </summary>
        internal static string MiKo_3118_Title {
            get {
                return ResourceManager.GetString("MiKo_3118_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invert if to simplify.
        /// </summary>
        internal static string MiKo_3201_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3201_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In case a method contains only a few statements and an if statement simply returns, that if statement can be inverted. Doing so makes the method easier to read..
        /// </summary>
        internal static string MiKo_3201_Description {
            get {
                return ResourceManager.GetString("MiKo_3201_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invert if to simplify.
        /// </summary>
        internal static string MiKo_3201_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3201_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If statements can be inverted in short methods.
        /// </summary>
        internal static string MiKo_3201_Title {
            get {
                return ResourceManager.GetString("MiKo_3201_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invert condition into positive.
        /// </summary>
        internal static string MiKo_3202_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3202_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The code is much easier to read in case it contains an if statement or conditional that has a positive condition and the code returns in all paths..
        /// </summary>
        internal static string MiKo_3202_Description {
            get {
                return ResourceManager.GetString("MiKo_3202_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invert condition into positive.
        /// </summary>
        internal static string MiKo_3202_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3202_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use positive conditions when returning in all paths.
        /// </summary>
        internal static string MiKo_3202_Title {
            get {
                return ResourceManager.GetString("MiKo_3202_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invert if to simplify.
        /// </summary>
        internal static string MiKo_3203_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3203_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In case an if statement contains only a continue statement and is followed also by a single code line, that if statement can be inverted. Doing so makes the method easier to read..
        /// </summary>
        internal static string MiKo_3203_Description {
            get {
                return ResourceManager.GetString("MiKo_3203_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invert if to simplify.
        /// </summary>
        internal static string MiKo_3203_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3203_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If-continue statements can be inverted when followed by single line.
        /// </summary>
        internal static string MiKo_3203_Title {
            get {
                return ResourceManager.GetString("MiKo_3203_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invert if to simplify.
        /// </summary>
        internal static string MiKo_3204_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3204_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In case an if statement has a negative condition but also an else clause, that if statement can be inverted into a positive one. Doing so makes the method easier to read and understand..
        /// </summary>
        internal static string MiKo_3204_Description {
            get {
                return ResourceManager.GetString("MiKo_3204_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invert if to simplify.
        /// </summary>
        internal static string MiKo_3204_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3204_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Negative If statements can be inverted when they have an else clause.
        /// </summary>
        internal static string MiKo_3204_Title {
            get {
                return ResourceManager.GetString("MiKo_3204_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods that share the same name within a type are called overloads. In general, overloads with fewer parameters call the ones with more parameters and provide some default values - that&apos;s why they have fewer parameters.
        ///So, when inheriting is needed and such overload method needs to be overridden by an inherited class, then the overload to override should be the one with the most parameters.
        ///Same applies to abstract methods..
        /// </summary>
        internal static string MiKo_3210_Description {
            get {
                return ResourceManager.GetString("MiKo_3210_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not make method &apos;{0}&apos;.
        /// </summary>
        internal static string MiKo_3210_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3210_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only the longest overloads should be virtual or abstract.
        /// </summary>
        internal static string MiKo_3210_Title {
            get {
                return ResourceManager.GetString("MiKo_3210_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In case a public type contains a finalizable resource, that type should instead have a private nested type (or an internal type when used in multiple classes) that acts as finalizable resource holder.
        ///
        ///The reason is that finalizers are notoriously difficult to implement correctly because they cannot make assumptions about the state of the system during their execution..
        /// </summary>
        internal static string MiKo_3211_Description {
            get {
                return ResourceManager.GetString("MiKo_3211_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use a finalizer.
        /// </summary>
        internal static string MiKo_3211_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3211_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Public types should not have finalizers.
        /// </summary>
        internal static string MiKo_3211_Title {
            get {
                return ResourceManager.GetString("MiKo_3211_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Keep the basic Dispose pattern consistent and do not confuse developers by providing other &quot;Dispose&quot; methods. The only methods called &quot;Dispose&quot; should be the &quot;void IDisposable.Dispose()&quot; and the &quot;void Dispose(bool disposing)&quot; methods.
        ///
        ///All other methods would vary from the Dispose pattern and lead to confusion..
        /// </summary>
        internal static string MiKo_3212_Description {
            get {
                return ResourceManager.GetString("MiKo_3212_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not provide such Dispose method.
        /// </summary>
        internal static string MiKo_3212_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3212_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not confuse developers by providing other Dispose methods.
        /// </summary>
        internal static string MiKo_3212_Title {
            get {
                return ResourceManager.GetString("MiKo_3212_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The public &apos;Dispose()&apos; method should invoke the &apos;Dispose(bool disposing)&apos; method with &apos;disposing&apos; set to &apos;true&apos; as the only call.
        ///All the other calls should be invoked from the &apos;Dispose(bool disposing)&apos; method..
        /// </summary>
        internal static string MiKo_3213_Description {
            get {
                return ResourceManager.GetString("MiKo_3213_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only invoke &apos;Dispose(false)&apos; but nothing more.
        /// </summary>
        internal static string MiKo_3213_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3213_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameterless Dispose method follows Basic Dispose pattern.
        /// </summary>
        internal static string MiKo_3213_Title {
            get {
                return ResourceManager.GetString("MiKo_3213_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If methods start with &apos;Begin&apos; or &apos;Enter&apos; they probably have counterparts that start with &apos;End&apos; or &apos;Exit&apos;. Such methods are considered to define some kind of scope (for example, &apos;BeginUpdate&apos; and &apos;EndUpdate&apos; defines a scope for an update operation).
        ///As it is prone to errors to forget or not correctly invoke the &apos;End&apos; methods (eg. due to exceptions being thrown), those methods should not be made available to the public.
        ///Instead, a method should be made available that returns an &apos;IDisposable&apos; to define that  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MiKo_3214_Description {
            get {
                return ResourceManager.GetString("MiKo_3214_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rename scope-defining method to not start with &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_3214_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3214_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interfaces do not contain &apos;Begin/End&apos; or &apos;Enter/Exit&apos; scope-defining methods.
        /// </summary>
        internal static string MiKo_3214_Title {
            get {
                return ResourceManager.GetString("MiKo_3214_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Convert &apos;Predicate&apos; into &apos;Func&apos;.
        /// </summary>
        internal static string MiKo_3215_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3215_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To standardize delegates and follow the .NET Framework Design Guidelines for callbacks, callbacks of type &apos;Predicate&lt;T&gt;&apos; should be of type &apos;Func&lt;T, bool&gt;&apos; instead..
        /// </summary>
        internal static string MiKo_3215_Description {
            get {
                return ResourceManager.GetString("MiKo_3215_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/events-and-callbacks.
        /// </summary>
        internal static string MiKo_3215_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_3215_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Func&lt;{0}, bool&gt;&apos; instead of &apos;Predicate&lt;{0}&gt;&apos;.
        /// </summary>
        internal static string MiKo_3215_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3215_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Callbacks should be &apos;Func&lt;T, bool&gt;&apos; instead of &apos;Predicate&lt;bool&gt;&apos;.
        /// </summary>
        internal static string MiKo_3215_Title {
            get {
                return ResourceManager.GetString("MiKo_3215_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make field read-only.
        /// </summary>
        internal static string MiKo_3216_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3216_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Static fields that get their values pre-assigned are most probably meant to solely have those values. Therefore such fields should be read-only..
        /// </summary>
        internal static string MiKo_3216_Description {
            get {
                return ResourceManager.GetString("MiKo_3216_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make field read-only.
        /// </summary>
        internal static string MiKo_3216_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3216_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Static fields with initializers should be read-only.
        /// </summary>
        internal static string MiKo_3216_Title {
            get {
                return ResourceManager.GetString("MiKo_3216_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generic types that have other generic types as type arguments are hard to understand and maintain.
        ///This is because it&apos;s hard to find out what&apos;s meant, in addition it seems like there is some type information hiding within the generics due to primitive obsession.
        ///Instead, it would be much easier to see what is meant if non-generic types would be used as type arguments..
        /// </summary>
        internal static string MiKo_3217_Description {
            get {
                return ResourceManager.GetString("MiKo_3217_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use generic type with generic type arguments.
        /// </summary>
        internal static string MiKo_3217_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3217_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use generic types that have other generic types as type arguments.
        /// </summary>
        internal static string MiKo_3217_Title {
            get {
                return ResourceManager.GetString("MiKo_3217_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extension methods are a great way to extend types with additional functionality. Such extension methods are defined in static types specifically designed for that. However, other types that are not intended to contain extension methods should not unexpectedly contain them..
        /// </summary>
        internal static string MiKo_3218_Description {
            get {
                return ResourceManager.GetString("MiKo_3218_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change from extension method into normal static method.
        /// </summary>
        internal static string MiKo_3218_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3218_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not define extension methods in unexpected places.
        /// </summary>
        internal static string MiKo_3218_Title {
            get {
                return ResourceManager.GetString("MiKo_3218_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Public members should provide the right set of functionality for direct consumers of a class. In case extensibility is needed, they should call into a protected virtual member of the same name but suffixed with &apos;Core&apos; which then act as extensibility points and are easy to spot..
        /// </summary>
        internal static string MiKo_3219_Description {
            get {
                return ResourceManager.GetString("MiKo_3219_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;virtual&apos; and provide a &apos;protected virtual {0}&apos; member instead.
        /// </summary>
        internal static string MiKo_3219_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3219_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Public members should not be &apos;virtual&apos;.
        /// </summary>
        internal static string MiKo_3219_Title {
            get {
                return ResourceManager.GetString("MiKo_3219_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use lambda expression body.
        /// </summary>
        internal static string MiKo_3301_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3301_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using parenthesized lambda expressions with blocks that contain a single statement leads to some noise caused by the braces. Lambda expressions with expression bodies avoid that noise. So they should be used instead..
        /// </summary>
        internal static string MiKo_3301_Description {
            get {
                return ResourceManager.GetString("MiKo_3301_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use lambda expression body instead.
        /// </summary>
        internal static string MiKo_3301_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3301_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Favor lambda expression bodies instead of parenthesized lambda expression blocks for single statements.
        /// </summary>
        internal static string MiKo_3301_Title {
            get {
                return ResourceManager.GetString("MiKo_3301_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove braces around parameter.
        /// </summary>
        internal static string MiKo_3302_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3302_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using parenthesized lambda expressions with a single parameter leads to some noise caused by the braces. Simple lambda expressions with expression bodies avoid that noise. So they should be used instead..
        /// </summary>
        internal static string MiKo_3302_Description {
            get {
                return ResourceManager.GetString("MiKo_3302_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use simple lambda expression body instead.
        /// </summary>
        internal static string MiKo_3302_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3302_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Favor simple lambda expression bodies instead of parenthesized lambda expression bodies for single parameters.
        /// </summary>
        internal static string MiKo_3302_Title {
            get {
                return ResourceManager.GetString("MiKo_3302_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Namespaces should have only a limited depth. If a namespace hierarchy becomes too deep, then the namespaces are probably too concrete or special to make sense.
        ///Such namespaces should be flattened..
        /// </summary>
        internal static string MiKo_3401_Description {
            get {
                return ResourceManager.GetString("MiKo_3401_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Namespace hierarchy too deep: {1,4} (max. {2}).
        /// </summary>
        internal static string MiKo_3401_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3401_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Namespace hierarchies should not be too deep.
        /// </summary>
        internal static string MiKo_3401_Title {
            get {
                return ResourceManager.GetString("MiKo_3401_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove suppressed nullable warning.
        /// </summary>
        internal static string MiKo_3501_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3501_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suppressing nullable warnings on Null-conditional operators is confusing to developers. Either something can be null or it cannot be null; but it cannot be both null and not null..
        /// </summary>
        internal static string MiKo_3501_Description {
            get {
                return ResourceManager.GetString("MiKo_3501_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not suppress nullable warning.
        /// </summary>
        internal static string MiKo_3501_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3501_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not suppress nullable warnings on Null-conditional operators.
        /// </summary>
        internal static string MiKo_3501_Title {
            get {
                return ResourceManager.GetString("MiKo_3501_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove suppressed nullable warning.
        /// </summary>
        internal static string MiKo_3502_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_3502_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suppressing nullable warnings on Linq calls that can return &apos;null&apos; is confusing to developers. Either something can be null or it cannot be null; but it cannot be both null and not null..
        /// </summary>
        internal static string MiKo_3502_Description {
            get {
                return ResourceManager.GetString("MiKo_3502_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not suppress nullable warning.
        /// </summary>
        internal static string MiKo_3502_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3502_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not suppress nullable warnings on Linq calls.
        /// </summary>
        internal static string MiKo_3502_Title {
            get {
                return ResourceManager.GetString("MiKo_3502_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place and order method side-by-side with overloads.
        /// </summary>
        internal static string MiKo_4001_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_4001_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods that have the same name but a different number of parameters should be ordered in a way so that each method with fewer parameters is ordered before a method with more parameters..
        /// </summary>
        internal static string MiKo_4001_Description {
            get {
                return ResourceManager.GetString("MiKo_4001_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Order methods in following way:
        ///{1}
        ///.
        /// </summary>
        internal static string MiKo_4001_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_4001_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods with same name should be ordered based on the number of their parameters.
        /// </summary>
        internal static string MiKo_4001_Title {
            get {
                return ResourceManager.GetString("MiKo_4001_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place method side-by-side with overloads.
        /// </summary>
        internal static string MiKo_4002_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_4002_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods that have the same name should be placed side-by-side so that those methods can be easily found together..
        /// </summary>
        internal static string MiKo_4002_Description {
            get {
                return ResourceManager.GetString("MiKo_4002_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place method &apos;{0}&apos; side-by-side with following other methods:
        ///{1}
        ///.
        /// </summary>
        internal static string MiKo_4002_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_4002_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods with same name and accessibility should be placed side-by-side.
        /// </summary>
        internal static string MiKo_4002_Title {
            get {
                return ResourceManager.GetString("MiKo_4002_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place &apos;Dispose&apos; directly after all ctors and finalizers.
        /// </summary>
        internal static string MiKo_4003_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_4003_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ctors, finalizers and Dispose methods are all directly related to the lifetime of an object. Therefore, they belong together and should be placed side by side..
        /// </summary>
        internal static string MiKo_4003_Description {
            get {
                return ResourceManager.GetString("MiKo_4003_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place &apos;Dispose&apos; directly after all ctors and finalizers.
        /// </summary>
        internal static string MiKo_4003_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_4003_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dispose methods should be placed directly after constructors and finalizers.
        /// </summary>
        internal static string MiKo_4003_Title {
            get {
                return ResourceManager.GetString("MiKo_4003_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place &apos;Dispose&apos; method first.
        /// </summary>
        internal static string MiKo_4004_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_4004_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dispose methods are all directly related to the lifetime of an object. Therefore, they should be placed before all other methods of the same accessibility..
        /// </summary>
        internal static string MiKo_4004_Description {
            get {
                return ResourceManager.GetString("MiKo_4004_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place &apos;Dispose&apos; method first.
        /// </summary>
        internal static string MiKo_4004_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_4004_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dispose methods should be placed before all other methods of the same accessibility.
        /// </summary>
        internal static string MiKo_4004_Title {
            get {
                return ResourceManager.GetString("MiKo_4004_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place interface directly after type declaration.
        /// </summary>
        internal static string MiKo_4005_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_4005_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease reading, the interface that gives the type its name should be listed as first interface. All the other implemented interfaces should be placed behind..
        /// </summary>
        internal static string MiKo_4005_Description {
            get {
                return ResourceManager.GetString("MiKo_4005_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place &apos;{1}&apos; as first interface directly after type declaration.
        /// </summary>
        internal static string MiKo_4005_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_4005_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The interface that gives a type its name should be placed directly after the type&apos;s declaration.
        /// </summary>
        internal static string MiKo_4005_Title {
            get {
                return ResourceManager.GetString("MiKo_4005_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place method after one-time methods and before test cleanup and all other test methods.
        /// </summary>
        internal static string MiKo_4101_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_4101_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test initialization method define the most common parts that tests shall contain. So to ease their finding they should be ordered directly after all one-time methods and before all other methods..
        /// </summary>
        internal static string MiKo_4101_Description {
            get {
                return ResourceManager.GetString("MiKo_4101_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place test initialization method after [OneTimeSetUp] / [OneTimeTearDown] methods and before test cleanup and all other test methods.
        /// </summary>
        internal static string MiKo_4101_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_4101_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test initialization methods should be ordered directly after One-Time methods.
        /// </summary>
        internal static string MiKo_4101_Title {
            get {
                return ResourceManager.GetString("MiKo_4101_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place method after test initialization methods and before all test methods.
        /// </summary>
        internal static string MiKo_4102_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_4102_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test cleanup methods define the common parts that shall be executed after any test has been finished. So to ease their finding they should be ordered before the test methods..
        /// </summary>
        internal static string MiKo_4102_Description {
            get {
                return ResourceManager.GetString("MiKo_4102_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place test cleanup method after test initialization methods and before all test methods.
        /// </summary>
        internal static string MiKo_4102_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_4102_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test cleanup methods should be ordered after test initialization methods and before test methods.
        /// </summary>
        internal static string MiKo_4102_Title {
            get {
                return ResourceManager.GetString("MiKo_4102_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place method before all other methods.
        /// </summary>
        internal static string MiKo_4103_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_4103_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One-Time test initialization method define the most common parts that the test environment shall have. So to ease their finding they should be ordered first..
        /// </summary>
        internal static string MiKo_4103_Description {
            get {
                return ResourceManager.GetString("MiKo_4103_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place [OneTimeSetUp] method before all other methods.
        /// </summary>
        internal static string MiKo_4103_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_4103_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One-Time test initialization methods should be ordered before all other methods.
        /// </summary>
        internal static string MiKo_4103_Title {
            get {
                return ResourceManager.GetString("MiKo_4103_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place method directly after [OneTimeSetUp] method and before all other methods.
        /// </summary>
        internal static string MiKo_4104_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_4104_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One-Time test cleanup methods define the common parts that shall be executed after all tests have been finished, to clean up the test environment. So to ease their finding they should be ordered directly after the One-Time test initialization methods..
        /// </summary>
        internal static string MiKo_4104_Description {
            get {
                return ResourceManager.GetString("MiKo_4104_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place [OneTimeTearDown] method directly after [OneTimeSetUp] method and before all other methods.
        /// </summary>
        internal static string MiKo_4104_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_4104_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One-Time test cleanup methods should be ordered directly after One-Time test initialization methods.
        /// </summary>
        internal static string MiKo_4104_Title {
            get {
                return ResourceManager.GetString("MiKo_4104_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place inside &apos;if&apos;.
        /// </summary>
        internal static string MiKo_5001_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_5001_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For performance reasons, &apos;IsDebugEnabled&apos; should be invoked before the &apos;Debug&apos; or &apos;DebugFormat&apos; methods get invoked as those require messages to be created. That creation (and the garbage collection of them as well) is not needed if the &apos;Debug&apos; log level is not set..
        /// </summary>
        internal static string MiKo_5001_Description {
            get {
                return ResourceManager.GetString("MiKo_5001_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invoke &apos;{2}&apos; before invoking &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_5001_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_5001_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;Debug&apos; and &apos;DebugFormat&apos; methods should be invoked only after &apos;IsDebugEnabled&apos;.
        /// </summary>
        internal static string MiKo_5001_Title {
            get {
                return ResourceManager.GetString("MiKo_5001_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace with non-&apos;Format&apos; method.
        /// </summary>
        internal static string MiKo_5002_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_5002_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For performance reasons, &apos;xxxFormat&apos; methods (such as &apos;DebugFormat&apos;) should be invoked only with arguments to format the string. Otherwise, the corresponding non-formatting methods (such as &apos;Debug&apos;) should be invoked..
        /// </summary>
        internal static string MiKo_5002_Description {
            get {
                return ResourceManager.GetString("MiKo_5002_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invoke &apos;{2}&apos; instead.
        /// </summary>
        internal static string MiKo_5002_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_5002_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;xxxFormat&apos; methods should be invoked with multiple arguments only.
        /// </summary>
        internal static string MiKo_5002_Title {
            get {
                return ResourceManager.GetString("MiKo_5002_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log methods (such as &apos;Debug&apos;, &apos;Info&apos;, &apos;Warn&apos;, ...) provide an overload that takes an Exception. In case an Exception shall be logged, those Log methods should be invoked instead of those without Exception parameter.
        ///That allows the Log framework to log not only the name of the exception but also additional information (such as it&apos;s stack trace)..
        /// </summary>
        internal static string MiKo_5003_Description {
            get {
                return ResourceManager.GetString("MiKo_5003_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invoke &apos;{1}&apos; overload with exception parameter.
        /// </summary>
        internal static string MiKo_5003_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_5003_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Correct Log methods should be invoked for exceptions.
        /// </summary>
        internal static string MiKo_5003_Title {
            get {
                return ResourceManager.GetString("MiKo_5003_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace &apos;Equals&apos; by &apos;==&apos;.
        /// </summary>
        internal static string MiKo_5010_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_5010_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For performance reasons, it makes no sense to use &apos;object.Equals()&apos; on value types. Value types get boxed and unboxed when being casted to objects. That puts unnecessary pressure on the garbage collector as temporary objects are created and immediately get garbage collected.
        ///
        ///Instead the equality operator should be used to compare value types..
        /// </summary>
        internal static string MiKo_5010_Description {
            get {
                return ResourceManager.GetString("MiKo_5010_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;==&apos; operator instead of &apos;{1}&apos;.
        /// </summary>
        internal static string MiKo_5010_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_5010_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &apos;object.Equals()&apos; on value types.
        /// </summary>
        internal static string MiKo_5010_Title {
            get {
                return ResourceManager.GetString("MiKo_5010_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For performance reasons (and to avoid large pressure on the garbage collector) strings should be concatenated with &apos;string.Concat()&apos;, &apos;string.Join()&apos; or by using a &apos;StringBuilder&apos;..
        /// </summary>
        internal static string MiKo_5011_Description {
            get {
                return ResourceManager.GetString("MiKo_5011_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;string.Concat()&apos; or &apos;string.Join()&apos; instead.
        /// </summary>
        internal static string MiKo_5011_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_5011_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not concatenate strings with += operator.
        /// </summary>
        internal static string MiKo_5011_Title {
            get {
                return ResourceManager.GetString("MiKo_5011_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to From performance point of view it is a bad idea to let methods that use yield invoke themselves recursively. The underlying iterators are called much more times than intended, thus leading to an unexpectedly bad performance..
        /// </summary>
        internal static string MiKo_5012_Description {
            get {
                return ResourceManager.GetString("MiKo_5012_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://stackoverflow.com/questions/3969963/when-not-to-use-yield-return.
        /// </summary>
        internal static string MiKo_5012_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_5012_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use yield recursively.
        /// </summary>
        internal static string MiKo_5012_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_5012_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &apos;yield return&apos; for recursively defined structures.
        /// </summary>
        internal static string MiKo_5012_Title {
            get {
                return ResourceManager.GetString("MiKo_5012_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Array.Empty&lt;&gt;()&apos;.
        /// </summary>
        internal static string MiKo_5013_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_5013_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To avoid unnecessary memory consumption and pressure on the garbage collector, empty arrays should not be created manually. Instead, the method &apos;Array.Empty&lt;T&gt;()&apos; should be used..
        /// </summary>
        internal static string MiKo_5013_Description {
            get {
                return ResourceManager.GetString("MiKo_5013_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not create empty array.
        /// </summary>
        internal static string MiKo_5013_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_5013_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not create empty arrays.
        /// </summary>
        internal static string MiKo_5013_Title {
            get {
                return ResourceManager.GetString("MiKo_5013_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Array.Empty&lt;&gt;()&apos;.
        /// </summary>
        internal static string MiKo_5014_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_5014_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To avoid unnecessary memory consumption and pressure on the garbage collector, empty lists should not be created manually. Instead, the method &apos;Array.Empty&lt;T&gt;()&apos; should be used..
        /// </summary>
        internal static string MiKo_5014_Description {
            get {
                return ResourceManager.GetString("MiKo_5014_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not create empty lists.
        /// </summary>
        internal static string MiKo_5014_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_5014_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not create empty lists if the return value is read-only.
        /// </summary>
        internal static string MiKo_5014_Title {
            get {
                return ResourceManager.GetString("MiKo_5014_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove unneeded call to string.Intern().
        /// </summary>
        internal static string MiKo_5015_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_5015_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interning string literals does not make sense as these literals are already interned..
        /// </summary>
        internal static string MiKo_5015_Description {
            get {
                return ResourceManager.GetString("MiKo_5015_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not intern string literal.
        /// </summary>
        internal static string MiKo_5015_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_5015_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not intern string literals.
        /// </summary>
        internal static string MiKo_5015_Title {
            get {
                return ResourceManager.GetString("MiKo_5015_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For performance reasons, when using a &apos;.Contains()&apos; call inside an call of &apos;List.RemoveAll(...)&apos;, that &apos;Contains&apos; call should be done on a HashSet. This is because that call has a complexity of O(1) for the lookup.
        ///When used e.g. on a list, that &apos;Contains&apos; call has to loop over that list again and again for each single element to look up, leading to a much worse runtime experience..
        /// </summary>
        internal static string MiKo_5016_Description {
            get {
                return ResourceManager.GetString("MiKo_5016_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use a HashSet for the lookup.
        /// </summary>
        internal static string MiKo_5016_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_5016_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use a HashSet for lookups in &apos;List.RemoveAll&apos;.
        /// </summary>
        internal static string MiKo_5016_Title {
            get {
                return ResourceManager.GetString("MiKo_5016_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Convert to constant.
        /// </summary>
        internal static string MiKo_5017_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_5017_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To avoid unnecessary memory consumptions, string literals that are used as field or variable values should be constant..
        /// </summary>
        internal static string MiKo_5017_Description {
            get {
                return ResourceManager.GetString("MiKo_5017_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Convert to constant.
        /// </summary>
        internal static string MiKo_5017_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_5017_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fields or variables assigned with string literals should be constant.
        /// </summary>
        internal static string MiKo_5017_Title {
            get {
                return ResourceManager.GetString("MiKo_5017_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround with blank lines.
        /// </summary>
        internal static string MiKo_6001_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6001_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To separate Logging visually from the business code, they should be surrounded by blank lines. That makes them easier to spot and ignore..
        /// </summary>
        internal static string MiKo_6001_Description {
            get {
                return ResourceManager.GetString("MiKo_6001_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround log statement(s) with blank lines.
        /// </summary>
        internal static string MiKo_6001_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6001_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log statements should be surrounded by blank lines.
        /// </summary>
        internal static string MiKo_6001_Title {
            get {
                return ResourceManager.GetString("MiKo_6001_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround with blank lines.
        /// </summary>
        internal static string MiKo_6002_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6002_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To separate Assertions visually from the test code, they should be surrounded by blank lines. That makes them easier to spot and ignore..
        /// </summary>
        internal static string MiKo_6002_Description {
            get {
                return ResourceManager.GetString("MiKo_6002_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround assertion statement(s) with blank lines.
        /// </summary>
        internal static string MiKo_6002_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6002_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assertion statements should be surrounded by blank lines.
        /// </summary>
        internal static string MiKo_6002_Title {
            get {
                return ResourceManager.GetString("MiKo_6002_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Precede with blank line.
        /// </summary>
        internal static string MiKo_6003_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6003_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To separate local variables visually from executing code, they should be preceded by blank lines. That makes them easier to spot..
        /// </summary>
        internal static string MiKo_6003_Description {
            get {
                return ResourceManager.GetString("MiKo_6003_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Precede local variable with a blank line.
        /// </summary>
        internal static string MiKo_6003_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6003_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Local variable statements should be preceded by blank lines.
        /// </summary>
        internal static string MiKo_6003_Title {
            get {
                return ResourceManager.GetString("MiKo_6003_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Precede with blank line.
        /// </summary>
        internal static string MiKo_6004_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6004_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To separate variable assignments visually from executing code, they should be preceded by blank lines. That makes them easier to spot..
        /// </summary>
        internal static string MiKo_6004_Description {
            get {
                return ResourceManager.GetString("MiKo_6004_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Precede variable assignment with a blank line.
        /// </summary>
        internal static string MiKo_6004_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6004_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variable assignment statements should be preceded by blank lines.
        /// </summary>
        internal static string MiKo_6004_Title {
            get {
                return ResourceManager.GetString("MiKo_6004_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Precede with blank line.
        /// </summary>
        internal static string MiKo_6005_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6005_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To separate method returns visually from executing code, they should be preceded by blank lines. That makes them easier to spot..
        /// </summary>
        internal static string MiKo_6005_Description {
            get {
                return ResourceManager.GetString("MiKo_6005_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Precede return statement with a blank line.
        /// </summary>
        internal static string MiKo_6005_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6005_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Return statements should be preceded by blank lines.
        /// </summary>
        internal static string MiKo_6005_Title {
            get {
                return ResourceManager.GetString("MiKo_6005_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround with blank lines.
        /// </summary>
        internal static string MiKo_6006_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6006_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To separate awaited statements visually from other code, they should be surrounded by blank lines. That makes them easier to spot..
        /// </summary>
        internal static string MiKo_6006_Description {
            get {
                return ResourceManager.GetString("MiKo_6006_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround awaited statement with a blank line.
        /// </summary>
        internal static string MiKo_6006_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6006_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Awaited statements should be surrounded by blank lines.
        /// </summary>
        internal static string MiKo_6006_Title {
            get {
                return ResourceManager.GetString("MiKo_6006_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround with blank lines.
        /// </summary>
        internal static string MiKo_6007_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6007_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To separate test statements visually from other code, they should be surrounded by blank lines. That makes them easier to spot..
        /// </summary>
        internal static string MiKo_6007_Description {
            get {
                return ResourceManager.GetString("MiKo_6007_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround test statement with a blank line.
        /// </summary>
        internal static string MiKo_6007_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6007_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test statements should be surrounded by blank lines.
        /// </summary>
        internal static string MiKo_6007_Title {
            get {
                return ResourceManager.GetString("MiKo_6007_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Precede with blank line.
        /// </summary>
        internal static string MiKo_6008_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6008_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To separate using directives for a specific namespace visually from other using directives for other namespaces, they should be preceded by blank lines. That makes them easier to spot..
        /// </summary>
        internal static string MiKo_6008_Description {
            get {
                return ResourceManager.GetString("MiKo_6008_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Precede using directive with a blank line.
        /// </summary>
        internal static string MiKo_6008_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6008_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using directives should be preceded by blank lines.
        /// </summary>
        internal static string MiKo_6008_Title {
            get {
                return ResourceManager.GetString("MiKo_6008_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround with blank lines.
        /// </summary>
        internal static string MiKo_6009_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6009_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To separate try statements visually from other code, they should be surrounded by blank lines. That makes them easier to spot..
        /// </summary>
        internal static string MiKo_6009_Description {
            get {
                return ResourceManager.GetString("MiKo_6009_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround &apos;try&apos; statement with a blank line.
        /// </summary>
        internal static string MiKo_6009_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6009_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Try statements should be surrounded by blank lines.
        /// </summary>
        internal static string MiKo_6009_Title {
            get {
                return ResourceManager.GetString("MiKo_6009_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround with blank lines.
        /// </summary>
        internal static string MiKo_6010_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6010_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To separate if statements visually from other code, they should be surrounded by blank lines. That makes them easier to spot..
        /// </summary>
        internal static string MiKo_6010_Description {
            get {
                return ResourceManager.GetString("MiKo_6010_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround &apos;if&apos; statement with a blank line.
        /// </summary>
        internal static string MiKo_6010_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6010_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If statements should be surrounded by blank lines.
        /// </summary>
        internal static string MiKo_6010_Title {
            get {
                return ResourceManager.GetString("MiKo_6010_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround with blank lines.
        /// </summary>
        internal static string MiKo_6011_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6011_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To separate lock statements visually from other code, they should be surrounded by blank lines. That makes them easier to spot..
        /// </summary>
        internal static string MiKo_6011_Description {
            get {
                return ResourceManager.GetString("MiKo_6011_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround &apos;lock&apos; statement with a blank line.
        /// </summary>
        internal static string MiKo_6011_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6011_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lock statements should be surrounded by blank lines.
        /// </summary>
        internal static string MiKo_6011_Title {
            get {
                return ResourceManager.GetString("MiKo_6011_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround with blank lines.
        /// </summary>
        internal static string MiKo_6012_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6012_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To separate foreach loops visually from other code, they should be surrounded by blank lines. That makes them easier to spot..
        /// </summary>
        internal static string MiKo_6012_Description {
            get {
                return ResourceManager.GetString("MiKo_6012_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround &apos;foreach&apos; loop with a blank line.
        /// </summary>
        internal static string MiKo_6012_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6012_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to foreach loops should be surrounded by blank lines.
        /// </summary>
        internal static string MiKo_6012_Title {
            get {
                return ResourceManager.GetString("MiKo_6012_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround with blank lines.
        /// </summary>
        internal static string MiKo_6013_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6013_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To separate for loops visually from other code, they should be surrounded by blank lines. That makes them easier to spot..
        /// </summary>
        internal static string MiKo_6013_Description {
            get {
                return ResourceManager.GetString("MiKo_6013_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround &apos;for&apos; loop with a blank line.
        /// </summary>
        internal static string MiKo_6013_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6013_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to for loops should be surrounded by blank lines.
        /// </summary>
        internal static string MiKo_6013_Title {
            get {
                return ResourceManager.GetString("MiKo_6013_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround with blank lines.
        /// </summary>
        internal static string MiKo_6014_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6014_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To separate while loops visually from other code, they should be surrounded by blank lines. That makes them easier to spot..
        /// </summary>
        internal static string MiKo_6014_Description {
            get {
                return ResourceManager.GetString("MiKo_6014_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround &apos;while&apos; loop with a blank line.
        /// </summary>
        internal static string MiKo_6014_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6014_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to while loops should be surrounded by blank lines.
        /// </summary>
        internal static string MiKo_6014_Title {
            get {
                return ResourceManager.GetString("MiKo_6014_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround with blank lines.
        /// </summary>
        internal static string MiKo_6015_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6015_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To separate do/while loops visually from other code, they should be surrounded by blank lines. That makes them easier to spot..
        /// </summary>
        internal static string MiKo_6015_Description {
            get {
                return ResourceManager.GetString("MiKo_6015_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround &apos;do/while&apos; loop with a blank line.
        /// </summary>
        internal static string MiKo_6015_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6015_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to do/while loops should be surrounded by blank lines.
        /// </summary>
        internal static string MiKo_6015_Title {
            get {
                return ResourceManager.GetString("MiKo_6015_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround with blank lines.
        /// </summary>
        internal static string MiKo_6016_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6016_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To separate using statements visually from other code, they should be surrounded by blank lines. That makes them easier to spot..
        /// </summary>
        internal static string MiKo_6016_Description {
            get {
                return ResourceManager.GetString("MiKo_6016_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround &apos;using&apos; with a blank line.
        /// </summary>
        internal static string MiKo_6016_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6016_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using statements should be surrounded by blank lines.
        /// </summary>
        internal static string MiKo_6016_Title {
            get {
                return ResourceManager.GetString("MiKo_6016_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround with blank lines.
        /// </summary>
        internal static string MiKo_6017_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6017_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To separate switch statements visually from other code, they should be surrounded by blank lines. That makes them easier to spot..
        /// </summary>
        internal static string MiKo_6017_Description {
            get {
                return ResourceManager.GetString("MiKo_6017_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround &apos;switch&apos; with a blank line.
        /// </summary>
        internal static string MiKo_6017_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6017_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to switch statements should be surrounded by blank lines.
        /// </summary>
        internal static string MiKo_6017_Title {
            get {
                return ResourceManager.GetString("MiKo_6017_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround with blank lines.
        /// </summary>
        internal static string MiKo_6018_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6018_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To separate break statements visually from other code, they should be surrounded by blank lines. That makes them easier to spot..
        /// </summary>
        internal static string MiKo_6018_Description {
            get {
                return ResourceManager.GetString("MiKo_6018_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround &apos;break&apos; with a blank line.
        /// </summary>
        internal static string MiKo_6018_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6018_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to break statements should be surrounded by blank lines.
        /// </summary>
        internal static string MiKo_6018_Title {
            get {
                return ResourceManager.GetString("MiKo_6018_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround with blank lines.
        /// </summary>
        internal static string MiKo_6019_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6019_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To separate continue statements visually from other code, they should be surrounded by blank lines. That makes them easier to spot..
        /// </summary>
        internal static string MiKo_6019_Description {
            get {
                return ResourceManager.GetString("MiKo_6019_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround &apos;continue&apos; with a blank line.
        /// </summary>
        internal static string MiKo_6019_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6019_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to continue statements should be surrounded by blank lines.
        /// </summary>
        internal static string MiKo_6019_Title {
            get {
                return ResourceManager.GetString("MiKo_6019_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround with blank lines.
        /// </summary>
        internal static string MiKo_6020_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6020_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To separate throw statements visually from other code, they should be surrounded by blank lines. That makes them easier to spot..
        /// </summary>
        internal static string MiKo_6020_Description {
            get {
                return ResourceManager.GetString("MiKo_6020_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround &apos;throw&apos; with a blank line.
        /// </summary>
        internal static string MiKo_6020_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6020_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to throw statements should be surrounded by blank lines.
        /// </summary>
        internal static string MiKo_6020_Title {
            get {
                return ResourceManager.GetString("MiKo_6020_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround with blank lines.
        /// </summary>
        internal static string MiKo_6021_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6021_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To separate ThrowIfNull statements visually from other code, they should be surrounded by blank lines. That makes them easier to spot..
        /// </summary>
        internal static string MiKo_6021_Description {
            get {
                return ResourceManager.GetString("MiKo_6021_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround &apos;ThrowIfNull&apos; with a blank line.
        /// </summary>
        internal static string MiKo_6021_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6021_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ArgumentNullException.ThrowIfNull statements should be surrounded by blank lines.
        /// </summary>
        internal static string MiKo_6021_Title {
            get {
                return ResourceManager.GetString("MiKo_6021_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround with blank lines.
        /// </summary>
        internal static string MiKo_6022_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6022_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To separate ThrowIfNullOrEmpty statements visually from other code, they should be surrounded by blank lines. That makes them easier to spot..
        /// </summary>
        internal static string MiKo_6022_Description {
            get {
                return ResourceManager.GetString("MiKo_6022_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround &apos;ThrowIfNullOrEmpty&apos; with a blank line.
        /// </summary>
        internal static string MiKo_6022_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6022_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ArgumentException.ThrowIfNullOrEmpty statements should be surrounded by blank lines.
        /// </summary>
        internal static string MiKo_6022_Title {
            get {
                return ResourceManager.GetString("MiKo_6022_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround with blank lines.
        /// </summary>
        internal static string MiKo_6023_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6023_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To separate ThrowIf statements visually from other code, they should be surrounded by blank lines. That makes them easier to spot..
        /// </summary>
        internal static string MiKo_6023_Description {
            get {
                return ResourceManager.GetString("MiKo_6023_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround &apos;ThrowIf&apos; with a blank line.
        /// </summary>
        internal static string MiKo_6023_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6023_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ArgumentOutOfRangeException.ThrowIf statements should be surrounded by blank lines.
        /// </summary>
        internal static string MiKo_6023_Title {
            get {
                return ResourceManager.GetString("MiKo_6023_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround with blank lines.
        /// </summary>
        internal static string MiKo_6024_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6024_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To separate ThrowIf statements visually from other code, they should be surrounded by blank lines. That makes them easier to spot..
        /// </summary>
        internal static string MiKo_6024_Description {
            get {
                return ResourceManager.GetString("MiKo_6024_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround &apos;ThrowIf&apos; with a blank line.
        /// </summary>
        internal static string MiKo_6024_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6024_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ObjectDisposedException.ThrowIf statements should be surrounded by blank lines.
        /// </summary>
        internal static string MiKo_6024_Title {
            get {
                return ResourceManager.GetString("MiKo_6024_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Align open brace directly below type.
        /// </summary>
        internal static string MiKo_6030_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6030_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To indicate the initializations and to distinguish them from blocks (such as if blocks), the open brace of the initializer should be positioned directly below the corresponding type definition..
        /// </summary>
        internal static string MiKo_6030_Description {
            get {
                return ResourceManager.GetString("MiKo_6030_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Align open brace directly below type.
        /// </summary>
        internal static string MiKo_6030_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6030_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open braces of initializers should be placed directly below the corresponding type definition.
        /// </summary>
        internal static string MiKo_6030_Title {
            get {
                return ResourceManager.GetString("MiKo_6030_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Align ternary operator directly below condition.
        /// </summary>
        internal static string MiKo_6031_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6031_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To easily spot the 2 possibilities of ternary operators based on their conditions, the question and colon tokens should be positioned directly below the corresponding condition..
        /// </summary>
        internal static string MiKo_6031_Description {
            get {
                return ResourceManager.GetString("MiKo_6031_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Align ternary operator directly below condition.
        /// </summary>
        internal static string MiKo_6031_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6031_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Question and colon tokens of ternary operators should be placed directly below the corresponding condition.
        /// </summary>
        internal static string MiKo_6031_Title {
            get {
                return ResourceManager.GetString("MiKo_6031_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Align parameter outdented below method.
        /// </summary>
        internal static string MiKo_6032_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6032_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To easily spot the multi-line parameters of a method, those parameters should be positioned outdented below the corresponding method declaration..
        /// </summary>
        internal static string MiKo_6032_Description {
            get {
                return ResourceManager.GetString("MiKo_6032_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Align parameter &apos;{0}&apos; outdented below method.
        /// </summary>
        internal static string MiKo_6032_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6032_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multi-line parameters are positioned outdented at end of method.
        /// </summary>
        internal static string MiKo_6032_Title {
            get {
                return ResourceManager.GetString("MiKo_6032_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Align open brace directly below case.
        /// </summary>
        internal static string MiKo_6033_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6033_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Similar to if statements case sections within a switch statement represent conditions to check. In case such a condition matches, the corresponding block gets executed.
        ///Hence, as it is a block similar to the if block(s), the open brace of the block should be positioned directly below the corresponding case keyword..
        /// </summary>
        internal static string MiKo_6033_Description {
            get {
                return ResourceManager.GetString("MiKo_6033_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Align open brace directly below case.
        /// </summary>
        internal static string MiKo_6033_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6033_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Braces of blocks below case sections should be placed directly below the corresponding case keyword.
        /// </summary>
        internal static string MiKo_6033_Title {
            get {
                return ResourceManager.GetString("MiKo_6033_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place dot on same line.
        /// </summary>
        internal static string MiKo_6034_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6034_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The code is easier to read if the dots are placed on the same line(s) as the invoked members..
        /// </summary>
        internal static string MiKo_6034_Description {
            get {
                return ResourceManager.GetString("MiKo_6034_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place dot on same line as member.
        /// </summary>
        internal static string MiKo_6034_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6034_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dots should be placed on same line(s) as invoked members.
        /// </summary>
        internal static string MiKo_6034_Title {
            get {
                return ResourceManager.GetString("MiKo_6034_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place parenthesis on same line.
        /// </summary>
        internal static string MiKo_6035_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6035_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The code is easier to read if the open parenthesis are placed on the same line(s) as the invoked methods..
        /// </summary>
        internal static string MiKo_6035_Description {
            get {
                return ResourceManager.GetString("MiKo_6035_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place open parenthesis on same line as invocation.
        /// </summary>
        internal static string MiKo_6035_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6035_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open parenthesis should be placed on same line(s) as invoked methods.
        /// </summary>
        internal static string MiKo_6035_Title {
            get {
                return ResourceManager.GetString("MiKo_6035_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Align block directly below arrow.
        /// </summary>
        internal static string MiKo_6036_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6036_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To easily distinguish lambda blocks from other code blocks, these blocks should be positioned either in line with or directly below the corresponding arrow..
        /// </summary>
        internal static string MiKo_6036_Description {
            get {
                return ResourceManager.GetString("MiKo_6036_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Align lambda block directly below arrow.
        /// </summary>
        internal static string MiKo_6036_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6036_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lambda blocks should be placed directly below the corresponding arrow(s).
        /// </summary>
        internal static string MiKo_6036_Title {
            get {
                return ResourceManager.GetString("MiKo_6036_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place argument on same line as invocation.
        /// </summary>
        internal static string MiKo_6037_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6037_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The code is easier to read if single arguments are placed on the same line(s) as the invoked methods..
        /// </summary>
        internal static string MiKo_6037_Description {
            get {
                return ResourceManager.GetString("MiKo_6037_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place argument on same line as invocation.
        /// </summary>
        internal static string MiKo_6037_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6037_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Single arguments should be placed on same line(s) as invoked methods.
        /// </summary>
        internal static string MiKo_6037_Title {
            get {
                return ResourceManager.GetString("MiKo_6037_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place cast on same line.
        /// </summary>
        internal static string MiKo_6038_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6038_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The code is easier to read if casts are placed on the same line(s)..
        /// </summary>
        internal static string MiKo_6038_Description {
            get {
                return ResourceManager.GetString("MiKo_6038_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place cast on same line.
        /// </summary>
        internal static string MiKo_6038_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6038_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Casts should be placed on same line(s).
        /// </summary>
        internal static string MiKo_6038_Title {
            get {
                return ResourceManager.GetString("MiKo_6038_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place return value on same line as return keyword.
        /// </summary>
        internal static string MiKo_6039_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6039_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The code is easier to read if return keywords and return values are placed on the same line(s)..
        /// </summary>
        internal static string MiKo_6039_Description {
            get {
                return ResourceManager.GetString("MiKo_6039_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place return value on same line as return keyword.
        /// </summary>
        internal static string MiKo_6039_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6039_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Return values should be placed on same line(s) as return keywords.
        /// </summary>
        internal static string MiKo_6039_Title {
            get {
                return ResourceManager.GetString("MiKo_6039_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indent dots.
        /// </summary>
        internal static string MiKo_6040_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6040_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The code is easier to read if consecutive invocations that span multiple lines are aligned by their dots..
        /// </summary>
        internal static string MiKo_6040_Description {
            get {
                return ResourceManager.GetString("MiKo_6040_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indent dots.
        /// </summary>
        internal static string MiKo_6040_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6040_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Consecutive invocations spaning multiple lines should be aligned by their dots.
        /// </summary>
        internal static string MiKo_6040_Title {
            get {
                return ResourceManager.GetString("MiKo_6040_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place assignment on same line.
        /// </summary>
        internal static string MiKo_6041_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6041_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The code is easier to read if assignments are placed on the same line(s)..
        /// </summary>
        internal static string MiKo_6041_Description {
            get {
                return ResourceManager.GetString("MiKo_6041_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place assignment on same line.
        /// </summary>
        internal static string MiKo_6041_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6041_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assignments should be placed on same line(s).
        /// </summary>
        internal static string MiKo_6041_Title {
            get {
                return ResourceManager.GetString("MiKo_6041_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place new keyword on same line as type.
        /// </summary>
        internal static string MiKo_6042_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6042_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The code is easier to read if object creations are placed on the same line(s)..
        /// </summary>
        internal static string MiKo_6042_Description {
            get {
                return ResourceManager.GetString("MiKo_6042_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place new keyword on same line as type.
        /// </summary>
        internal static string MiKo_6042_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6042_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;new&apos; keywords should be placed on same line(s) as the types.
        /// </summary>
        internal static string MiKo_6042_Title {
            get {
                return ResourceManager.GetString("MiKo_6042_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place lambda on single line.
        /// </summary>
        internal static string MiKo_6043_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6043_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance and code reading, lambdas with expression bodies should be placed on a single line. The code is harder to read when placed on different lines..
        /// </summary>
        internal static string MiKo_6043_Description {
            get {
                return ResourceManager.GetString("MiKo_6043_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place lambda on single line.
        /// </summary>
        internal static string MiKo_6043_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6043_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expression bodies of lambdas should be placed on same line as lambda itself when fitting.
        /// </summary>
        internal static string MiKo_6043_Title {
            get {
                return ResourceManager.GetString("MiKo_6043_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place operator on same line as right operand.
        /// </summary>
        internal static string MiKo_6044_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6044_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The code is easier to read if binary operators such as &apos;&amp;&amp;&apos; or &apos;||&apos; are placed on the same line(s) as their operands on the right side..
        /// </summary>
        internal static string MiKo_6044_Description {
            get {
                return ResourceManager.GetString("MiKo_6044_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place operator on same line as right operand.
        /// </summary>
        internal static string MiKo_6044_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6044_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binary operators such as &apos;&amp;&amp;&apos; or &apos;||&apos; should be placed on same line(s) as their right operands.
        /// </summary>
        internal static string MiKo_6044_Title {
            get {
                return ResourceManager.GetString("MiKo_6044_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place comparison on same line.
        /// </summary>
        internal static string MiKo_6045_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6045_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The code is easier to read if comparison operators such as &apos;==&apos; or &apos;!=&apos; are placed on the same line(s) as their operands..
        /// </summary>
        internal static string MiKo_6045_Description {
            get {
                return ResourceManager.GetString("MiKo_6045_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place comparison on same line.
        /// </summary>
        internal static string MiKo_6045_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6045_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Comparisons using operators such as &apos;==&apos; or &apos;!=&apos; should be placed on same line(s).
        /// </summary>
        internal static string MiKo_6045_Title {
            get {
                return ResourceManager.GetString("MiKo_6045_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place calculation on same line.
        /// </summary>
        internal static string MiKo_6046_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6046_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The code is easier to read if calculations operators such as &apos;+&apos; or &apos;%&apos; are placed on the same line(s) as their operands..
        /// </summary>
        internal static string MiKo_6046_Description {
            get {
                return ResourceManager.GetString("MiKo_6046_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place calculation on same line.
        /// </summary>
        internal static string MiKo_6046_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6046_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Calculations using operators such as &apos;+&apos; or &apos;%&apos; should be placed on same line(s).
        /// </summary>
        internal static string MiKo_6046_Title {
            get {
                return ResourceManager.GetString("MiKo_6046_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Align open brace directly below switch.
        /// </summary>
        internal static string MiKo_6047_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6047_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Switch expressions are very similar to switch statements.
        ///Hence, the open brace of the expression should be positioned directly below the corresponding switch keyword..
        /// </summary>
        internal static string MiKo_6047_Description {
            get {
                return ResourceManager.GetString("MiKo_6047_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Align open brace directly below switch.
        /// </summary>
        internal static string MiKo_6047_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6047_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Braces of switch expressions should be placed directly below the corresponding switch keyword.
        /// </summary>
        internal static string MiKo_6047_Title {
            get {
                return ResourceManager.GetString("MiKo_6047_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place condition on single line.
        /// </summary>
        internal static string MiKo_6048_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6048_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logical conditions that span multiple lines are hard to read and understand. To be easier to understand they should span a single line only..
        /// </summary>
        internal static string MiKo_6048_Description {
            get {
                return ResourceManager.GetString("MiKo_6048_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place condition on single line.
        /// </summary>
        internal static string MiKo_6048_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6048_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logical conditions should be placed on a single line.
        /// </summary>
        internal static string MiKo_6048_Title {
            get {
                return ResourceManager.GetString("MiKo_6048_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround with blank lines.
        /// </summary>
        internal static string MiKo_6049_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6049_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To separate event (un-)registrations visually from other code, they should be surrounded by blank lines. That makes them easier to spot..
        /// </summary>
        internal static string MiKo_6049_Description {
            get {
                return ResourceManager.GetString("MiKo_6049_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Surround event (un-)registration with a blank line.
        /// </summary>
        internal static string MiKo_6049_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6049_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Event (un-)registrations should be surrounded by blank lines.
        /// </summary>
        internal static string MiKo_6049_Title {
            get {
                return ResourceManager.GetString("MiKo_6049_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Align argument outdented below method call.
        /// </summary>
        internal static string MiKo_6050_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6050_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To easily spot the multi-line arguments of a method call, those arguments should be positioned outdented below the corresponding method call..
        /// </summary>
        internal static string MiKo_6050_Description {
            get {
                return ResourceManager.GetString("MiKo_6050_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Align argument &apos;{0}&apos; outdented below method call.
        /// </summary>
        internal static string MiKo_6050_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6050_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multi-line arguments are positioned outdented at end of method call.
        /// </summary>
        internal static string MiKo_6050_Title {
            get {
                return ResourceManager.GetString("MiKo_6050_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place colon on same line as constructor call.
        /// </summary>
        internal static string MiKo_6051_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6051_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The code is easier to read if the colons leading the calls of other constructors are placed on the same line as the calls themselves..
        /// </summary>
        internal static string MiKo_6051_Description {
            get {
                return ResourceManager.GetString("MiKo_6051_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place colon on same line as constructor call.
        /// </summary>
        internal static string MiKo_6051_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6051_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Colon of constructor call shall be placed on same line as constructor call.
        /// </summary>
        internal static string MiKo_6051_Title {
            get {
                return ResourceManager.GetString("MiKo_6051_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place colon on same line as first base type.
        /// </summary>
        internal static string MiKo_6052_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6052_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The code is easier to read if the colons leading the list of base types are placed on the same line as the first base types..
        /// </summary>
        internal static string MiKo_6052_Description {
            get {
                return ResourceManager.GetString("MiKo_6052_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place colon on same line as first base type.
        /// </summary>
        internal static string MiKo_6052_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6052_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Colon of list of base types shall be placed on same line as first base type.
        /// </summary>
        internal static string MiKo_6052_Title {
            get {
                return ResourceManager.GetString("MiKo_6052_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place argument on single line.
        /// </summary>
        internal static string MiKo_6053_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6053_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The code is easier to read if &apos;single-line&apos; arguments are placed on a single line instead of splitting them over multiple lines..
        /// </summary>
        internal static string MiKo_6053_Description {
            get {
                return ResourceManager.GetString("MiKo_6053_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place argument on single line.
        /// </summary>
        internal static string MiKo_6053_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6053_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Single-line arguments shall be placed on single line.
        /// </summary>
        internal static string MiKo_6053_Title {
            get {
                return ResourceManager.GetString("MiKo_6053_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place lambda on same line.
        /// </summary>
        internal static string MiKo_6054_CodeFixTitle {
            get {
                return ResourceManager.GetString("MiKo_6054_CodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The code is easier to read if the arrow of lambdas are placed on a the same line as the parameters or their expression bodies instead of splitting them all over multiple lines..
        /// </summary>
        internal static string MiKo_6054_Description {
            get {
                return ResourceManager.GetString("MiKo_6054_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place lambda on same line.
        /// </summary>
        internal static string MiKo_6054_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_6054_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lambda arrows shall be placed on same line as parameters and expression bodies.
        /// </summary>
        internal static string MiKo_6054_Title {
            get {
                return ResourceManager.GetString("MiKo_6054_Title", resourceCulture);
            }
        }
    }
}
