//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MiKoSolutions.Analyzers {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MiKoSolutions.Analyzers.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should be short to ease reading and maintenance (SRP, SLoA)..
        /// </summary>
        public static string MiKo_0001_Description {
            get {
                return ResourceManager.GetString("MiKo_0001_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Too many LoC: {1,4} (max. {2}).
        /// </summary>
        public static string MiKo_0001_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_0001_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method is too big..
        /// </summary>
        public static string MiKo_0001_Title {
            get {
                return ResourceManager.GetString("MiKo_0001_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should be simple to ease maintenance (KISS).
        ///Following code constructs increase the Cyclomatic Complexity (CC) by +1:
        ///    if | while | for | foreach | case | continue | goto | &amp;&amp; | || | catch | catch when | ternary operator ?: | ?? | ?..
        /// </summary>
        public static string MiKo_0002_Description {
            get {
                return ResourceManager.GetString("MiKo_0002_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Too high CC: {1,4} (max. {2}).
        /// </summary>
        public static string MiKo_0002_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_0002_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method is too complex..
        /// </summary>
        public static string MiKo_0002_Title {
            get {
                return ResourceManager.GetString("MiKo_0002_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Types should be limited in their size to ease reading and maintenance (SRP)..
        /// </summary>
        public static string MiKo_0003_Description {
            get {
                return ResourceManager.GetString("MiKo_0003_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Too many LoC: {1,4} (max. {2}).
        /// </summary>
        public static string MiKo_0003_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_0003_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type is too big..
        /// </summary>
        public static string MiKo_0003_Title {
            get {
                return ResourceManager.GetString("MiKo_0003_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To follow the SRP, methods should have as few parameters as possible..
        /// </summary>
        public static string MiKo_0004_Description {
            get {
                return ResourceManager.GetString("MiKo_0004_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Too many parameters: {1,4} (max. {2}).
        /// </summary>
        public static string MiKo_0004_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_0004_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should not have too many parameters..
        /// </summary>
        public static string MiKo_0004_Title {
            get {
                return ResourceManager.GetString("MiKo_0004_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, parameters that inherit from &apos;System.EventArgs&apos; should be named &apos;e&apos; ..
        /// </summary>
        public static string MiKo_1001_Description {
            get {
                return ResourceManager.GetString("MiKo_1001_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/event.
        /// </summary>
        public static string MiKo_1001_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_1001_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1001_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1001_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;System.EventArgs&apos; parameters on methods should be named properly..
        /// </summary>
        public static string MiKo_1001_Title {
            get {
                return ResourceManager.GetString("MiKo_1001_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To follow the .NET Framework Guidelines, parameters of event handlers should be named &apos;sender&apos; and &apos;e&apos;..
        /// </summary>
        public static string MiKo_1002_Description {
            get {
                return ResourceManager.GetString("MiKo_1002_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/event.
        /// </summary>
        public static string MiKo_1002_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_1002_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1002_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1002_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter names do not follow .NET Framework Guidelines for event handlers..
        /// </summary>
        public static string MiKo_1002_Title {
            get {
                return ResourceManager.GetString("MiKo_1002_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Event handlers should start with &apos;On&apos;, followed by the name of the event, to indicate that they handle events..
        /// </summary>
        public static string MiKo_1003_Description {
            get {
                return ResourceManager.GetString("MiKo_1003_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://docs.microsoft.com/en-us/dotnet/csharp/event-pattern.
        /// </summary>
        public static string MiKo_1003_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_1003_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1003_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1003_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Event handling method name does not follow the .NET Framework Best Practices..
        /// </summary>
        public static string MiKo_1003_Title {
            get {
                return ResourceManager.GetString("MiKo_1003_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;Event&apos; as suffix in event names is noise and should be avoided..
        /// </summary>
        public static string MiKo_1004_Description {
            get {
                return ResourceManager.GetString("MiKo_1004_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1004_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1004_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Events should not contain term &apos;Event&apos; in their names..
        /// </summary>
        public static string MiKo_1004_Title {
            get {
                return ResourceManager.GetString("MiKo_1004_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, variables that are of type &apos;System.EventArgs&apos; (or any inheritors) should be named &apos;e&apos;..
        /// </summary>
        public static string MiKo_1005_Description {
            get {
                return ResourceManager.GetString("MiKo_1005_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1005_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1005_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;System.EventArgs&apos; variables should be named properly..
        /// </summary>
        public static string MiKo_1005_Title {
            get {
                return ResourceManager.GetString("MiKo_1005_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Events shall use &apos;EventHandler&lt;T&gt;&apos; where &apos;T&apos; is a class inherited from &apos;System.EventArgs&apos; that is named after the event.
        ///Example: A &apos;Loaded&apos; event should use an &apos;EventHandler&lt;LoadedEventArgs&gt;&apos;..
        /// </summary>
        public static string MiKo_1006_Description {
            get {
                return ResourceManager.GetString("MiKo_1006_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;EventHandler&lt;{1}&gt;&apos; instead.
        /// </summary>
        public static string MiKo_1006_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1006_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Events shall use &apos;EventHandler&lt;T&gt;&apos; with properly named &apos;EventArgs&apos; as &apos;T&apos;..
        /// </summary>
        public static string MiKo_1006_Title {
            get {
                return ResourceManager.GetString("MiKo_1006_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Events and the event arguments they use belong together logically. Hence, both should be located in the same namespace..
        /// </summary>
        public static string MiKo_1007_Description {
            get {
                return ResourceManager.GetString("MiKo_1007_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Used &apos;{1}&apos; should be in namespace &apos;{2}&apos;.
        /// </summary>
        public static string MiKo_1007_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1007_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Events and &apos;EventArgs&apos; types shall be located in the same namespace..
        /// </summary>
        public static string MiKo_1007_Title {
            get {
                return ResourceManager.GetString("MiKo_1007_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To follow the .NET Framework Guidelines, parameters of DependencyProperty event handlers should be named &apos;d&apos; and &apos;e&apos;..
        /// </summary>
        public static string MiKo_1008_Description {
            get {
                return ResourceManager.GetString("MiKo_1008_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1008_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1008_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter names do not follow .NET Framework Guidelines for DependencyProperty event handlers..
        /// </summary>
        public static string MiKo_1008_Title {
            get {
                return ResourceManager.GetString("MiKo_1008_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The purpose of methods is to execute code, so it&apos;s useless and repetitive to have &apos;CanExecute&apos; or &apos;Execute&apos; in their names..
        /// </summary>
        public static string MiKo_1010_Description {
            get {
                return ResourceManager.GetString("MiKo_1010_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1010_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1010_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should not contain &apos;CanExecute&apos; or &apos;Execute&apos; in their names..
        /// </summary>
        public static string MiKo_1010_Title {
            get {
                return ResourceManager.GetString("MiKo_1010_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The purpose of methods is to execute code, so it&apos;s useless and repetitive to have &apos;Do&apos; in their names..
        /// </summary>
        public static string MiKo_1011_Description {
            get {
                return ResourceManager.GetString("MiKo_1011_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1011_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1011_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should not contain &apos;Do&apos; in their names..
        /// </summary>
        public static string MiKo_1011_Title {
            get {
                return ResourceManager.GetString("MiKo_1011_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The term &apos;Fire&apos; is a negative term. Employees get fired (or guns), but not events. Events get raised. So use &apos;Raise&apos; instead..
        /// </summary>
        public static string MiKo_1012_Description {
            get {
                return ResourceManager.GetString("MiKo_1012_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1012_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1012_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should not be named &apos;Fire&apos;..
        /// </summary>
        public static string MiKo_1012_Title {
            get {
                return ResourceManager.GetString("MiKo_1012_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Many times, the term &apos;Notify&apos; indicates that an event shall be raised. In such case, the prefix &apos;On&apos; should be used instead.
        ///Example: Instead of &apos;NotifyPropertyChanged&apos; use &apos;OnPropertyChanged&apos;..
        /// </summary>
        public static string MiKo_1013_Description {
            get {
                return ResourceManager.GetString("MiKo_1013_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use term &apos;Notify&apos;.
        /// </summary>
        public static string MiKo_1013_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1013_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should not be named &apos;Notify&apos; or &apos;OnNotify&apos;..
        /// </summary>
        public static string MiKo_1013_Title {
            get {
                return ResourceManager.GetString("MiKo_1013_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The term &apos;Check&apos; is ambiguous. If validation of parameters is meant, use something like &apos;Validate&apos; or &apos;Verify&apos;. If a check for a specific state is meant, use &apos;Is&apos;, &apos;Can&apos; or &apos;Has&apos; instead..
        /// </summary>
        public static string MiKo_1014_Description {
            get {
                return ResourceManager.GetString("MiKo_1014_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use ambiguous term &apos;Check&apos;.
        /// </summary>
        public static string MiKo_1014_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1014_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should not be named &apos;Check&apos;..
        /// </summary>
        public static string MiKo_1014_Title {
            get {
                return ResourceManager.GetString("MiKo_1014_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The term &apos;Init&apos; is a lazy abbreviation and should not be used. &apos;Initialize&apos; should be used instead..
        /// </summary>
        public static string MiKo_1015_Description {
            get {
                return ResourceManager.GetString("MiKo_1015_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1015_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1015_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should not be named &apos;Init&apos;..
        /// </summary>
        public static string MiKo_1015_Title {
            get {
                return ResourceManager.GetString("MiKo_1015_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The method belongs to a factory and therefore its name should be started with &apos;Create&apos;..
        /// </summary>
        public static string MiKo_1016_Description {
            get {
                return ResourceManager.GetString("MiKo_1016_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start name with &apos;Create&apos;.
        /// </summary>
        public static string MiKo_1016_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1016_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Factory methods should be named &apos;Create&apos;..
        /// </summary>
        public static string MiKo_1016_Title {
            get {
                return ResourceManager.GetString("MiKo_1016_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should not be prefixed with &apos;Get&apos; or &apos;Set&apos; if followed by &apos;Is&apos;, &apos;Can&apos; or &apos;Has&apos;. That &apos;Get&apos; or &apos;Set&apos; is just additional noise and should be avoided..
        /// </summary>
        public static string MiKo_1017_Description {
            get {
                return ResourceManager.GetString("MiKo_1017_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1017_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1017_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should not be prefixed with &apos;Get&apos; or &apos;Set&apos; if followed by &apos;Is&apos;, &apos;Can&apos; or &apos;Has&apos;..
        /// </summary>
        public static string MiKo_1017_Title {
            get {
                return ResourceManager.GetString("MiKo_1017_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should not be suffixed with a noun form of a verb if the verb would fit perfectly as method name..
        /// </summary>
        public static string MiKo_1018_Description {
            get {
                return ResourceManager.GetString("MiKo_1018_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1018_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1018_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should not be suffixed with noun of a verb..
        /// </summary>
        public static string MiKo_1018_Title {
            get {
                return ResourceManager.GetString("MiKo_1018_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods that are named &apos;Remove&apos; and have no parameters should be named &apos;Clear&apos; instead as they do not remove parameters.
        ///Methods that are named &apos;Clear&apos; and have parameters should be named &apos;Remove&apos; instead as they do not clear the item..
        /// </summary>
        public static string MiKo_1019_Description {
            get {
                return ResourceManager.GetString("MiKo_1019_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1019_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1019_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;Clear&apos; and &apos;Remove&apos; methods should be named based on their number of parameters..
        /// </summary>
        public static string MiKo_1019_Title {
            get {
                return ResourceManager.GetString("MiKo_1019_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Names that have a lot of characters are hard to read when being used. This makes writing code and doing code reviews much harder..
        /// </summary>
        public static string MiKo_1020_Description {
            get {
                return ResourceManager.GetString("MiKo_1020_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type name exceeds limit of {2} chars by {1}.
        /// </summary>
        public static string MiKo_1020_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1020_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type names should be limited in length..
        /// </summary>
        public static string MiKo_1020_Title {
            get {
                return ResourceManager.GetString("MiKo_1020_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Names that have a lot of characters are hard to read when being used. This makes writing code and doing code reviews much harder..
        /// </summary>
        public static string MiKo_1021_Description {
            get {
                return ResourceManager.GetString("MiKo_1021_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method name exceeds limit of {2} chars by {1}.
        /// </summary>
        public static string MiKo_1021_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1021_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method names should be limited in length..
        /// </summary>
        public static string MiKo_1021_Title {
            get {
                return ResourceManager.GetString("MiKo_1021_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Names that have a lot of characters are hard to read when being used. This makes writing code and doing code reviews much harder..
        /// </summary>
        public static string MiKo_1022_Description {
            get {
                return ResourceManager.GetString("MiKo_1022_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter name exceeds limit of {2} chars by {1}.
        /// </summary>
        public static string MiKo_1022_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1022_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter names should be limited in length..
        /// </summary>
        public static string MiKo_1022_Title {
            get {
                return ResourceManager.GetString("MiKo_1022_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Names that have a lot of characters are hard to read when being used. This makes writing code and doing code reviews much harder..
        /// </summary>
        public static string MiKo_1023_Description {
            get {
                return ResourceManager.GetString("MiKo_1023_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Field name exceeds limit of {2} chars by {1}.
        /// </summary>
        public static string MiKo_1023_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1023_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Field names should be limited in length..
        /// </summary>
        public static string MiKo_1023_Title {
            get {
                return ResourceManager.GetString("MiKo_1023_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Names that have a lot of characters are hard to read when being used. This makes writing code and doing code reviews much harder..
        /// </summary>
        public static string MiKo_1024_Description {
            get {
                return ResourceManager.GetString("MiKo_1024_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property name exceeds limit of {2} chars by {1}.
        /// </summary>
        public static string MiKo_1024_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1024_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property names should be limited in length..
        /// </summary>
        public static string MiKo_1024_Title {
            get {
                return ResourceManager.GetString("MiKo_1024_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Names that have a lot of characters are hard to read when being used. This makes writing code and doing code reviews much harder..
        /// </summary>
        public static string MiKo_1025_Description {
            get {
                return ResourceManager.GetString("MiKo_1025_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Event name exceeds limit of {2} chars by {1}.
        /// </summary>
        public static string MiKo_1025_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1025_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Event names should be limited in length..
        /// </summary>
        public static string MiKo_1025_Title {
            get {
                return ResourceManager.GetString("MiKo_1025_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Names that have a lot of characters are hard to read when being used. This makes writing code and doing code reviews much harder..
        /// </summary>
        public static string MiKo_1026_Description {
            get {
                return ResourceManager.GetString("MiKo_1026_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variable name exceeds limit of {2} chars by {1}.
        /// </summary>
        public static string MiKo_1026_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1026_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variable names should be limited in length..
        /// </summary>
        public static string MiKo_1026_Title {
            get {
                return ResourceManager.GetString("MiKo_1026_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicating that a type is a base type by putting &apos;Abstract&apos; or &apos;Base&apos; in its name does not make sense. Every interface or class that is not sealed can act as a base class..
        /// </summary>
        public static string MiKo_1030_Description {
            get {
                return ResourceManager.GetString("MiKo_1030_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;{1}&apos; from name.
        /// </summary>
        public static string MiKo_1030_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1030_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Types should not have an &apos;Abstract&apos; or &apos;Base&apos; marker to indicate that they are base types..
        /// </summary>
        public static string MiKo_1030_Title {
            get {
                return ResourceManager.GetString("MiKo_1030_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicating that a type is an entity by using &apos;Model&apos; as its suffix does not make sense. Entities should not be suffixed at all. (eg. &apos;User&apos; instead of &apos;UserModel&apos;).
        /// </summary>
        public static string MiKo_1031_Description {
            get {
                return ResourceManager.GetString("MiKo_1031_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1031_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1031_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Entity types should not use a &apos;Model&apos; suffix..
        /// </summary>
        public static string MiKo_1031_Title {
            get {
                return ResourceManager.GetString("MiKo_1031_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicating that a method deals with an entity by using &apos;Model&apos; in its name does not make sense..
        /// </summary>
        public static string MiKo_1032_Description {
            get {
                return ResourceManager.GetString("MiKo_1032_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1032_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1032_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods dealing with entities should not use a &apos;Model&apos; marker..
        /// </summary>
        public static string MiKo_1032_Title {
            get {
                return ResourceManager.GetString("MiKo_1032_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicating that a parameter is an entity by using &apos;Model&apos; as its suffix does not make sense. Entities should not be suffixed at all. (eg. &apos;user&apos; instead of &apos;userModel&apos;).
        /// </summary>
        public static string MiKo_1033_Description {
            get {
                return ResourceManager.GetString("MiKo_1033_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1033_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1033_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameters representing entities should not use a &apos;Model&apos; suffix..
        /// </summary>
        public static string MiKo_1033_Title {
            get {
                return ResourceManager.GetString("MiKo_1033_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicating that a field is an entity by using &apos;Model&apos; as its suffix does not make sense. Entities should not be suffixed at all. (eg. &apos;user&apos; instead of &apos;userModel&apos;).
        /// </summary>
        public static string MiKo_1034_Description {
            get {
                return ResourceManager.GetString("MiKo_1034_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1034_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1034_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fields representing entities should not use a &apos;Model&apos; suffix..
        /// </summary>
        public static string MiKo_1034_Title {
            get {
                return ResourceManager.GetString("MiKo_1034_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicating that a property deals with an entity by using &apos;Model&apos; in its name does not make sense..
        /// </summary>
        public static string MiKo_1035_Description {
            get {
                return ResourceManager.GetString("MiKo_1035_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1035_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1035_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Properties dealing with entities should not use a &apos;Model&apos; marker..
        /// </summary>
        public static string MiKo_1035_Title {
            get {
                return ResourceManager.GetString("MiKo_1035_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicating that an event deals with an entity by using &apos;Model&apos; in its name does not make sense..
        /// </summary>
        public static string MiKo_1036_Description {
            get {
                return ResourceManager.GetString("MiKo_1036_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1036_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1036_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Events dealing with entities should not use a &apos;Model&apos; marker..
        /// </summary>
        public static string MiKo_1036_Title {
            get {
                return ResourceManager.GetString("MiKo_1036_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicating that a type is an Enum by using &apos;Enum&apos; as its suffix does not make sense..
        /// </summary>
        public static string MiKo_1037_Description {
            get {
                return ResourceManager.GetString("MiKo_1037_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1037_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1037_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Types should not be suffixed with &apos;Enum&apos;..
        /// </summary>
        public static string MiKo_1037_Title {
            get {
                return ResourceManager.GetString("MiKo_1037_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, the names of classes that contain extension methods should end with the same suffix..
        /// </summary>
        public static string MiKo_1038_Description {
            get {
                return ResourceManager.GetString("MiKo_1038_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End name with &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1038_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1038_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Classes that contain extension methods should end with same suffix..
        /// </summary>
        public static string MiKo_1038_Title {
            get {
                return ResourceManager.GetString("MiKo_1038_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, the &apos;this&apos; parameter of extension methods should have a default name..
        /// </summary>
        public static string MiKo_1039_Description {
            get {
                return ResourceManager.GetString("MiKo_1039_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it {1}.
        /// </summary>
        public static string MiKo_1039_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1039_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;this&apos; parameter of extension methods should have a default name..
        /// </summary>
        public static string MiKo_1039_Title {
            get {
                return ResourceManager.GetString("MiKo_1039_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suffixes on parameter names (such as &apos;List&apos;) are noise and should be avoided..
        /// </summary>
        public static string MiKo_1040_Description {
            get {
                return ResourceManager.GetString("MiKo_1040_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1040_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1040_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameters should not be suffixed with implementation details..
        /// </summary>
        public static string MiKo_1040_Title {
            get {
                return ResourceManager.GetString("MiKo_1040_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suffixes on field names (such as &apos;List&apos;) are noise and should be avoided..
        /// </summary>
        public static string MiKo_1041_Description {
            get {
                return ResourceManager.GetString("MiKo_1041_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1041_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1041_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fields should not be suffixed with implementation details..
        /// </summary>
        public static string MiKo_1041_Title {
            get {
                return ResourceManager.GetString("MiKo_1041_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, and being consistent with the .NET Framework classes, &apos;CancellationToken&apos; parameters should have a very specific name..
        /// </summary>
        public static string MiKo_1042_Description {
            get {
                return ResourceManager.GetString("MiKo_1042_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1042_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1042_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;CancellationToken&apos; parameters should have specific name..
        /// </summary>
        public static string MiKo_1042_Title {
            get {
                return ResourceManager.GetString("MiKo_1042_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, &apos;CancellationToken&apos; variables should have a very specific name..
        /// </summary>
        public static string MiKo_1043_Description {
            get {
                return ResourceManager.GetString("MiKo_1043_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1043_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1043_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;CancellationToken&apos; variables should have specific name..
        /// </summary>
        public static string MiKo_1043_Title {
            get {
                return ResourceManager.GetString("MiKo_1043_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, add the suffix &apos;Command&apos;..
        /// </summary>
        public static string MiKo_1044_Description {
            get {
                return ResourceManager.GetString("MiKo_1044_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add &apos;{1}&apos; as suffix.
        /// </summary>
        public static string MiKo_1044_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1044_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Commands should be suffixed with &apos;Command&apos;..
        /// </summary>
        public static string MiKo_1044_Title {
            get {
                return ResourceManager.GetString("MiKo_1044_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, remove the suffix &apos;Command&apos; as the method itself is invoked by a command..
        /// </summary>
        public static string MiKo_1045_Description {
            get {
                return ResourceManager.GetString("MiKo_1045_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1045_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1045_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods that are invoked by commands should not be suffixed with &apos;Command&apos;..
        /// </summary>
        public static string MiKo_1045_Title {
            get {
                return ResourceManager.GetString("MiKo_1045_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, methods that follow the Task-based Asynchronous Pattern (TAP) should be suffixed with &apos;Async&apos;..
        /// </summary>
        public static string MiKo_1046_Description {
            get {
                return ResourceManager.GetString("MiKo_1046_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://docs.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.
        /// </summary>
        public static string MiKo_1046_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_1046_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1046_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1046_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Asynchronous methods should follow the Task-based Asynchronous Pattern (TAP)..
        /// </summary>
        public static string MiKo_1046_Title {
            get {
                return ResourceManager.GetString("MiKo_1046_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, methods that do not follow the Task-based Asynchronous Pattern (TAP) should not be suffixed with &apos;Async&apos; as that would indicate that they would follow the pattern..
        /// </summary>
        public static string MiKo_1047_Description {
            get {
                return ResourceManager.GetString("MiKo_1047_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://docs.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.
        /// </summary>
        public static string MiKo_1047_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_1047_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1047_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1047_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods not following the Task-based Asynchronous Pattern (TAP) should not lie about being asynchronous..
        /// </summary>
        public static string MiKo_1047_Title {
            get {
                return ResourceManager.GetString("MiKo_1047_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Classes that are value converters should end with a specific suffix..
        /// </summary>
        public static string MiKo_1048_Description {
            get {
                return ResourceManager.GetString("MiKo_1048_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End name with &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1048_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1048_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, the names of classes that are value converters should end with the same suffix..
        /// </summary>
        public static string MiKo_1048_Title {
            get {
                return ResourceManager.GetString("MiKo_1048_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Requirement terms such as &apos;Must&apos;, &apos;Need&apos;, &apos;Shall&apos;, &apos;Should&apos;, &apos;Will&apos; or &apos;Would&apos; within a name are not explicit enough. Instead, use a positive verb or an adjective like &apos;Is&apos;, &apos;Has&apos;, &apos;Can&apos;, etc..
        /// </summary>
        public static string MiKo_1049_Description {
            get {
                return ResourceManager.GetString("MiKo_1049_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &apos;{1}&apos; in name.
        /// </summary>
        public static string MiKo_1049_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1049_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use requirement terms such as &apos;Shall&apos;, &apos;Should&apos;, &apos;Must&apos; or &apos;Need&apos; for names..
        /// </summary>
        public static string MiKo_1049_Title {
            get {
                return ResourceManager.GetString("MiKo_1049_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variables for return values should describe what data they contain and not what they technical are.
        ///So they should have better names than e.g. &apos;ret&apos;, &apos;retVal&apos; or &apos;returnValue&apos;..
        /// </summary>
        public static string MiKo_1050_Description {
            get {
                return ResourceManager.GetString("MiKo_1050_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use a more descriptive name than &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1050_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1050_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Return values should have descriptive names..
        /// </summary>
        public static string MiKo_1050_Title {
            get {
                return ResourceManager.GetString("MiKo_1050_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suffixing delegate parameters with their type is repetitive and provides no value. A more meaningful name (such as &apos;callback&apos;, &apos;filter&apos; or &apos;map&apos;) provides much more context..
        /// </summary>
        public static string MiKo_1051_Description {
            get {
                return ResourceManager.GetString("MiKo_1051_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use a better matching name instead.
        /// </summary>
        public static string MiKo_1051_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1051_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not suffix parameters with delegate types..
        /// </summary>
        public static string MiKo_1051_Title {
            get {
                return ResourceManager.GetString("MiKo_1051_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suffixing delegate variables with their type is repetitive and provides no value. A more meaningful name (such as &apos;callback&apos;, &apos;filter&apos; or &apos;map&apos;) provides much more context..
        /// </summary>
        public static string MiKo_1052_Description {
            get {
                return ResourceManager.GetString("MiKo_1052_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use a better matching name instead.
        /// </summary>
        public static string MiKo_1052_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1052_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not suffix variables with delegate types..
        /// </summary>
        public static string MiKo_1052_Title {
            get {
                return ResourceManager.GetString("MiKo_1052_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suffixing delegate fields with their type is repetitive and provides no value. A more meaningful name (such as &apos;callback&apos;, &apos;filter&apos; or &apos;map&apos;) provides much more context..
        /// </summary>
        public static string MiKo_1053_Description {
            get {
                return ResourceManager.GetString("MiKo_1053_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use a better matching name instead.
        /// </summary>
        public static string MiKo_1053_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1053_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not suffix fields with delegate types..
        /// </summary>
        public static string MiKo_1053_Title {
            get {
                return ResourceManager.GetString("MiKo_1053_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Terms such as &apos;helper&apos; or &apos;utility&apos; are too generic and meaningless.
        ///Types that are named so do not follow the Single Responsibility Principle (SRP); instead they have a scope that is much too broad..
        /// </summary>
        public static string MiKo_1054_Description {
            get {
                return ResourceManager.GetString("MiKo_1054_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;{1}&apos; from name.
        /// </summary>
        public static string MiKo_1054_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1054_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not name types &apos;Helper&apos; or &apos;Utility&apos;..
        /// </summary>
        public static string MiKo_1054_Title {
            get {
                return ResourceManager.GetString("MiKo_1054_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To indicate that fields are the containers for specific dependency properties, those fields should be suffixed with &apos;Property&apos; (similar as in the .NET Framework)..
        /// </summary>
        public static string MiKo_1055_Description {
            get {
                return ResourceManager.GetString("MiKo_1055_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/how-to-implement-a-dependency-property.
        /// </summary>
        public static string MiKo_1055_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_1055_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos; instead.
        /// </summary>
        public static string MiKo_1055_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1055_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dependency properties should be suffixed with &apos;Property&apos; (as in the .NET Framework)..
        /// </summary>
        public static string MiKo_1055_Title {
            get {
                return ResourceManager.GetString("MiKo_1055_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To indicate that fields are the containers for specific dependency properties, those fields should be prefixed with the name of the property (similar as in the .NET Framework)..
        /// </summary>
        public static string MiKo_1056_Description {
            get {
                return ResourceManager.GetString("MiKo_1056_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/how-to-implement-a-dependency-property.
        /// </summary>
        public static string MiKo_1056_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_1056_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it {1} instead.
        /// </summary>
        public static string MiKo_1056_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1056_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dependency properties should be prefixed with property names (as in the .NET Framework)..
        /// </summary>
        public static string MiKo_1056_Title {
            get {
                return ResourceManager.GetString("MiKo_1056_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To indicate that fields are the keys for specific dependency properties, those fields should be suffixed with &apos;Key&apos; (similar as in the .NET Framework)..
        /// </summary>
        public static string MiKo_1057_Description {
            get {
                return ResourceManager.GetString("MiKo_1057_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://docs.microsoft.com/en-us/dotnet/api/system.windows.dependencypropertykey.
        /// </summary>
        public static string MiKo_1057_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_1057_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos; instead.
        /// </summary>
        public static string MiKo_1057_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1057_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dependency property keys should be suffixed with &apos;Key&apos; (as in the .NET Framework)..
        /// </summary>
        public static string MiKo_1057_Title {
            get {
                return ResourceManager.GetString("MiKo_1057_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To indicate that fields are the keys for specific dependency properties, those fields should be prefixed with the name of the property (similar as in the .NET Framework)..
        /// </summary>
        public static string MiKo_1058_Description {
            get {
                return ResourceManager.GetString("MiKo_1058_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://docs.microsoft.com/en-us/dotnet/api/system.windows.dependencypropertykey.
        /// </summary>
        public static string MiKo_1058_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_1058_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it {1} instead.
        /// </summary>
        public static string MiKo_1058_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1058_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dependency property keys should be prefixed with property names (as in the .NET Framework)..
        /// </summary>
        public static string MiKo_1058_Title {
            get {
                return ResourceManager.GetString("MiKo_1058_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Terms such as &apos;Impl&apos; or &apos;Implementation&apos; are meaningless and provide no benefit.
        ///Types that are named so should be better named directly after the interface they implement, but without any &apos;Impl&apos; marker..
        /// </summary>
        public static string MiKo_1059_Description {
            get {
                return ResourceManager.GetString("MiKo_1059_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;{1}&apos; from name.
        /// </summary>
        public static string MiKo_1059_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1059_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not name types &apos;Impl&apos; or &apos;Implementation&apos;..
        /// </summary>
        public static string MiKo_1059_Title {
            get {
                return ResourceManager.GetString("MiKo_1059_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suffixing methods with number makes it hard for the users of the methods to use them as it is unclear which one is the correct or whether they have to be used in conjunction. So instead of using a number suffix methods should have a proper descriptive name..
        /// </summary>
        public static string MiKo_1060_Description {
            get {
                return ResourceManager.GetString("MiKo_1060_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use a number as suffix.
        /// </summary>
        public static string MiKo_1060_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1060_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should not be suffixed with a number..
        /// </summary>
        public static string MiKo_1060_Title {
            get {
                return ResourceManager.GetString("MiKo_1060_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If a &apos;TryXyz&apos; method has an [out] parameter, that [out] parameter shall be named specifically because it is the actual result of the method. The method&apos;s return value only exists to indicate a success or failure of the operation.
        ///
        ///- For a &apos;Try&apos; method, that parameter shall be named &apos;result&apos;.
        ///- For a &apos;TryGet&apos; method, that parameter shall be named after the name of the method without the &apos;TryGet&apos; prefix.
        ///   Example: For the &apos;TryGetMyValue&apos; method the parameter shall be named &apos;myValue&apos;..
        /// </summary>
        public static string MiKo_1061_Description {
            get {
                return ResourceManager.GetString("MiKo_1061_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1061_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1061_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of &apos;Try&apos; method&apos;s [out] parameter should be specific..
        /// </summary>
        public static string MiKo_1061_Title {
            get {
                return ResourceManager.GetString("MiKo_1061_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Detection methods (properties or fields) such as &apos;Can&apos;, &apos;Has&apos; or &apos;Contains&apos; should consist only of a few words, such as &apos;HasConnection&apos; or &apos;ContainsKey&apos;.
        ///If they consist of more than those few words, these methods (properties or fields) are probably placed at the wrong place and violate the SRP..
        /// </summary>
        public static string MiKo_1062_Description {
            get {
                return ResourceManager.GetString("MiKo_1062_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid name with more than {1} words.
        /// </summary>
        public static string MiKo_1062_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1062_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;Can/Has/Contains&apos; methods, properties or fields shall consist of only a few words..
        /// </summary>
        public static string MiKo_1062_Title {
            get {
                return ResourceManager.GetString("MiKo_1062_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using abbreviations in names is bad practice.
        ///It makes it hard for every developer that is new to the code base to understand what is meant by the code.
        ///In addition, they distract the reader&apos;s attention as they have to translate the meaning each time..
        /// </summary>
        public static string MiKo_1063_Description {
            get {
                return ResourceManager.GetString("MiKo_1063_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{2}&apos; instead of abbreviation &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1063_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1063_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use abbreviations in names..
        /// </summary>
        public static string MiKo_1063_Title {
            get {
                return ResourceManager.GetString("MiKo_1063_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, parameter names should be based on the parameter’s meaning rather than the parameter’s type..
        /// </summary>
        public static string MiKo_1064_Description {
            get {
                return ResourceManager.GetString("MiKo_1064_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name parameter based on its meaning instead of its type.
        /// </summary>
        public static string MiKo_1064_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1064_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter names reflect their meaning and not their type..
        /// </summary>
        public static string MiKo_1064_Title {
            get {
                return ResourceManager.GetString("MiKo_1064_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameters of operator overloads should have default names if there is no meaning to the parameters.
        ///For binary operator overloads use the names &apos;left&apos; and &apos;right&apos;, for unary operator overloads use the name &apos;value&apos;..
        /// </summary>
        public static string MiKo_1065_Description {
            get {
                return ResourceManager.GetString("MiKo_1065_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/naming-parameters.
        /// </summary>
        public static string MiKo_1065_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_1065_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1065_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1065_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter names do not follow .NET Framework Guidelines for operator overloads..
        /// </summary>
        public static string MiKo_1065_Title {
            get {
                return ResourceManager.GetString("MiKo_1065_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suffixing parameters with number provides no benefit. So instead of using a number suffix parameters should have a proper descriptive name..
        /// </summary>
        public static string MiKo_1066_Description {
            get {
                return ResourceManager.GetString("MiKo_1066_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use a number as suffix.
        /// </summary>
        public static string MiKo_1066_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1066_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameters should not be suffixed with a number..
        /// </summary>
        public static string MiKo_1066_Title {
            get {
                return ResourceManager.GetString("MiKo_1066_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The purpose of methods is to execute code, so it&apos;s useless and repetitive to have &apos;Perform&apos; in their names..
        /// </summary>
        public static string MiKo_1067_Description {
            get {
                return ResourceManager.GetString("MiKo_1067_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;Perform&apos; from name.
        /// </summary>
        public static string MiKo_1067_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1067_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should not contain &apos;Perform&apos; in their names..
        /// </summary>
        public static string MiKo_1067_Title {
            get {
                return ResourceManager.GetString("MiKo_1067_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Workflows are a high-level construct and encapsulate functionality that belongs into the business layer.
        ///Hence, their methods should be named &apos;CanRun&apos; or &apos;Run&apos; (similar to commands where they are named &apos;CanExecute&apos; and &apos;Execute&apos;)..
        /// </summary>
        public static string MiKo_1068_Description {
            get {
                return ResourceManager.GetString("MiKo_1068_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1068_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1068_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Workflow methods should be named &apos;CanRun&apos; or &apos;Run&apos;..
        /// </summary>
        public static string MiKo_1068_Title {
            get {
                return ResourceManager.GetString("MiKo_1068_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, property names should be based on the property’s meaning rather than its type..
        /// </summary>
        public static string MiKo_1069_Description {
            get {
                return ResourceManager.GetString("MiKo_1069_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name property based on its meaning instead of its type.
        /// </summary>
        public static string MiKo_1069_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1069_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property names reflect their meaning and not their type..
        /// </summary>
        public static string MiKo_1069_Title {
            get {
                return ResourceManager.GetString("MiKo_1069_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Local variables for collections (that is any which is an &apos;IEnumerable&apos;) should have names in plural form. Their names should describe the contents of the collection; and not the collection itself..
        /// </summary>
        public static string MiKo_1070_Description {
            get {
                return ResourceManager.GetString("MiKo_1070_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1070_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1070_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Local collection variables shall use plural name..
        /// </summary>
        public static string MiKo_1070_Title {
            get {
                return ResourceManager.GetString("MiKo_1070_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Boolean variables define some state. So they should be named as statements and not as questions.
        ///That easies reading, as most likely, boolean variables are used in if/else or switch statements.
        ///
        ///Example:
        ///   &apos;isDeviceOnline&apos; is a question.
        ///   &apos;deviceIsOnline&apos; instead is a statement.
        ///
        ///   &apos;if (isDeviceOnline) DoSomething();&apos; is harder to read
        ///   &apos;if (deviceIsOnline) DoSomething();&apos; is more fluent to read..
        /// </summary>
        public static string MiKo_1071_Description {
            get {
                return ResourceManager.GetString("MiKo_1071_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it as statement.
        /// </summary>
        public static string MiKo_1071_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1071_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Local boolean variables should be named as statements and not as questions..
        /// </summary>
        public static string MiKo_1071_Title {
            get {
                return ResourceManager.GetString("MiKo_1071_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Boolean properties or methods define some state. So they should be named as statements and not as questions.
        ///That easies reading, as most likely, boolean properties or methods are used in if/else or switch statements.
        ///
        ///Example:
        ///   &apos;IsDeviceOnline&apos; is a question.
        ///   &apos;DeviceIsOnline&apos; instead is a statement.
        ///
        ///   &apos;if (IsDeviceOnline) DoSomething();&apos; is harder to read
        ///   &apos;if (DeviceIsOnline) DoSomething();&apos; is more fluent to read..
        /// </summary>
        public static string MiKo_1072_Description {
            get {
                return ResourceManager.GetString("MiKo_1072_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it as statement.
        /// </summary>
        public static string MiKo_1072_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1072_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Boolean properties or methods should be named as statements and not as questions..
        /// </summary>
        public static string MiKo_1072_Title {
            get {
                return ResourceManager.GetString("MiKo_1072_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Boolean fields define some state. So they should be named as statements and not as questions.
        ///That easies reading, as most likely, boolean fields are used in if/else or switch statements.
        ///
        ///Example:
        ///   &apos;IsDeviceOnline&apos; is a question.
        ///   &apos;DeviceIsOnline&apos; instead is a statement.
        ///
        ///   &apos;if (IsDeviceOnline) DoSomething();&apos; is harder to read
        ///   &apos;if (DeviceIsOnline) DoSomething();&apos; is more fluent to read..
        /// </summary>
        public static string MiKo_1073_Description {
            get {
                return ResourceManager.GetString("MiKo_1073_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it as statement.
        /// </summary>
        public static string MiKo_1073_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1073_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Boolean fields should be named as statements and not as questions..
        /// </summary>
        public static string MiKo_1073_Title {
            get {
                return ResourceManager.GetString("MiKo_1073_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is much easier to read a number inside a name if it is written as number and not its spelling (e.g. &apos;issue42&apos; in contrast to &apos;issueFortyTwo&apos;)..
        /// </summary>
        public static string MiKo_1080_Description {
            get {
                return ResourceManager.GetString("MiKo_1080_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use number instead of spelling.
        /// </summary>
        public static string MiKo_1080_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1080_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Names should contain numbers instead of their spellings..
        /// </summary>
        public static string MiKo_1080_Title {
            get {
                return ResourceManager.GetString("MiKo_1080_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sometimes, developers try to report that an entity was not found.
        ///
        ///For example, a repository is requested to return an entity &apos;Xyz&apos; (e.g. via method &apos;GetXyz&apos;). In case that such entity does not exist, they either return an error code (such as null) or they throw an exception.
        ///
        ///The name of the exception is then sometimes &apos;GetXyzFailedException&apos; which is not that clear (why did it fail?). A better name would be &apos;XyzNotFoundException&apos; to indicate that &apos;Xyz&apos; was not found.
        ///
        ///The same applies for &apos;XyzMissin [rest of string was truncated]&quot;;.
        /// </summary>
        public static string MiKo_1081_Description {
            get {
                return ResourceManager.GetString("MiKo_1081_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Consider to name it &apos;{0}&apos;.
        /// </summary>
        public static string MiKo_1081_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1081_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;&lt;Entity&gt;NotFound&apos; instead of &apos;Get&lt;Entity&gt;Failed&apos; or &apos;&lt;Entity&gt;Missing&apos;..
        /// </summary>
        public static string MiKo_1081_Title {
            get {
                return ResourceManager.GetString("MiKo_1081_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A class that is marked as a unit test class should indicate via its name which type it tests.
        ///The name should be constructed by having the name of the type under test as prefix and &apos;Tests&apos; as suffix (e.g. for class &apos;MyXyzClass&apos; the test class should be named &apos;MyXyzClassTests&apos;)..
        /// </summary>
        public static string MiKo_1100_Description {
            get {
                return ResourceManager.GetString("MiKo_1100_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1100_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1100_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test classes should start with the name of the type under test..
        /// </summary>
        public static string MiKo_1100_Title {
            get {
                return ResourceManager.GetString("MiKo_1100_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A class that is marked as a unit test class should indicate that by the suffix &apos;Tests&apos; as it normally contains multiple tests..
        /// </summary>
        public static string MiKo_1101_Description {
            get {
                return ResourceManager.GetString("MiKo_1101_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1101_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1101_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test classes should end with &apos;Tests&apos;..
        /// </summary>
        public static string MiKo_1101_Title {
            get {
                return ResourceManager.GetString("MiKo_1101_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A method that is marked as a unit test should not additionally indicate that it is a unit test by having &apos;Test&apos; in its name..
        /// </summary>
        public static string MiKo_1102_Description {
            get {
                return ResourceManager.GetString("MiKo_1102_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;{1}&apos; from name.
        /// </summary>
        public static string MiKo_1102_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1102_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test methods should not contain &apos;Test&apos;..
        /// </summary>
        public static string MiKo_1102_Title {
            get {
                return ResourceManager.GetString("MiKo_1102_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A method that is marked as unit test initialization method should be named &apos;PrepareTest&apos;..
        /// </summary>
        public static string MiKo_1103_Description {
            get {
                return ResourceManager.GetString("MiKo_1103_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1103_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1103_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test initialization methods should be named &apos;PrepareTest&apos;..
        /// </summary>
        public static string MiKo_1103_Title {
            get {
                return ResourceManager.GetString("MiKo_1103_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A method that is marked as unit test cleanup method should be named &apos;CleanupTest&apos;..
        /// </summary>
        public static string MiKo_1104_Description {
            get {
                return ResourceManager.GetString("MiKo_1104_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1104_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1104_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test cleanup methods should be named &apos;CleanupTest&apos;..
        /// </summary>
        public static string MiKo_1104_Title {
            get {
                return ResourceManager.GetString("MiKo_1104_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For maintenance reasons, test methods whose names are written in Pascal-casing are hard to read.
        ///To ease reading, use underscores between the different words instead..
        /// </summary>
        public static string MiKo_1105_Description {
            get {
                return ResourceManager.GetString("MiKo_1105_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use underscores instead of Pascal-casing.
        /// </summary>
        public static string MiKo_1105_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1105_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test methods should not be in Pascal-casing..
        /// </summary>
        public static string MiKo_1105_Title {
            get {
                return ResourceManager.GetString("MiKo_1105_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For maintenance reasons, variables, parameters, properties and fields should be named about what they represent and not what they technically are.
        ///Hence naming them e.g. &apos;Mock&apos; or &apos;Stub&apos; does not provide any additional value and is just some cluttering noise. In addition, those names put the developer&apos;s attention and focus on the wrong thing..
        /// </summary>
        public static string MiKo_1106_Description {
            get {
                return ResourceManager.GetString("MiKo_1106_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not name it &apos;Mock&apos; or &apos;Stub&apos;.
        /// </summary>
        public static string MiKo_1106_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1106_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not name variables, parameters, fields and properties &apos;Mock&apos; or &apos;Stub&apos;..
        /// </summary>
        public static string MiKo_1106_Title {
            get {
                return ResourceManager.GetString("MiKo_1106_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, exceptions in catch blocks should be named consistently..
        /// </summary>
        public static string MiKo_1200_Description {
            get {
                return ResourceManager.GetString("MiKo_1200_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1200_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1200_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name exceptions in catch blocks consistently..
        /// </summary>
        public static string MiKo_1200_Title {
            get {
                return ResourceManager.GetString("MiKo_1200_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, exceptions as parameters should be named consistently..
        /// </summary>
        public static string MiKo_1201_Description {
            get {
                return ResourceManager.GetString("MiKo_1201_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos; or &apos;{2}&apos;.
        /// </summary>
        public static string MiKo_1201_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1201_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name exceptions as parameters consistently..
        /// </summary>
        public static string MiKo_1201_Title {
            get {
                return ResourceManager.GetString("MiKo_1201_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance and avoid visual noise, unimportant identifiers in lambdas should be consistently named &apos;_&apos;..
        /// </summary>
        public static string MiKo_1300_Description {
            get {
                return ResourceManager.GetString("MiKo_1300_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;_&apos; instead.
        /// </summary>
        public static string MiKo_1300_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1300_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unimportant identifiers in lambda statements should be named &apos;_&apos;..
        /// </summary>
        public static string MiKo_1300_Title {
            get {
                return ResourceManager.GetString("MiKo_1300_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Namespaces group functionalities, so their names should be in plural..
        /// </summary>
        public static string MiKo_1400_Description {
            get {
                return ResourceManager.GetString("MiKo_1400_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use plural for namespace, such as &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1400_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1400_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Namespace names should be in plural..
        /// </summary>
        public static string MiKo_1400_Title {
            get {
                return ResourceManager.GetString("MiKo_1400_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Namespaces should not contain any language specific (technical) name, such as  &apos;Interfaces&apos;, &apos;Exceptions&apos; or &apos;Enums&apos;..
        /// </summary>
        public static string MiKo_1401_Description {
            get {
                return ResourceManager.GetString("MiKo_1401_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use technical name &apos;{1}&apos; in namespace.
        /// </summary>
        public static string MiKo_1401_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1401_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Namespaces should not contain technical language names..
        /// </summary>
        public static string MiKo_1401_Title {
            get {
                return ResourceManager.GetString("MiKo_1401_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Namespaces should not be named after WPF specific design patterns, such as &apos;Commands&apos;, &apos;Models&apos;, &apos;ViewModels&apos; or &apos;Views&apos;.
        ///Models are Entities. Commands, ViewModels and Views belong together and are UI specific parts..
        /// </summary>
        public static string MiKo_1402_Description {
            get {
                return ResourceManager.GetString("MiKo_1402_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use WPF design pattern name &apos;{1}&apos; in namespace.
        /// </summary>
        public static string MiKo_1402_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1402_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Namespaces should not be named after WPF specific design patterns..
        /// </summary>
        public static string MiKo_1402_Title {
            get {
                return ResourceManager.GetString("MiKo_1402_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To avoid redundancy and confused developers, namespaces should ot be named after any parent namespace. Instead, it should be made more clear into which namespace a type belongs by choosing a proper name..
        /// </summary>
        public static string MiKo_1403_Description {
            get {
                return ResourceManager.GetString("MiKo_1403_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use another name for the namespace.
        /// </summary>
        public static string MiKo_1403_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1403_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Namespaces should be named after any of their parent namespaces..
        /// </summary>
        public static string MiKo_1403_Title {
            get {
                return ResourceManager.GetString("MiKo_1403_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Namespaces should not contain any unspecific name, such as  &apos;Miscellaneous&apos; or &apos;Utilities&apos;..
        /// </summary>
        public static string MiKo_1404_Description {
            get {
                return ResourceManager.GetString("MiKo_1404_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &apos;{1}&apos; in namespace.
        /// </summary>
        public static string MiKo_1404_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1404_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Namespaces should not contain unspecific names..
        /// </summary>
        public static string MiKo_1404_Title {
            get {
                return ResourceManager.GetString("MiKo_1404_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Namespaces should be named after features, not deployment details.
        ///Most times, a Lib suffix only signals that the assembly is a DLL (dynamic link library). This information is not needed at all.
        ///It does not matter if it is a library or an executable, what matters is the functionality it contains/provides..
        /// </summary>
        public static string MiKo_1405_Description {
            get {
                return ResourceManager.GetString("MiKo_1405_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &apos;{1}&apos; in namespace.
        /// </summary>
        public static string MiKo_1405_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1405_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Namespaces should not contain &apos;Lib&apos;..
        /// </summary>
        public static string MiKo_1405_Title {
            get {
                return ResourceManager.GetString("MiKo_1405_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease their finding, value converters should be placed and grouped in a specific namespace called &apos;Converters&apos;..
        /// </summary>
        public static string MiKo_1406_Description {
            get {
                return ResourceManager.GetString("MiKo_1406_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place in &apos;Converters&apos; namespace.
        /// </summary>
        public static string MiKo_1406_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1406_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Value converters should be placed in &apos;Converters&apos; namespace..
        /// </summary>
        public static string MiKo_1406_Title {
            get {
                return ResourceManager.GetString("MiKo_1406_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A test should be located in the same namespace as the class it shall test..
        /// </summary>
        public static string MiKo_1407_Description {
            get {
                return ResourceManager.GetString("MiKo_1407_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &apos;Test&apos; in namespace.
        /// </summary>
        public static string MiKo_1407_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1407_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test namespaces should not contain &apos;Test&apos;..
        /// </summary>
        public static string MiKo_1407_Title {
            get {
                return ResourceManager.GetString("MiKo_1407_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease usage, extension method classes should be placed in same namespace as the extended types.
        ///That allows an easy detection and use via IntelliSense..
        /// </summary>
        public static string MiKo_1408_Description {
            get {
                return ResourceManager.GetString("MiKo_1408_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place class in namespace &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1408_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1408_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extension methods should be placed in same namespace as the extended types..
        /// </summary>
        public static string MiKo_1408_Title {
            get {
                return ResourceManager.GetString("MiKo_1408_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should be valid XML so that it can be generated as API documentation/IntelliSense to support the developers..
        /// </summary>
        public static string MiKo_2000_Description {
            get {
                return ResourceManager.GetString("MiKo_2000_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation is malformed (contains invalid characters, eg. &apos;&amp;&apos;, &apos;&gt;&apos;, &apos;&lt;&apos;).
        /// </summary>
        public static string MiKo_2000_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2000_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should be valid XML..
        /// </summary>
        public static string MiKo_2000_Title {
            get {
                return ResourceManager.GetString("MiKo_2000_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Events should be documented with &apos;Occurs ...&apos; to indicate that events actually occur..
        /// </summary>
        public static string MiKo_2001_Description {
            get {
                return ResourceManager.GetString("MiKo_2001_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;summary&gt; with: &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_2001_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2001_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Events should be documented properly..
        /// </summary>
        public static string MiKo_2001_Title {
            get {
                return ResourceManager.GetString("MiKo_2001_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, classes that inherit from &apos;System.EventArgs&apos; should be documented with &apos;Provides data for the &lt;see cref=&quot;XYZ&quot; /&gt; event.&apos; to indicate for which event they are valid..
        /// </summary>
        public static string MiKo_2002_Description {
            get {
                return ResourceManager.GetString("MiKo_2002_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; should follow pattern: &apos;{1} ... {2}&apos;.
        /// </summary>
        public static string MiKo_2002_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2002_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EventArgs should be documented properly..
        /// </summary>
        public static string MiKo_2002_Title {
            get {
                return ResourceManager.GetString("MiKo_2002_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation of an event handler should have a default starting phrase that describes what event gets handled..
        /// </summary>
        public static string MiKo_2003_Description {
            get {
                return ResourceManager.GetString("MiKo_2003_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;summary&gt; with: &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_2003_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2003_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation of event handlers should have a default starting phrase..
        /// </summary>
        public static string MiKo_2003_Title {
            get {
                return ResourceManager.GetString("MiKo_2003_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Event method parameters should define what exactly they are..
        /// </summary>
        public static string MiKo_2004_Description {
            get {
                return ResourceManager.GetString("MiKo_2004_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should be: &apos;{2}&apos;.
        /// </summary>
        public static string MiKo_2004_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2004_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation of parameter name does not follow .NET Framework Guidelines for event handlers..
        /// </summary>
        public static string MiKo_2004_Title {
            get {
                return ResourceManager.GetString("MiKo_2004_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should not contain the term &apos;event arg&apos;. Instead, it should contain the reference to the specific class, such as &apos;&lt;see cref=&quot;XyzEventArgs&quot; /&gt;&apos;..
        /// </summary>
        public static string MiKo_2005_Description {
            get {
                return ResourceManager.GetString("MiKo_2005_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use term &apos;event arg&apos;.
        /// </summary>
        public static string MiKo_2005_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2005_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Textual references to EventArgs should be documented properly..
        /// </summary>
        public static string MiKo_2005_Title {
            get {
                return ResourceManager.GetString("MiKo_2005_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Routed events should be documented in the same way as they are documented by the .NET Framework..
        /// </summary>
        public static string MiKo_2006_Description {
            get {
                return ResourceManager.GetString("MiKo_2006_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;{1}&gt; should be: &apos;{2}&apos;.
        /// </summary>
        public static string MiKo_2006_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2006_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Routed events should be documented as done by the .NET Framework..
        /// </summary>
        public static string MiKo_2006_Title {
            get {
                return ResourceManager.GetString("MiKo_2006_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease their usage when it comes to inheritance, sealed classes should document the fact that they are sealed..
        /// </summary>
        public static string MiKo_2010_Description {
            get {
                return ResourceManager.GetString("MiKo_2010_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End &lt;summary&gt; with: &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_2010_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2010_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sealed classes should document being sealed..
        /// </summary>
        public static string MiKo_2010_Title {
            get {
                return ResourceManager.GetString("MiKo_2010_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unsealed classes should not report that they are sealed..
        /// </summary>
        public static string MiKo_2011_Description {
            get {
                return ResourceManager.GetString("MiKo_2011_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; should not contain: &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_2011_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2011_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unsealed classes should not lie about sealing..
        /// </summary>
        public static string MiKo_2011_Title {
            get {
                return ResourceManager.GetString("MiKo_2011_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease development and maintenance, the summary documentation should describe its responsibility.
        ///It should not start with or contain a meaningless phrase like &apos;Used to&apos;. Instead it should start with something more descriptive, such as: &apos;Allows to &apos;, &apos;Represents &apos; or &apos;Provides &apos;..
        /// </summary>
        public static string MiKo_2012_Description {
            get {
                return ResourceManager.GetString("MiKo_2012_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; should not {1} meaningless phrase: &apos;{2}&apos;.
        /// </summary>
        public static string MiKo_2012_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2012_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation should describe its responsibility..
        /// </summary>
        public static string MiKo_2012_Title {
            get {
                return ResourceManager.GetString("MiKo_2012_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease their usage, enums should specify what kind of values they define..
        /// </summary>
        public static string MiKo_2013_Description {
            get {
                return ResourceManager.GetString("MiKo_2013_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;summary&gt; with: &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_2013_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2013_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation of Enums should have a default starting phrase..
        /// </summary>
        public static string MiKo_2013_Title {
            get {
                return ResourceManager.GetString("MiKo_2013_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dispose methods should be documented in the same way as they are documented by the .NET Framework..
        /// </summary>
        public static string MiKo_2014_Description {
            get {
                return ResourceManager.GetString("MiKo_2014_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should be: &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_2014_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2014_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dispose methods should be documented as done by the .NET Framework..
        /// </summary>
        public static string MiKo_2014_Title {
            get {
                return ResourceManager.GetString("MiKo_2014_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The term &apos;Fire&apos; is a negative term. Employees get fired (or guns), but not events or exceptions. Events get raised and exceptions get thrown..
        /// </summary>
        public static string MiKo_2015_Description {
            get {
                return ResourceManager.GetString("MiKo_2015_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should use {1} instead of {2}.
        /// </summary>
        public static string MiKo_2015_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2015_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should use &apos;raise&apos; or &apos;throw&apos; instead of &apos;fire&apos;..
        /// </summary>
        public static string MiKo_2015_Title {
            get {
                return ResourceManager.GetString("MiKo_2015_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation for asynchronous methods should indicate that method is run asynchronously..
        /// </summary>
        public static string MiKo_2016_Description {
            get {
                return ResourceManager.GetString("MiKo_2016_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;summary&gt; with: &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_2016_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2016_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation for asynchronous methods should start with specific phrase..
        /// </summary>
        public static string MiKo_2016_Title {
            get {
                return ResourceManager.GetString("MiKo_2016_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dependency properties should be documented in the same way as they are documented by the .NET Framework..
        /// </summary>
        public static string MiKo_2017_Description {
            get {
                return ResourceManager.GetString("MiKo_2017_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;{1}&gt; should be: &apos;{2}&apos;.
        /// </summary>
        public static string MiKo_2017_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2017_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dependency properties should be documented as done by the .NET Framework..
        /// </summary>
        public static string MiKo_2017_Title {
            get {
                return ResourceManager.GetString("MiKo_2017_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The term &apos;Check&apos; is ambiguous. If validation of parameters is meant, use something like &apos;Validates&apos; or &apos;Verifies&apos;. If a check for a specific state is meant, use &apos;Determines&apos; instead..
        /// </summary>
        public static string MiKo_2018_Description {
            get {
                return ResourceManager.GetString("MiKo_2018_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use ambiguous term &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_2018_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2018_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should not use the ambiguous term &apos;Check&apos;..
        /// </summary>
        public static string MiKo_2018_Title {
            get {
                return ResourceManager.GetString("MiKo_2018_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation should start with a third person singular verb as it shall be a short description of the functionality that the class, property, etc. provides or represents..
        /// </summary>
        public static string MiKo_2019_Description {
            get {
                return ResourceManager.GetString("MiKo_2019_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;summary&gt; with a third person singular verb.
        /// </summary>
        public static string MiKo_2019_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2019_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation should start with a third person singular verb (for example &quot;Provides &quot;)..
        /// </summary>
        public static string MiKo_2019_Title {
            get {
                return ResourceManager.GetString("MiKo_2019_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It does not make sense to use a &lt;summary&gt; documentation that only reference something else via &lt;see cref=&quot;...&quot; /&gt; as IntelliSense does not show these descriptions. For such a scenario &lt;inheritdoc /&gt; should be used..
        /// </summary>
        public static string MiKo_2020_Description {
            get {
                return ResourceManager.GetString("MiKo_2020_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &lt;inheritdoc /&gt; instead.
        /// </summary>
        public static string MiKo_2020_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2020_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inherited documentation should be used with &lt;inheritdoc /&gt; marker..
        /// </summary>
        public static string MiKo_2020_Title {
            get {
                return ResourceManager.GetString("MiKo_2020_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of parameters should describe what they represent..
        /// </summary>
        public static string MiKo_2021_Description {
            get {
                return ResourceManager.GetString("MiKo_2021_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;param name=&quot;{0}&quot;&gt; documentation should start with: {1}.
        /// </summary>
        public static string MiKo_2021_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2021_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation of parameter should have a default starting phrase..
        /// </summary>
        public static string MiKo_2021_Title {
            get {
                return ResourceManager.GetString("MiKo_2021_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of [out] parameters should start with the success case..
        /// </summary>
        public static string MiKo_2022_Description {
            get {
                return ResourceManager.GetString("MiKo_2022_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;param name=&quot;{0}&quot;&gt; documentation should start with: {1}.
        /// </summary>
        public static string MiKo_2022_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2022_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation of [out] parameters should have a default starting phrase..
        /// </summary>
        public static string MiKo_2022_Title {
            get {
                return ResourceManager.GetString("MiKo_2022_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of a Boolean as parameter should have a specific phrase that first describes the &apos;true&apos; case and then the &apos;false&apos; case..
        /// </summary>
        public static string MiKo_2023_Description {
            get {
                return ResourceManager.GetString("MiKo_2023_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;param name=&quot;{0}&quot;&gt; documentation should follow pattern: &apos;{1} ... {2}&apos;.
        /// </summary>
        public static string MiKo_2023_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2023_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation of Boolean parameters should have a default starting phrase..
        /// </summary>
        public static string MiKo_2023_Title {
            get {
                return ResourceManager.GetString("MiKo_2023_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of Enum parameters should start with a phrase that specifies what will be done with the Enum..
        /// </summary>
        public static string MiKo_2024_Description {
            get {
                return ResourceManager.GetString("MiKo_2024_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;param name=&quot;{0}&quot;&gt; documentation should start with: {1}.
        /// </summary>
        public static string MiKo_2024_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2024_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation of Enum parameters should have a default starting phrase..
        /// </summary>
        public static string MiKo_2024_Title {
            get {
                return ResourceManager.GetString("MiKo_2024_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of &apos;CancellationToken&apos; parameters should start with a phrase that describes how it is used..
        /// </summary>
        public static string MiKo_2025_Description {
            get {
                return ResourceManager.GetString("MiKo_2025_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;param name=&quot;{0}&quot;&gt; documentation should start with: {1}.
        /// </summary>
        public static string MiKo_2025_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2025_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation of &apos;CancellationToken&apos; parameters should have a default starting phrase..
        /// </summary>
        public static string MiKo_2025_Title {
            get {
                return ResourceManager.GetString("MiKo_2025_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation should not state that a parameter is unused although it is still in use..
        /// </summary>
        public static string MiKo_2026_Description {
            get {
                return ResourceManager.GetString("MiKo_2026_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;param name=&quot;{0}&quot;&gt; documentation lies about it being unused.
        /// </summary>
        public static string MiKo_2026_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2026_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Used parameters should not be documented to be unused..
        /// </summary>
        public static string MiKo_2026_Title {
            get {
                return ResourceManager.GetString("MiKo_2026_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease the usage, the documentation of the parameters of the serialization constructors shall have a specific phrase that describes what they contain..
        /// </summary>
        public static string MiKo_2027_Description {
            get {
                return ResourceManager.GetString("MiKo_2027_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;param name=&quot;{0}&quot;&gt; documentation should be: &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_2027_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2027_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Serialization constructor parameters shall be documented with a specific phrase..
        /// </summary>
        public static string MiKo_2027_Title {
            get {
                return ResourceManager.GetString("MiKo_2027_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of a return value should have a default starting phrase that describes the returned value in more detail..
        /// </summary>
        public static string MiKo_2030_Description {
            get {
                return ResourceManager.GetString("MiKo_2030_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;{1}&gt; with: &apos;{2}&apos;.
        /// </summary>
        public static string MiKo_2030_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2030_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation of return value should have a default starting phrase..
        /// </summary>
        public static string MiKo_2030_Title {
            get {
                return ResourceManager.GetString("MiKo_2030_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of a Task as return value should have a default (starting) phrase..
        /// </summary>
        public static string MiKo_2031_Description {
            get {
                return ResourceManager.GetString("MiKo_2031_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;{1}&gt; with: &apos;{2}&apos;.
        /// </summary>
        public static string MiKo_2031_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2031_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation of Task return value should have a specific (starting) phrase..
        /// </summary>
        public static string MiKo_2031_Title {
            get {
                return ResourceManager.GetString("MiKo_2031_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of a Boolean as return value should have a specific phrase that first describes the &apos;true&apos; case and then the &apos;false&apos; case..
        /// </summary>
        public static string MiKo_2032_Description {
            get {
                return ResourceManager.GetString("MiKo_2032_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;{1}&gt; should follow pattern: &apos;{2} ... {3}&apos;.
        /// </summary>
        public static string MiKo_2032_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2032_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation of Boolean return value should have a specific phrase..
        /// </summary>
        public static string MiKo_2032_Title {
            get {
                return ResourceManager.GetString("MiKo_2032_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of a String as return value should have a specific phrase..
        /// </summary>
        public static string MiKo_2033_Description {
            get {
                return ResourceManager.GetString("MiKo_2033_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;{1}&gt; with: &apos;{2}&apos;.
        /// </summary>
        public static string MiKo_2033_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2033_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation of String return value should have a default starting phrase..
        /// </summary>
        public static string MiKo_2033_Title {
            get {
                return ResourceManager.GetString("MiKo_2033_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of an Enum as return value should have a specific phrase..
        /// </summary>
        public static string MiKo_2034_Description {
            get {
                return ResourceManager.GetString("MiKo_2034_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;{1}&gt; with: &apos;{2}&apos;.
        /// </summary>
        public static string MiKo_2034_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2034_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation of Enum return value should have a default starting phrase..
        /// </summary>
        public static string MiKo_2034_Title {
            get {
                return ResourceManager.GetString("MiKo_2034_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of a collection as return value should have a specific phrase..
        /// </summary>
        public static string MiKo_2035_Description {
            get {
                return ResourceManager.GetString("MiKo_2035_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;{1}&gt; with: &apos;{2}&apos;.
        /// </summary>
        public static string MiKo_2035_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2035_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation of collection return value should have a default starting phrase..
        /// </summary>
        public static string MiKo_2035_Title {
            get {
                return ResourceManager.GetString("MiKo_2035_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of Boolean or Enum properties shall end with a phrase that describes the value that is returned per default..
        /// </summary>
        public static string MiKo_2036_Description {
            get {
                return ResourceManager.GetString("MiKo_2036_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End &lt;{1}&gt; with: &apos;{2}&apos;    Or with: &apos;{3}&apos;.
        /// </summary>
        public static string MiKo_2036_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2036_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation of Boolean or Enum property shall describe the default value..
        /// </summary>
        public static string MiKo_2036_Title {
            get {
                return ResourceManager.GetString("MiKo_2036_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of a property that returns a command should start with a specific phrase that describes what command the property returns..
        /// </summary>
        public static string MiKo_2037_Description {
            get {
                return ResourceManager.GetString("MiKo_2037_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;{1}&gt; with: &apos;{2}&apos;.
        /// </summary>
        public static string MiKo_2037_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2037_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation of command properties should have a default starting phrase..
        /// </summary>
        public static string MiKo_2037_Title {
            get {
                return ResourceManager.GetString("MiKo_2037_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of a command should start with a specific phrase that describes what the command does..
        /// </summary>
        public static string MiKo_2038_Description {
            get {
                return ResourceManager.GetString("MiKo_2038_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;{1}&gt; with: &apos;{2}&apos;.
        /// </summary>
        public static string MiKo_2038_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2038_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation of command should have a default starting phrase..
        /// </summary>
        public static string MiKo_2038_Title {
            get {
                return ResourceManager.GetString("MiKo_2038_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of a class that contains extension methods should start with a specific phrase that describes what the class provides..
        /// </summary>
        public static string MiKo_2039_Description {
            get {
                return ResourceManager.GetString("MiKo_2039_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;{1}&gt; with: &apos;{2}&apos;.
        /// </summary>
        public static string MiKo_2039_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2039_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation of classes that contain extension methods should have a default starting phrase..
        /// </summary>
        public static string MiKo_2039_Title {
            get {
                return ResourceManager.GetString("MiKo_2039_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To support other languages than C#, use &apos;&lt;see langword=&quot;...&quot;/&gt;&apos; instead of &apos;&lt;c&gt;...&lt;/c&gt;&apos;..
        /// </summary>
        public static string MiKo_2040_Description {
            get {
                return ResourceManager.GetString("MiKo_2040_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;{2}&apos; instead of &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_2040_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2040_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;see langword=&quot;...&quot;/&gt; should be used instead of &lt;c&gt;...&lt;/c&gt;..
        /// </summary>
        public static string MiKo_2040_Title {
            get {
                return ResourceManager.GetString("MiKo_2040_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &lt;summary&gt; documentation should only contain a short summary description. Other documentation should be provided by the other tags in parallel to the &lt;summary&gt;..
        /// </summary>
        public static string MiKo_2041_Description {
            get {
                return ResourceManager.GetString("MiKo_2041_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/recommended-tags-for-documentation-comments.
        /// </summary>
        public static string MiKo_2041_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_2041_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; should not contain: &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_2041_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2041_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation should not contain other documentation tags..
        /// </summary>
        public static string MiKo_2041_Title {
            get {
                return ResourceManager.GetString("MiKo_2041_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation should use the &apos;&lt;para/&gt;&apos; XML tags instead of &apos;&lt;br/&gt;&apos; or &apos;&lt;p/&gt;&apos; HTML tags..
        /// </summary>
        public static string MiKo_2042_Description {
            get {
                return ResourceManager.GetString("MiKo_2042_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/para.
        /// </summary>
        public static string MiKo_2042_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_2042_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;&lt;para/&gt;&apos; instead of &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_2042_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2042_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should use &apos;&lt;para/&gt;&apos; XML tags instead of &apos;&lt;br/&gt;&apos; HTML tags..
        /// </summary>
        public static string MiKo_2042_Title {
            get {
                return ResourceManager.GetString("MiKo_2042_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of a custom delegate should have a default starting phrase to indicate what the delegate encapsulates..
        /// </summary>
        public static string MiKo_2043_Description {
            get {
                return ResourceManager.GetString("MiKo_2043_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;{1}&gt; with: &apos;{2}&apos;.
        /// </summary>
        public static string MiKo_2043_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2043_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation of custom delegates should have a default starting phrase..
        /// </summary>
        public static string MiKo_2043_Title {
            get {
                return ResourceManager.GetString("MiKo_2043_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method parameters should be referenced via &lt;paramref name=&quot;...&quot;/&gt; inside the documentation..
        /// </summary>
        public static string MiKo_2044_Description {
            get {
                return ResourceManager.GetString("MiKo_2044_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fix incorrect parameter reference &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_2044_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2044_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation references method parameters correctly..
        /// </summary>
        public static string MiKo_2044_Title {
            get {
                return ResourceManager.GetString("MiKo_2044_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &lt;summary&gt; documentation should not reference method parameters as its only purpose is to give a brief description..
        /// </summary>
        public static string MiKo_2045_Description {
            get {
                return ResourceManager.GetString("MiKo_2045_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; should not contain parameter reference: &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_2045_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2045_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation should not reference parameters..
        /// </summary>
        public static string MiKo_2045_Title {
            get {
                return ResourceManager.GetString("MiKo_2045_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The XML documentation should reference type parameters properly via &apos;&lt;typeparamref name=&quot;...&quot; /&gt;&apos;..
        /// </summary>
        public static string MiKo_2046_Description {
            get {
                return ResourceManager.GetString("MiKo_2046_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace invalid type parameter reference &apos;{1}&apos; by &apos;{2}&apos;.
        /// </summary>
        public static string MiKo_2046_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2046_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should reference type parameters correctly..
        /// </summary>
        public static string MiKo_2046_Title {
            get {
                return ResourceManager.GetString("MiKo_2046_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of an Attribute should start with a specific phrase that describes its purpose..
        /// </summary>
        public static string MiKo_2047_Description {
            get {
                return ResourceManager.GetString("MiKo_2047_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;summary&gt; with {1}.
        /// </summary>
        public static string MiKo_2047_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2047_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation of Attributes should have a  default starting phrase..
        /// </summary>
        public static string MiKo_2047_Title {
            get {
                return ResourceManager.GetString("MiKo_2047_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of a value converters should start with a specific phrase that describes what they convert..
        /// </summary>
        public static string MiKo_2048_Description {
            get {
                return ResourceManager.GetString("MiKo_2048_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;summary&gt; with: &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_2048_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2048_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation of value converters should have a  default starting phrase..
        /// </summary>
        public static string MiKo_2048_Title {
            get {
                return ResourceManager.GetString("MiKo_2048_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The term &apos;will be&apos; is not explicit enough and it uses the wrong tense. Instead, a term such as &apos;is&apos; gets to the point and uses present tense..
        /// </summary>
        public static string MiKo_2049_Description {
            get {
                return ResourceManager.GetString("MiKo_2049_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should use &apos;is&apos; instead of &apos;will be&apos;.
        /// </summary>
        public static string MiKo_2049_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2049_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should be more explicit and not use &apos;will be&apos;..
        /// </summary>
        public static string MiKo_2049_Title {
            get {
                return ResourceManager.GetString("MiKo_2049_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of exceptions should follow the .NET Framework documentation..
        /// </summary>
        public static string MiKo_2050_Description {
            get {
                return ResourceManager.GetString("MiKo_2050_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;{1}&gt; with: &apos;{2}&apos;.
        /// </summary>
        public static string MiKo_2050_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2050_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exceptions should be documented following the .NET Framework..
        /// </summary>
        public static string MiKo_2050_Title {
            get {
                return ResourceManager.GetString("MiKo_2050_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of a thrown exception should be a simple condition phrase, such as: &apos;The item is not available&apos;..
        /// </summary>
        public static string MiKo_2051_Description {
            get {
                return ResourceManager.GetString("MiKo_2051_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use condition form to document thrown exception.
        /// </summary>
        public static string MiKo_2051_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2051_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Thrown Exceptions should be documented as kind of a condition (such as &apos;&lt;paramref name=&quot;xyz&quot;/&gt; is &lt;c&gt;42&lt;/c&gt;&apos;)..
        /// </summary>
        public static string MiKo_2051_Title {
            get {
                return ResourceManager.GetString("MiKo_2051_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of an ArgumentNullException being thrown should be a specific phrase..
        /// </summary>
        public static string MiKo_2052_Description {
            get {
                return ResourceManager.GetString("MiKo_2052_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {1} should be something like:
        ///
        ///{2}.
        /// </summary>
        public static string MiKo_2052_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2052_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Throwing of ArgumentNullException should be documented using a default phrase..
        /// </summary>
        public static string MiKo_2052_Title {
            get {
                return ResourceManager.GetString("MiKo_2052_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of an ArgumentNullException should not refer to a value type parameter as that can never be null..
        /// </summary>
        public static string MiKo_2053_Description {
            get {
                return ResourceManager.GetString("MiKo_2053_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;{2}&apos; from &lt;exception cref=&quot;ArgumentNullException&quot;/&gt; as &apos;{1}&apos; is a value type.
        /// </summary>
        public static string MiKo_2053_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2053_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Throwing of ArgumentNullException should be documented only for reference type parameters..
        /// </summary>
        public static string MiKo_2053_Title {
            get {
                return ResourceManager.GetString("MiKo_2053_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of an ArgumentException being thrown should have a specific starting phrase..
        /// </summary>
        public static string MiKo_2054_Description {
            get {
                return ResourceManager.GetString("MiKo_2054_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {1} should be something like:
        ///{2}.
        /// </summary>
        public static string MiKo_2054_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2054_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Throwing of ArgumentException should be documented using a default starting phrase..
        /// </summary>
        public static string MiKo_2054_Title {
            get {
                return ResourceManager.GetString("MiKo_2054_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of an ArgumentOutOfRangeException being thrown should have a specific starting phrase..
        /// </summary>
        public static string MiKo_2055_Description {
            get {
                return ResourceManager.GetString("MiKo_2055_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {1} should be something like:
        ///{2}.
        /// </summary>
        public static string MiKo_2055_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2055_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Throwing of ArgumentOutOfRangeException should be documented using a default starting phrase..
        /// </summary>
        public static string MiKo_2055_Title {
            get {
                return ResourceManager.GetString("MiKo_2055_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of an ObjectDisposedException being thrown should have a specific ending phrase..
        /// </summary>
        public static string MiKo_2056_Description {
            get {
                return ResourceManager.GetString("MiKo_2056_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {1} should end with: &apos;{2}&apos;.
        /// </summary>
        public static string MiKo_2056_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2056_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Throwing of ObjectDisposedException should be documented using a default ending phrase..
        /// </summary>
        public static string MiKo_2056_Title {
            get {
                return ResourceManager.GetString("MiKo_2056_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Types that do not inherit from &apos;IDisposable&apos; cannot be disposed. Hence they shall not throw an ObjectDisposedException..
        /// </summary>
        public static string MiKo_2057_Description {
            get {
                return ResourceManager.GetString("MiKo_2057_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;{1}&apos; because type does not inherit from &apos;IDisposable&apos;.
        /// </summary>
        public static string MiKo_2057_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2057_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Types that are not disposable shall not throw an ObjectDisposedException..
        /// </summary>
        public static string MiKo_2057_Title {
            get {
                return ResourceManager.GetString("MiKo_2057_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of factories should be uniform and consistent..
        /// </summary>
        public static string MiKo_2060_Description {
            get {
                return ResourceManager.GetString("MiKo_2060_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;summary&gt; with: &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_2060_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2060_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Factories should be documented in a uniform way..
        /// </summary>
        public static string MiKo_2060_Title {
            get {
                return ResourceManager.GetString("MiKo_2060_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If a method comment starts with &apos;Returns&apos;, then it focuses on the return value but not on the purpose (responsibility) of the method.
        ///Instead, the documentation should describe what the method is intended to do..
        /// </summary>
        public static string MiKo_2070_Description {
            get {
                return ResourceManager.GetString("MiKo_2070_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;summary&gt; with: &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_2070_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2070_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation should not start with &apos;Returns&apos;..
        /// </summary>
        public static string MiKo_2070_Title {
            get {
                return ResourceManager.GetString("MiKo_2070_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enum types are no boolean values. Hence the documentation should not contain any phrase that would handle enums as if they were booleans (such as it would be the case in phrase &apos;indicates whether&apos;)..
        /// </summary>
        public static string MiKo_2071_Description {
            get {
                return ResourceManager.GetString("MiKo_2071_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use phrase &apos;{1}&apos; in &lt;summary&gt;.
        /// </summary>
        public static string MiKo_2071_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2071_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation for methods that return Enum types should not contain phrase for boolean type..
        /// </summary>
        public static string MiKo_2071_Title {
            get {
                return ResourceManager.GetString("MiKo_2071_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;Try&apos; methods attempt to acchieve something. So their &lt;summary&gt; documentation should start with the phrase &apos;Attempts to&apos;..
        /// </summary>
        public static string MiKo_2072_Description {
            get {
                return ResourceManager.GetString("MiKo_2072_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;summary&gt; with: &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_2072_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2072_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation should not start with &apos;Try&apos;..
        /// </summary>
        public static string MiKo_2072_Title {
            get {
                return ResourceManager.GetString("MiKo_2072_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;Contain&apos; methods attempt to determine if something exists inside something else. So their &lt;summary&gt; documentation should start with the phrase &apos;Determines &apos;..
        /// </summary>
        public static string MiKo_2073_Description {
            get {
                return ResourceManager.GetString("MiKo_2073_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;summary&gt; with: &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_2073_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2073_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation of &apos;Contains&apos; methods should start with &apos;Determines &apos;..
        /// </summary>
        public static string MiKo_2073_Title {
            get {
                return ResourceManager.GetString("MiKo_2073_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;Contain&apos; methods attempt to determine if the value of a given parameter exists inside something. So the &lt;param&gt; documentation of the given parameter should end with the phrase &apos; to seek.&apos;..
        /// </summary>
        public static string MiKo_2074_Description {
            get {
                return ResourceManager.GetString("MiKo_2074_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;param name=&quot;{0}&quot;&gt; should end with: &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_2074_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2074_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation of parameter of &apos;Contains&apos; method should have a default ending phrase..
        /// </summary>
        public static string MiKo_2074_Title {
            get {
                return ResourceManager.GetString("MiKo_2074_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of fields should start with a default phrase..
        /// </summary>
        public static string MiKo_2080_Description {
            get {
                return ResourceManager.GetString("MiKo_2080_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;summary&gt; with: &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_2080_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2080_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation of fields should have a default starting phrase..
        /// </summary>
        public static string MiKo_2080_Title {
            get {
                return ResourceManager.GetString("MiKo_2080_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation of a public-visible read-only field should indicate that it is read-only..
        /// </summary>
        public static string MiKo_2081_Description {
            get {
                return ResourceManager.GetString("MiKo_2081_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End &lt;summary&gt; with: &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_2081_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2081_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation of public-visible read-only fields should have a default ending phrase..
        /// </summary>
        public static string MiKo_2081_Title {
            get {
                return ResourceManager.GetString("MiKo_2081_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease development and usage, the XML documentation for equality operators shall have a common default phrase..
        /// </summary>
        public static string MiKo_2090_Description {
            get {
                return ResourceManager.GetString("MiKo_2090_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;{1}&gt; should be: &apos;{2}&apos;.
        /// </summary>
        public static string MiKo_2090_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2090_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation for equality operator shall have default phrase..
        /// </summary>
        public static string MiKo_2090_Title {
            get {
                return ResourceManager.GetString("MiKo_2090_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease development and usage, the XML documentation for inequality operators shall have a common default phrase..
        /// </summary>
        public static string MiKo_2091_Description {
            get {
                return ResourceManager.GetString("MiKo_2091_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;{1}&gt; should be: &apos;{2}&apos;.
        /// </summary>
        public static string MiKo_2091_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2091_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation for inequality operator shall have default phrase..
        /// </summary>
        public static string MiKo_2091_Title {
            get {
                return ResourceManager.GetString("MiKo_2091_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease usage, the example documentation should start with a phrase that shortly describes what the given example demonstrates..
        /// </summary>
        public static string MiKo_2100_Description {
            get {
                return ResourceManager.GetString("MiKo_2100_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;example&gt; with: &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_2100_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2100_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;example&gt; documentation should start with descriptive default phrase..
        /// </summary>
        public static string MiKo_2100_Title {
            get {
                return ResourceManager.GetString("MiKo_2100_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease reading, example documentation should place code samples inside &lt;code&gt; tags so that IntelliSense or any XML documentation tool can format them in a special way..
        /// </summary>
        public static string MiKo_2101_Description {
            get {
                return ResourceManager.GetString("MiKo_2101_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place sample code in &lt;example&gt; inside &apos;&lt;code&gt;&apos; tags.
        /// </summary>
        public static string MiKo_2101_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2101_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;example&gt; documentation should show code example in &lt;code&gt; tags..
        /// </summary>
        public static string MiKo_2101_Title {
            get {
                return ResourceManager.GetString("MiKo_2101_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should start with a capitalized letter to have a full sentence..
        /// </summary>
        public static string MiKo_2200_Description {
            get {
                return ResourceManager.GetString("MiKo_2200_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start &lt;{1}&gt; with capitalized letter.
        /// </summary>
        public static string MiKo_2200_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2200_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use a capitalized letter to start the comment..
        /// </summary>
        public static string MiKo_2200_Title {
            get {
                return ResourceManager.GetString("MiKo_2200_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation sentences should start with a capitalized letter to have a full sentence..
        /// </summary>
        public static string MiKo_2201_Description {
            get {
                return ResourceManager.GetString("MiKo_2201_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start the sentence(s) in &lt;{1}&gt; with capitalized letter.
        /// </summary>
        public static string MiKo_2201_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2201_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use a capitalized letter to start the sentences in the comment..
        /// </summary>
        public static string MiKo_2201_Title {
            get {
                return ResourceManager.GetString("MiKo_2201_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The XML documentation should not use the abbreviation &apos;id&apos;. Instead, it should clearly document that this is an identifier. Hence, it should use the term &apos;identifier&apos; instead..
        /// </summary>
        public static string MiKo_2202_Description {
            get {
                return ResourceManager.GetString("MiKo_2202_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;identifier&apos; instead of &apos;id&apos; in documentation.
        /// </summary>
        public static string MiKo_2202_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2202_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should use the term &apos;identifier&apos; instead of &apos;id&apos;..
        /// </summary>
        public static string MiKo_2202_Title {
            get {
                return ResourceManager.GetString("MiKo_2202_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The XML documentation should not use the abbreviation &apos;guid&apos;. Instead, it should clearly document that this is an unique identifier. Hence, it should use the term &apos;unique identifier&apos; instead..
        /// </summary>
        public static string MiKo_2203_Description {
            get {
                return ResourceManager.GetString("MiKo_2203_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;unique identifier&apos; instead of &apos;guid&apos; in documentation.
        /// </summary>
        public static string MiKo_2203_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2203_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should use the term &apos;unique identifier&apos; instead of &apos;guid&apos;..
        /// </summary>
        public static string MiKo_2203_Title {
            get {
                return ResourceManager.GetString("MiKo_2203_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The XML documentation should use the &lt;list&gt; tag if items get enumerated. It should not use terms such as 1.), 2.) etc. directly.
        ///This is because IntelliSense or any XML documentation tool are not aware of such terms and therefore the comment will become strangely formatted and hard to read..
        /// </summary>
        public static string MiKo_2204_Description {
            get {
                return ResourceManager.GetString("MiKo_2204_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/list.
        /// </summary>
        public static string MiKo_2204_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_2204_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &lt;list&gt; to list items in documentation.
        /// </summary>
        public static string MiKo_2204_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2204_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should use &lt;list&gt; for enumerations..
        /// </summary>
        public static string MiKo_2204_Title {
            get {
                return ResourceManager.GetString("MiKo_2204_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The XML documentation should use the &lt;note&gt; tag to mark important information. It should not use terms such as &apos;Important&apos; or &apos;Attention&apos; directly.
        ///This is because XML documentation tools are aware of &lt;note&gt; and can format the information in a special way..
        /// </summary>
        public static string MiKo_2205_Description {
            get {
                return ResourceManager.GetString("MiKo_2205_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &lt;note&gt; for important information in documentation.
        /// </summary>
        public static string MiKo_2205_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2205_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should use &lt;note&gt; for important information..
        /// </summary>
        public static string MiKo_2205_Title {
            get {
                return ResourceManager.GetString("MiKo_2205_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation should not use the term &apos;flag&apos; which is often used to describe a boolean value. Instead, the documentation should be re-phrased so that the term is no longer necessary..
        /// </summary>
        public static string MiKo_2206_Description {
            get {
                return ResourceManager.GetString("MiKo_2206_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;{1}&apos; from documentation.
        /// </summary>
        public static string MiKo_2206_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2206_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should not use the term &apos;flag&apos;..
        /// </summary>
        public static string MiKo_2206_Title {
            get {
                return ResourceManager.GetString("MiKo_2206_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &lt;summary&gt; documentation shall be descriptive and short as its intent is to give a short overview about a functionality.
        ///More detailed information should be placed inside a &lt;remarks&gt; section..
        /// </summary>
        public static string MiKo_2207_Description {
            get {
                return ResourceManager.GetString("MiKo_2207_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; is too long, use &lt;remarks&gt; section for all the details.
        /// </summary>
        public static string MiKo_2207_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2207_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation shall be short..
        /// </summary>
        public static string MiKo_2207_Title {
            get {
                return ResourceManager.GetString("MiKo_2207_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The documentation should use a more meaningful description than the phrase &apos;an instance of&apos;.
        ///By having a more concrete description it makes it easier for a developer to understand the meaning..
        /// </summary>
        public static string MiKo_2208_Description {
            get {
                return ResourceManager.GetString("MiKo_2208_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use a better description than &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_2208_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2208_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should not use the term &apos;an instance of&apos;..
        /// </summary>
        public static string MiKo_2208_Title {
            get {
                return ResourceManager.GetString("MiKo_2208_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML documentation is intended for other developers. It shall contain all the information that is important for them in a way that they can easily read and understand. Typos or other kinds of strange comments however are harder to understand. Thus, such things need to be avoided to not confuse the developers..
        /// </summary>
        public static string MiKo_2209_Description {
            get {
                return ResourceManager.GetString("MiKo_2209_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;..&apos; from documentation.
        /// </summary>
        public static string MiKo_2209_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2209_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use double periods in documentation..
        /// </summary>
        public static string MiKo_2209_Title {
            get {
                return ResourceManager.GetString("MiKo_2209_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The XML documentation should not use the abbreviation &apos;info&apos;. Instead, it should clearly document that this is an information. Hence, it should use the term &apos;information&apos; instead..
        /// </summary>
        public static string MiKo_2210_Description {
            get {
                return ResourceManager.GetString("MiKo_2210_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;information&apos; instead of &apos;info&apos; in documentation.
        /// </summary>
        public static string MiKo_2210_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2210_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should use the term &apos;information&apos; instead of &apos;info&apos;..
        /// </summary>
        public static string MiKo_2210_Title {
            get {
                return ResourceManager.GetString("MiKo_2210_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unfortunately, tools such as Sandcastle cannot handle &lt;remarks&gt; sections on enum members. The resulting output (CHM, HTML, ...) does not contain any Remarks section.
        ///
        ///As developers may use the HTML/CHM version only when working with 3rd party frameworks, the information of the &lt;remarks&gt; section is typically not available to them.
        ///
        ///Hence, to provide them with all the information they need, the information should be placed inside the &lt;summary&gt; section..
        /// </summary>
        public static string MiKo_2211_Description {
            get {
                return ResourceManager.GetString("MiKo_2211_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &lt;summary&gt; instead of &lt;remarks&gt;.
        /// </summary>
        public static string MiKo_2211_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2211_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enum members should not have &lt;remarks&gt; sections..
        /// </summary>
        public static string MiKo_2211_Title {
            get {
                return ResourceManager.GetString("MiKo_2211_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To shorten documentation - and still be to the point - the documentation should use the phrase &apos;failed&apos; instead of &apos;was not succesful&apos;..
        /// </summary>
        public static string MiKo_2212_Description {
            get {
                return ResourceManager.GetString("MiKo_2212_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;failed&apos; instead of &apos;was not successful&apos;.
        /// </summary>
        public static string MiKo_2212_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2212_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should use the phrase &apos;failed&apos; instead of the phrase &apos;was not sucessful&apos;..
        /// </summary>
        public static string MiKo_2212_Title {
            get {
                return ResourceManager.GetString("MiKo_2212_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Comments should explain the deeper reasons behind the code to understand why the code is written in that way.
        ///They should not describe how it is achieved because that&apos;s what the code is for..
        /// </summary>
        public static string MiKo_2300_Description {
            get {
                return ResourceManager.GetString("MiKo_2300_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove comment or describe the intent.
        /// </summary>
        public static string MiKo_2300_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2300_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Comments should explain the &apos;Why&apos; and not the &apos;How&apos;..
        /// </summary>
        public static string MiKo_2300_Title {
            get {
                return ResourceManager.GetString("MiKo_2300_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inside tests that follow the Arrange/Act/Assert style, the comments &apos;// arrange&apos;, &apos;// act&apos; and &apos;// assert&apos; are obvious and provide no benefit. Therefore, they can be removed..
        /// </summary>
        public static string MiKo_2301_Description {
            get {
                return ResourceManager.GetString("MiKo_2301_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove obvious AAA comment.
        /// </summary>
        public static string MiKo_2301_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2301_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use obvious comments in AAA-Tests..
        /// </summary>
        public static string MiKo_2301_Title {
            get {
                return ResourceManager.GetString("MiKo_2301_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The longer code is kept that is commented out, the much likelier the code cannot compile anymore.
        ///As code should be commited in to Source Control Systems, developers can use the SCS&apos;s history and go back to an older version that still contains the code. So there is no need to keep the code commented out..
        /// </summary>
        public static string MiKo_2302_Description {
            get {
                return ResourceManager.GetString("MiKo_2302_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove commented out code.
        /// </summary>
        public static string MiKo_2302_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2302_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not keep code that is commented out..
        /// </summary>
        public static string MiKo_2302_Title {
            get {
                return ResourceManager.GetString("MiKo_2302_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In contrast to API documentation inline comments are intended to team members. They should contain the important information in a short way, so they should not be complete sentences.
        ///
        ///This rule contradicts rule MiKo_2306..
        /// </summary>
        public static string MiKo_2303_Description {
            get {
                return ResourceManager.GetString("MiKo_2303_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not end comment with period.
        /// </summary>
        public static string MiKo_2303_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2303_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not end comments with a period..
        /// </summary>
        public static string MiKo_2303_Title {
            get {
                return ResourceManager.GetString("MiKo_2303_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Comments should explain the code and the reasons behind, they should not question things.
        ///If it question things, then the reasons behind are still unclear. This makes it (in the long run) hard to maintain because such questions don&apos;t get answered (otherwise, the comment would have been gone meanwhile)..
        /// </summary>
        public static string MiKo_2304_Description {
            get {
                return ResourceManager.GetString("MiKo_2304_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Comment should explain, not ask.
        /// </summary>
        public static string MiKo_2304_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2304_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not formulate comments as questions..
        /// </summary>
        public static string MiKo_2304_Title {
            get {
                return ResourceManager.GetString("MiKo_2304_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In contrast to API documentation inline comments are intended for team members. They should contain the important information in a short way, so they should not be complete sentences..
        /// </summary>
        public static string MiKo_2305_Description {
            get {
                return ResourceManager.GetString("MiKo_2305_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;..&apos; from comment.
        /// </summary>
        public static string MiKo_2305_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2305_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use double periods in comments..
        /// </summary>
        public static string MiKo_2305_Title {
            get {
                return ResourceManager.GetString("MiKo_2305_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In contrast to API documentation inline comments are intended to team members. They should contain the important information in a short way, so they should be complete sentences.
        ///
        ///This rule contradicts rule MiKo_2303..
        /// </summary>
        public static string MiKo_2306_Description {
            get {
                return ResourceManager.GetString("MiKo_2306_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do end comment with period.
        /// </summary>
        public static string MiKo_2306_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2306_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do end comments with a period..
        /// </summary>
        public static string MiKo_2306_Title {
            get {
                return ResourceManager.GetString("MiKo_2306_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To shorten comments - and still be to the point - comments should use the phrase &apos;failed&apos; instead of &apos;was not succesful&apos;..
        /// </summary>
        public static string MiKo_2307_Description {
            get {
                return ResourceManager.GetString("MiKo_2307_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;failed&apos; instead of &apos;was not successful&apos;.
        /// </summary>
        public static string MiKo_2307_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2307_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Comments should use the phrase &apos;failed&apos; instead of the phrase &apos;was not sucessful&apos;..
        /// </summary>
        public static string MiKo_2307_Title {
            get {
                return ResourceManager.GetString("MiKo_2307_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If #region shall be used, then any empty #region shall be avoided.
        ///Such empty regions solely clutter the code without providing any benefit at all..
        /// </summary>
        public static string MiKo_3000_Description {
            get {
                return ResourceManager.GetString("MiKo_3000_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove empty {0}.
        /// </summary>
        public static string MiKo_3000_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3000_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use empty regions..
        /// </summary>
        public static string MiKo_3000_Title {
            get {
                return ResourceManager.GetString("MiKo_3000_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, use the pre-defined .NET Framework delegate types such as &apos;Action&apos;, &apos;Func&apos; or &apos;Expression&apos; instead of custom delegates..
        /// </summary>
        public static string MiKo_3001_Description {
            get {
                return ResourceManager.GetString("MiKo_3001_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/events-and-callbacks.
        /// </summary>
        public static string MiKo_3001_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_3001_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Action&apos;, &apos;Func&apos; or &apos;Expression&apos; instead.
        /// </summary>
        public static string MiKo_3001_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3001_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Custom delegates should not be used..
        /// </summary>
        public static string MiKo_3001_Title {
            get {
                return ResourceManager.GetString("MiKo_3001_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If a class has too many dependencies, that class is doing too much and does not follow the SRP..
        /// </summary>
        public static string MiKo_3002_Description {
            get {
                return ResourceManager.GetString("MiKo_3002_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Too many MEF dependencies: {1,4} (max. {2}).
        /// </summary>
        public static string MiKo_3002_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3002_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Classes should not have too many dependencies..
        /// </summary>
        public static string MiKo_3002_Title {
            get {
                return ResourceManager.GetString("MiKo_3002_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease usage, events should follow the .NET Framework Guidelines for Event Design..
        /// </summary>
        public static string MiKo_3003_Description {
            get {
                return ResourceManager.GetString("MiKo_3003_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/event.
        /// </summary>
        public static string MiKo_3003_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_3003_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;EventHandler&apos; or &apos;EventHandler&lt;T&gt;&apos; instead.
        /// </summary>
        public static string MiKo_3003_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3003_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Events should follow .NET Framework Guidelines for events..
        /// </summary>
        public static string MiKo_3003_Title {
            get {
                return ResourceManager.GetString("MiKo_3003_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EventArgs exist only to raise events and to pass some data that to the listening event handlers.
        ///If the carried event data now changes between the different handlers, the behavior gets unpredictable and a race condition occurs.
        ///
        ///To avoid that situation, the properties of EventArgs shall be read-only or only privately settable. If you have to set the event data, provide a method to do so and ensure that the method acts as circuit breaker (that is you can set the data exactly once)..
        /// </summary>
        public static string MiKo_3004_Description {
            get {
                return ResourceManager.GetString("MiKo_3004_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make setter private or property read-only.
        /// </summary>
        public static string MiKo_3004_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3004_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property setters of EventArgs shall be private..
        /// </summary>
        public static string MiKo_3004_Title {
            get {
                return ResourceManager.GetString("MiKo_3004_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, methods that are named &apos;Try&apos; should follow the Trier-Doer-Pattern.
        ///
        ///That is they should return a Boolean and have the last parameter as [out] parameter for the result. In the success case the method should return &apos;true&apos; and provide valid out data; in all other cases the method should return &apos;false&apos;..
        /// </summary>
        public static string MiKo_3005_Description {
            get {
                return ResourceManager.GetString("MiKo_3005_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Follow the Trier-Doer-Pattern.
        /// </summary>
        public static string MiKo_3005_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3005_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods named &apos;Try&apos; should follow the Trier-Doer-Pattern..
        /// </summary>
        public static string MiKo_3005_Title {
            get {
                return ResourceManager.GetString("MiKo_3005_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, and being consistent with the .NET Framework classes, &apos;CancellationToken&apos; parameters should come after all the other parameters of a method..
        /// </summary>
        public static string MiKo_3006_Description {
            get {
                return ResourceManager.GetString("MiKo_3006_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; should be last parameter.
        /// </summary>
        public static string MiKo_3006_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3006_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;CancellationToken&apos; parameter should be last method parameter..
        /// </summary>
        public static string MiKo_3006_Title {
            get {
                return ResourceManager.GetString("MiKo_3006_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintainability and readability, methods should be written using only one single language. Hence LINQ method syntax and declarative query syntax should not be used within the same method..
        /// </summary>
        public static string MiKo_3007_Description {
            get {
                return ResourceManager.GetString("MiKo_3007_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not mix LINQ syntax.
        /// </summary>
        public static string MiKo_3007_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3007_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use LINQ method and declarative query syntax in same method..
        /// </summary>
        public static string MiKo_3007_Title {
            get {
                return ResourceManager.GetString("MiKo_3007_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should not return changeable collections such as &apos;ICollection&lt;T&gt;&apos; because those can be changed from outside. Instead they should return the read-only variants (e.g. &apos;IReadOnlyCollection&lt;T&gt;&apos;)..
        /// </summary>
        public static string MiKo_3008_Description {
            get {
                return ResourceManager.GetString("MiKo_3008_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use a read-only immutable variant or &apos;IEnumerable&lt;T&gt;&apos; instead.
        /// </summary>
        public static string MiKo_3008_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3008_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method should not return collections that can be changed from outside..
        /// </summary>
        public static string MiKo_3008_Title {
            get {
                return ResourceManager.GetString("MiKo_3008_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods that are invoked by commands should not be lambda expressions as that makes them hard to read, understand and maintain. Instead they should be named methods that have a meaningful name..
        /// </summary>
        public static string MiKo_3009_Description {
            get {
                return ResourceManager.GetString("MiKo_3009_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use named method instead.
        /// </summary>
        public static string MiKo_3009_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3009_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Commands should invoke only named methods and no lambda expressions..
        /// </summary>
        public static string MiKo_3009_Title {
            get {
                return ResourceManager.GetString("MiKo_3009_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specific kinds of exceptions are reserved and thrown by the execution engine (CLR) and in most cases indicate a bug..
        /// </summary>
        public static string MiKo_3010_Description {
            get {
                return ResourceManager.GetString("MiKo_3010_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/using-standard-exception-types.
        /// </summary>
        public static string MiKo_3010_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_3010_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not create a &apos;{0}&apos;.
        /// </summary>
        public static string MiKo_3010_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3010_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not create or throw reserved exception types..
        /// </summary>
        public static string MiKo_3010_Title {
            get {
                return ResourceManager.GetString("MiKo_3010_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Thrown ArgumentExceptions (or its subtypes) should contain the name of the parameter that caused the exception to be thrown..
        /// </summary>
        public static string MiKo_3011_Description {
            get {
                return ResourceManager.GetString("MiKo_3011_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/using-standard-exception-types#argumentexception-argumentnullexception-and-argumentoutofrangeexception.
        /// </summary>
        public static string MiKo_3011_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_3011_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set &apos;paramName&apos; parameter to {1}.
        /// </summary>
        public static string MiKo_3011_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3011_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Thrown ArgumentExceptions (or its subtypes) shall provide the correct parameter name..
        /// </summary>
        public static string MiKo_3011_Title {
            get {
                return ResourceManager.GetString("MiKo_3011_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Thrown ArgumentOutOfRangeExceptions (or its subtypes) should contain the actual value of the parameter that caused the exception to be thrown..
        /// </summary>
        public static string MiKo_3012_Description {
            get {
                return ResourceManager.GetString("MiKo_3012_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide the actual value that causes the exception to be thrown.
        /// </summary>
        public static string MiKo_3012_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3012_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Thrown ArgumentOutOfRangeExceptions (or its subtypes) shall provide the actual value that causes the exception to be thrown..
        /// </summary>
        public static string MiKo_3012_Title {
            get {
                return ResourceManager.GetString("MiKo_3012_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;default&apos; clause in &apos;switch&apos; statements should throw an ArgumentOutOfRangeException (or subtype) to indicate that the given argument is out of range, but no ArgumentException..
        /// </summary>
        public static string MiKo_3013_Description {
            get {
                return ResourceManager.GetString("MiKo_3013_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Throw an &apos;ArgumentOutOfRangeException&apos; instead.
        /// </summary>
        public static string MiKo_3013_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3013_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;default&apos; clause in &apos;switch&apos; statements should throw an ArgumentOutOfRangeException (or subtype), but no ArgumentException..
        /// </summary>
        public static string MiKo_3013_Title {
            get {
                return ResourceManager.GetString("MiKo_3013_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, a thrown InvalidOperationException, NotImplementedException or NotSupportedException should have a reason that explains the circumstances why the exception has been thrown and - ideally - how to solve the situation..
        /// </summary>
        public static string MiKo_3014_Description {
            get {
                return ResourceManager.GetString("MiKo_3014_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide a reason why the &apos;{0}&apos; is thrown.
        /// </summary>
        public static string MiKo_3014_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3014_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to InvalidOperationException, NotImplementedException and NotSupportedException should have a reason as message..
        /// </summary>
        public static string MiKo_3014_Title {
            get {
                return ResourceManager.GetString("MiKo_3014_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ArgumentExceptions (or its subtypes) should not be thrown by parameterless methods..
        /// </summary>
        public static string MiKo_3015_Description {
            get {
                return ResourceManager.GetString("MiKo_3015_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/using-standard-exception-types.
        /// </summary>
        public static string MiKo_3015_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_3015_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Throw an &apos;InvalidOperationException&apos; instead.
        /// </summary>
        public static string MiKo_3015_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3015_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameterless methods should throw InvalidOperationExceptions (instead of ArgumentExceptions or its subtypes) to indicate inappropriate states..
        /// </summary>
        public static string MiKo_3015_Title {
            get {
                return ResourceManager.GetString("MiKo_3015_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For performance reasons it&apos;s better to use &apos;Task.CompletedTask&apos; instead of &apos;Task.FromResult()&apos; as the returned task is internally cached..
        /// </summary>
        public static string MiKo_3020_Description {
            get {
                return ResourceManager.GetString("MiKo_3020_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Task.CompletedTask&apos; instead.
        /// </summary>
        public static string MiKo_3020_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3020_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Task.CompletedTask&apos; instead of &apos;Task.FromResult&apos;..
        /// </summary>
        public static string MiKo_3020_Title {
            get {
                return ResourceManager.GetString("MiKo_3020_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you use &apos;Task.Run&apos; to return a Task because a method is a long-running operation, then this most probably means that you&apos;ve doing something wrong. If you have a long-running operation, use &apos;Task.Run&apos; to call it..
        /// </summary>
        public static string MiKo_3021_Description {
            get {
                return ResourceManager.GetString("MiKo_3021_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html.
        /// </summary>
        public static string MiKo_3021_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_3021_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;{0}&apos; to invoke method &apos;{1}&apos;, but not inside.
        /// </summary>
        public static string MiKo_3021_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3021_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &apos;Task.Run&apos; in the implementation..
        /// </summary>
        public static string MiKo_3021_Title {
            get {
                return ResourceManager.GetString("MiKo_3021_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If a method returns Task&lt;IEnumerable&gt; or Task&lt;IEnumerable&lt;T&gt;&gt;, then it is likely that the enumerable is not evaluated until it is accessed in a foreach or Linq call.
        ///That accessor likely is another thread (e.g. the main thread) which contradicts the whole idea of returning a dedicated task..
        /// </summary>
        public static string MiKo_3022_Description {
            get {
                return ResourceManager.GetString("MiKo_3022_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not return &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_3022_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3022_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not return Task&lt;IEnumerable&gt; or Task&lt;IEnumerable&lt;T&gt;&gt;..
        /// </summary>
        public static string MiKo_3022_Title {
            get {
                return ResourceManager.GetString("MiKo_3022_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A &apos;CancellationTokenSource&apos; should not be passed around. Instead, the &apos;CancellationToken&apos; should be passed around to propagate notifications that operations should be canceled..
        /// </summary>
        public static string MiKo_3023_Description {
            get {
                return ResourceManager.GetString("MiKo_3023_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use a &apos;{1}&apos; instead.
        /// </summary>
        public static string MiKo_3023_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3023_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &apos;CancellationTokenSource&apos; as parameter..
        /// </summary>
        public static string MiKo_3023_Title {
            get {
                return ResourceManager.GetString("MiKo_3023_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [ref] allows to change the storage location of the variable it is declared on. This allows to re-assign values to an already existing variable and therefore altering it.
        ///In case of reference types the altered variable is an altered object reference, thus all callees that access the altered variable later on get the changed one (very similar to an out parameter).
        ///
        ///In most cases this is not wanted. The object reference shall be the same, only the object shall be altered..
        /// </summary>
        public static string MiKo_3024_Description {
            get {
                return ResourceManager.GetString("MiKo_3024_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &apos;ref&apos;.
        /// </summary>
        public static string MiKo_3024_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3024_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use the [ref] keyword on reference parameters..
        /// </summary>
        public static string MiKo_3024_Title {
            get {
                return ResourceManager.GetString("MiKo_3024_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method parameters should be considered as read-only. They should not be re-assigned to other values. If you need them to have another value, use a local variable instead..
        /// </summary>
        public static string MiKo_3025_Description {
            get {
                return ResourceManager.GetString("MiKo_3025_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not re-assign &apos;{0}&apos;.
        /// </summary>
        public static string MiKo_3025_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3025_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not re-assign method parameters..
        /// </summary>
        public static string MiKo_3025_Title {
            get {
                return ResourceManager.GetString("MiKo_3025_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unused parameters are not needed and should be removed as they solely clutter the code base without providing any benefit at all..
        /// </summary>
        public static string MiKo_3026_Description {
            get {
                return ResourceManager.GetString("MiKo_3026_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter is not used and can be safely removed.
        /// </summary>
        public static string MiKo_3026_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3026_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unused parameters should be removed..
        /// </summary>
        public static string MiKo_3026_Title {
            get {
                return ResourceManager.GetString("MiKo_3026_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Marking parameters for future usage leads to a bad design. It is unclear whether the parameter will ever be used. It is also unclear whether the type of the parameter will match future needs. In future, you can always override methods and add new parameters..
        /// </summary>
        public static string MiKo_3027_Description {
            get {
                return ResourceManager.GetString("MiKo_3027_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/parameter-design.
        /// </summary>
        public static string MiKo_3027_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_3027_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not reserve parameter &apos;{0}&apos; for future usage.
        /// </summary>
        public static string MiKo_3027_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3027_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameters should not be marked to be reserved for future usage..
        /// </summary>
        public static string MiKo_3027_Title {
            get {
                return ResourceManager.GetString("MiKo_3027_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If a collection shall be cleared, then &apos;Clear()&apos; should be invoked. Assigning &apos;null&apos; to a parameter will not do anything here because the parameter is only a copy (reference) of the original parameter..
        /// </summary>
        public static string MiKo_3028_Description {
            get {
                return ResourceManager.GetString("MiKo_3028_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not assign null (is cleanup wanted here?).
        /// </summary>
        public static string MiKo_3028_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3028_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not assign null to lambda parameters..
        /// </summary>
        public static string MiKo_3028_Title {
            get {
                return ResourceManager.GetString("MiKo_3028_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ICloneable.Clone() method does not define whether a deep or a swallow copy shall be returned.
        ///
        ///As that is not defined, there is no guarantee how it gets implemented, and - because of that - it simply cannot be used as there is a huge difference between a deep and a swallow copy..
        /// </summary>
        public static string MiKo_3031_Description {
            get {
                return ResourceManager.GetString("MiKo_3031_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not implement &apos;ICloneable.Clone()&apos;.
        /// </summary>
        public static string MiKo_3031_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3031_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ICloneable.Clone() should not be implemented..
        /// </summary>
        public static string MiKo_3031_Title {
            get {
                return ResourceManager.GetString("MiKo_3031_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property names that are passed into the  &apos;PropertyChangedEventArgs&apos; constructors shall be provided via the &apos;nameof&apos; operator. This eases refactorings..
        /// </summary>
        public static string MiKo_3032_Description {
            get {
                return ResourceManager.GetString("MiKo_3032_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;{1}&apos; instead.
        /// </summary>
        public static string MiKo_3032_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3032_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property names for created &apos;PropertyChangedEventArgs&apos; instances shall be provided via &apos;nameof&apos; operator instead of Cinch..
        /// </summary>
        public static string MiKo_3032_Title {
            get {
                return ResourceManager.GetString("MiKo_3032_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property names that are passed into the  &apos;PropertyChangingEventArgs&apos; and &apos;PropertyChangedEventArgs&apos; constructors shall be provided via the &apos;nameof&apos; operator. This prevents typos or non-existing invalid names and eases refactorings..
        /// </summary>
        public static string MiKo_3033_Description {
            get {
                return ResourceManager.GetString("MiKo_3033_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;nameof&apos; instead.
        /// </summary>
        public static string MiKo_3033_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3033_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property names for created &apos;PropertyChangingEventArgs&apos; and &apos;PropertyChangedEventArgs&apos; instances shall be provided via &apos;nameof&apos; operator..
        /// </summary>
        public static string MiKo_3033_Title {
            get {
                return ResourceManager.GetString("MiKo_3033_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A method that raises the PropertyChanging or PropertyChanged events should use the CallerMemberNameAttribute to specify the name of the property automatically..
        /// </summary>
        public static string MiKo_3034_Description {
            get {
                return ResourceManager.GetString("MiKo_3034_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Apply [CallerMemberName] attribute.
        /// </summary>
        public static string MiKo_3034_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3034_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PropertyChanged event raiser shall use [CallerMemberName] attribute..
        /// </summary>
        public static string MiKo_3034_Title {
            get {
                return ResourceManager.GetString("MiKo_3034_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;WaitOne&apos; methods are normally invoked to wait for a specific situation to occur. If the wait is forever, deadlocks or livelocks can occur. To avoid that, allow the wait to time out b providing a &apos;TimeSpan&apos; to &apos;WaitOne&apos;..
        /// </summary>
        public static string MiKo_3035_Description {
            get {
                return ResourceManager.GetString("MiKo_3035_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide a timeout value.
        /// </summary>
        public static string MiKo_3035_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3035_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not invoke &apos;WaitOne&apos; methods without timeouts..
        /// </summary>
        public static string MiKo_3035_Title {
            get {
                return ResourceManager.GetString("MiKo_3035_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;TimeSpan&apos; .NET struct contains a lot of constructors having different amounts of parameters. Those constructor invocations are hard to read. As the struct also provides static factory methods such as &apos;FromMinutes&apos; or &apos;FromDays&apos;, these should be preferred. They are much easier to read and more explicit.
        ///
        ///Please note: It would be even better to use extension methods such as &apos;Minutes()&apos; or &apos;Days()&apos; that would allow a more natural usage, such as &apos; var x = 5.Days(); &apos;..
        /// </summary>
        public static string MiKo_3036_Description {
            get {
                return ResourceManager.GetString("MiKo_3036_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use factory or extension method instead.
        /// </summary>
        public static string MiKo_3036_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3036_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prefer to use &apos;TimeSpan&apos; factory methods instead of constructors..
        /// </summary>
        public static string MiKo_3036_Title {
            get {
                return ResourceManager.GetString("MiKo_3036_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance and increase readability, do not use Booleans unless you are absolutely sure there will never be a need for more than two values. Instead, use an Enum..
        /// </summary>
        public static string MiKo_3040_Description {
            get {
                return ResourceManager.GetString("MiKo_3040_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/parameter-design.
        /// </summary>
        public static string MiKo_3040_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_3040_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use an Enum instead.
        /// </summary>
        public static string MiKo_3040_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3040_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use Booleans unless you are absolutely sure there will never be a need for more than two values..
        /// </summary>
        public static string MiKo_3040_Title {
            get {
                return ResourceManager.GetString("MiKo_3040_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EventArgs should not use delegates such as &apos;Action&apos; or &apos;Func&apos; because the callee needs to know exactly how the delegate behaves.
        ///Failures inside the delegate(s) are really hard to tackle down because an exception gets thrown at a completely unrelated area..
        /// </summary>
        public static string MiKo_3041_Description {
            get {
                return ResourceManager.GetString("MiKo_3041_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use a delegate.
        /// </summary>
        public static string MiKo_3041_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3041_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EventArgs shall not use delegates..
        /// </summary>
        public static string MiKo_3041_Title {
            get {
                return ResourceManager.GetString("MiKo_3041_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EventArgs are by themselves contracts. Therefore, they should not implement any additional interface..
        /// </summary>
        public static string MiKo_3042_Description {
            get {
                return ResourceManager.GetString("MiKo_3042_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not implement interface.
        /// </summary>
        public static string MiKo_3042_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3042_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EventArgs shall not implement interfaces..
        /// </summary>
        public static string MiKo_3042_Title {
            get {
                return ResourceManager.GetString("MiKo_3042_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fields that are the back of a DependencyProperty should be made &apos;public static readonly&apos; to allow the .NET framework and other clients to find and access those fields..
        /// </summary>
        public static string MiKo_3050_Description {
            get {
                return ResourceManager.GetString("MiKo_3050_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/how-to-implement-a-dependency-property.
        /// </summary>
        public static string MiKo_3050_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_3050_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make it &apos;public static readonly&apos;.
        /// </summary>
        public static string MiKo_3050_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3050_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DependencyProperty fields should be &apos;public static readonly&apos;..
        /// </summary>
        public static string MiKo_3050_Title {
            get {
                return ResourceManager.GetString("MiKo_3050_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To avoid typos, fields that are the back of a DependencyProperty should be registered via &apos;DependencyProperty.Register()&apos; and the &apos;nameof&apos; operator.
        ///In addition, the correct property names, property types and owing types should be provided..
        /// </summary>
        public static string MiKo_3051_Description {
            get {
                return ResourceManager.GetString("MiKo_3051_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/how-to-implement-a-dependency-property.
        /// </summary>
        public static string MiKo_3051_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_3051_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use {1} instead.
        /// </summary>
        public static string MiKo_3051_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3051_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DependencyProperty fields should be properly registered..
        /// </summary>
        public static string MiKo_3051_Title {
            get {
                return ResourceManager.GetString("MiKo_3051_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fields that are the back of a DependencyPropertyKey should be made non-public, &apos;static readonly&apos; to prevent clients to find and access those fields..
        /// </summary>
        public static string MiKo_3052_Description {
            get {
                return ResourceManager.GetString("MiKo_3052_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://docs.microsoft.com/en-us/dotnet/api/system.windows.dependencypropertykey.
        /// </summary>
        public static string MiKo_3052_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_3052_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make it non-public &apos;static readonly&apos;.
        /// </summary>
        public static string MiKo_3052_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3052_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DependencyPropertyKey fields should be non-public &apos;static readonly&apos;..
        /// </summary>
        public static string MiKo_3052_Title {
            get {
                return ResourceManager.GetString("MiKo_3052_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To avoid typos, fields that are the Key of a DependencyProperty should be registered via &apos;DependencyProperty.RegisterReadOnly()&apos; and the &apos;nameof&apos; operator.
        ///In addition, the correct property names, property types and owing types should be provided..
        /// </summary>
        public static string MiKo_3053_Description {
            get {
                return ResourceManager.GetString("MiKo_3053_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://docs.microsoft.com/en-us/dotnet/api/system.windows.dependencyproperty.registerreadonly.
        /// </summary>
        public static string MiKo_3053_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_3053_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use {1} instead.
        /// </summary>
        public static string MiKo_3053_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3053_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DependencyPropertyKey fields should be properly registered..
        /// </summary>
        public static string MiKo_3053_Title {
            get {
                return ResourceManager.GetString("MiKo_3053_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Read-only dependency properties are defined by &apos;DependencyPropertyKey&apos; fields and should not be visible to the public.
        ///To made them available, it is recommended to expose a dependency property identifier for such read-only dependency property.
        ///That can be done by exposing the value of &apos;DependencyPropertyKey.DependencyProperty&apos; as a &apos;public static readonly&apos; field on the specific class..
        /// </summary>
        public static string MiKo_3054_Description {
            get {
                return ResourceManager.GetString("MiKo_3054_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://docs.microsoft.com/en-us/dotnet/api/system.windows.dependencyproperty.registerreadonly.
        /// </summary>
        public static string MiKo_3054_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_3054_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expose a DependencyProperty identifier for the read-only dependency property &apos;{0}&apos;.
        /// </summary>
        public static string MiKo_3054_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3054_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A read-only DependencyProperty should have an exposed DependencyProperty identifier..
        /// </summary>
        public static string MiKo_3054_Title {
            get {
                return ResourceManager.GetString("MiKo_3054_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you use Debug.Assert() or Trace.Assert(), then you want to ensure something. Nevertheless, this has several drawbacks:
        ///1. Debug.Assert() does not work in Release mode (whereas Trace.Assert() does).
        ///2. You cannot do anything here except to confirm the situation.
        ///3. There is no failure handling available.
        ///4. Calling code is not informed about the code and cannot handle the situation properly.
        ///
        ///So instead of using Debug.Assert() or Trace.Assert() throw an exception, such as an InvalidOperationExceptio [rest of string was truncated]&quot;;.
        /// </summary>
        public static string MiKo_3060_Description {
            get {
                return ResourceManager.GetString("MiKo_3060_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_3060_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3060_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debug.Assert or Trace.Assert shall not be used..
        /// </summary>
        public static string MiKo_3060_Title {
            get {
                return ResourceManager.GetString("MiKo_3060_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Often, loggers are requested via a type. Unfortunately, that most likely results in the situation that the logs contain no useful categories. Even worse, developers try to control the log output via the different severities (Debug, Info, ...).
        ///As a result, the logs contain a lot of garbage. So, while analyzing log files it is unclear which log statement belongs into which category.
        ///
        ///Therefore, the logger should be requested via a string that acts as category..
        /// </summary>
        public static string MiKo_3061_Description {
            get {
                return ResourceManager.GetString("MiKo_3061_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use a string as category instead.
        /// </summary>
        public static string MiKo_3061_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3061_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loggers shall use a proper log category..
        /// </summary>
        public static string MiKo_3061_Title {
            get {
                return ResourceManager.GetString("MiKo_3061_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods that return IEnumerable are expected to be used in foreach loops or Linq queries.
        ///It is unexpected that such places throw a NullReferenceException or ArgumentNullException, so these methods should never return null..
        /// </summary>
        public static string MiKo_3070_Description {
            get {
                return ResourceManager.GetString("MiKo_3070_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not return null.
        /// </summary>
        public static string MiKo_3070_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3070_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods that return IEnumerable shall never return null..
        /// </summary>
        public static string MiKo_3070_Title {
            get {
                return ResourceManager.GetString("MiKo_3070_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods that return Task are expected to be used for async calls.
        ///It is unexpected that when calling such methods you get a NullReferenceException thrown, so these methods should never return null..
        /// </summary>
        public static string MiKo_3071_Description {
            get {
                return ResourceManager.GetString("MiKo_3071_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not return null.
        /// </summary>
        public static string MiKo_3071_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3071_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods that return Task shall never return null..
        /// </summary>
        public static string MiKo_3071_Title {
            get {
                return ResourceManager.GetString("MiKo_3071_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods that are visible to the public should not return a List&lt;&gt; or Dictionary&lt;&gt;. Instead, they should return the interfaces IList&lt;&gt; or IDictionary&lt;&gt;.
        ///Doing so allows to change the implementation of the return value whenever it&apos;s needed. Otherwise, the method is bound to always and forever return a List&lt;&gt; or Dictionary&lt;&gt;..
        /// </summary>
        public static string MiKo_3072_Description {
            get {
                return ResourceManager.GetString("MiKo_3072_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not return {1}&lt;&gt;.
        /// </summary>
        public static string MiKo_3072_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3072_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Non-private methods should not return &apos;List&lt;&gt;&apos; or &apos;Dictionary&lt;&gt;&apos;..
        /// </summary>
        public static string MiKo_3072_Title {
            get {
                return ResourceManager.GetString("MiKo_3072_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Constructors should run completely. They should not partially initialize the objects..
        /// </summary>
        public static string MiKo_3073_Description {
            get {
                return ResourceManager.GetString("MiKo_3073_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not return inside constructor.
        /// </summary>
        public static string MiKo_3073_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3073_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not leave objects partially initialized..
        /// </summary>
        public static string MiKo_3073_Title {
            get {
                return ResourceManager.GetString("MiKo_3073_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logical NOT conditions are hard to recognize if they are coded using the &apos;!&apos; character. Code that uses &apos;is false&apos; is much easier to read and understand..
        /// </summary>
        public static string MiKo_3081_Description {
            get {
                return ResourceManager.GetString("MiKo_3081_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use pattern &apos;is false&apos; instead of &apos; ! &apos;.
        /// </summary>
        public static string MiKo_3081_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3081_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pattern matching is preferred over a logical NOT condition..
        /// </summary>
        public static string MiKo_3081_Title {
            get {
                return ResourceManager.GetString("MiKo_3081_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logical comparisons using the &apos;is&apos; pattern matching are more natural and therefore easier to read and understand than using the &apos;==&apos; operator..
        /// </summary>
        public static string MiKo_3082_Description {
            get {
                return ResourceManager.GetString("MiKo_3082_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;is&apos; instead of &apos;==&apos;.
        /// </summary>
        public static string MiKo_3082_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3082_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pattern matching is preferred over a logical comparison with &apos;true&apos; or &apos;false&apos;..
        /// </summary>
        public static string MiKo_3082_Title {
            get {
                return ResourceManager.GetString("MiKo_3082_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Null checks using the &apos;is&apos; pattern matching is more natural and therefore easier to read and understand than using the &apos;==&apos; operator..
        /// </summary>
        public static string MiKo_3083_Description {
            get {
                return ResourceManager.GetString("MiKo_3083_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;is&apos; instead of &apos;==&apos;.
        /// </summary>
        public static string MiKo_3083_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3083_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pattern matching is preferred for null checks..
        /// </summary>
        public static string MiKo_3083_Title {
            get {
                return ResourceManager.GetString("MiKo_3083_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To increase readability, do not place constants on the left side of an operator. Instead, place it on the right side. This makes the code look more natural..
        /// </summary>
        public static string MiKo_3084_Description {
            get {
                return ResourceManager.GetString("MiKo_3084_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place it on right side of &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_3084_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3084_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not place constants on the left side for comparisons..
        /// </summary>
        public static string MiKo_3084_Title {
            get {
                return ResourceManager.GetString("MiKo_3084_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exceptions should be thrown inside of try or catch blocks (or normal code blocks), but not inside of finally blocks.
        ///Those finally blocks are intended for cleaning stuff up; or to ensure that some code runs in all (except a few) situations..
        /// </summary>
        public static string MiKo_3090_Description {
            get {
                return ResourceManager.GetString("MiKo_3090_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not throw from finally block.
        /// </summary>
        public static string MiKo_3090_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3090_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not throw exceptions in finally blocks..
        /// </summary>
        public static string MiKo_3090_Title {
            get {
                return ResourceManager.GetString("MiKo_3090_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Events should be raised inside of try or catch blocks (or normal code blocks), but not inside of finally blocks.
        ///Those finally blocks are intended for cleaning stuff up..
        /// </summary>
        public static string MiKo_3091_Description {
            get {
                return ResourceManager.GetString("MiKo_3091_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not raise &apos;{1}&apos; from finally block.
        /// </summary>
        public static string MiKo_3091_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3091_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not raise events in finally blocks..
        /// </summary>
        public static string MiKo_3091_Title {
            get {
                return ResourceManager.GetString("MiKo_3091_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, test classes should be in the exact same namespace as the type they test.
        ///This allows easy usage without any arbitrary using directives. It also mimics the project structure and allows to discover the tests much easier..
        /// </summary>
        public static string MiKo_3100_Description {
            get {
                return ResourceManager.GetString("MiKo_3100_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place test class in namespace &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_3100_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3100_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test classes and types under test belong in same namespace..
        /// </summary>
        public static string MiKo_3100_Title {
            get {
                return ResourceManager.GetString("MiKo_3100_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A class that is marked as a unit test class should contain unit tests..
        /// </summary>
        public static string MiKo_3101_Description {
            get {
                return ResourceManager.GetString("MiKo_3101_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; should contain tests.
        /// </summary>
        public static string MiKo_3101_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3101_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test classes should contain tests..
        /// </summary>
        public static string MiKo_3101_Title {
            get {
                return ResourceManager.GetString("MiKo_3101_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tests should test a very specific scenario. Therefore there is no need to have a condition, because in that situation a test tests more than one scenario.
        ///So having a condition inside a test is a huge code smell..
        /// </summary>
        public static string MiKo_3102_Description {
            get {
                return ResourceManager.GetString("MiKo_3102_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Refactor test to remove condition.
        /// </summary>
        public static string MiKo_3102_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3102_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test methods should not contain conditional statements such as &apos;if&apos;, &apos;switch&apos;, etc..
        /// </summary>
        public static string MiKo_3102_Title {
            get {
                return ResourceManager.GetString("MiKo_3102_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tests should be specific to make them reproducible and easy to maintain. A GUID that is generated is not reproducible at all and cannot be easily found in case a test fails.
        ///Therefore, a hard-coded GUID should be used instead..
        /// </summary>
        public static string MiKo_3103_Description {
            get {
                return ResourceManager.GetString("MiKo_3103_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use a hard-coded GUID instead.
        /// </summary>
        public static string MiKo_3103_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3103_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test methods should not use &apos;Guid.NewGuid()&apos;..
        /// </summary>
        public static string MiKo_3103_Title {
            get {
                return ResourceManager.GetString("MiKo_3103_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to NUnit&apos;s [Combinatorial] attribute shall be used only if there is a test method that has at least 2 parameters to create the combinatorial. Otherwise there is no reason to mark a test with that attribute..
        /// </summary>
        public static string MiKo_3104_Description {
            get {
                return ResourceManager.GetString("MiKo_3104_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Wrong usage of [Combinatorial].
        /// </summary>
        public static string MiKo_3104_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3104_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use NUnit&apos;s [Combinatorial] attribute properly..
        /// </summary>
        public static string MiKo_3104_Title {
            get {
                return ResourceManager.GetString("MiKo_3104_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to NUnit&apos;s fluent Assert approach is easier to understand. Following that approach, developers will most times not make the common mistake to mix up the &apos;actual&apos; and &apos;expected&apos; values..
        /// </summary>
        public static string MiKo_3105_Description {
            get {
                return ResourceManager.GetString("MiKo_3105_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://github.com/nunit/docs/wiki/Constraint-Model.
        /// </summary>
        public static string MiKo_3105_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_3105_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Assert.That&apos; instead.
        /// </summary>
        public static string MiKo_3105_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3105_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test methods should use NUnit&apos;s fluent Assert approach..
        /// </summary>
        public static string MiKo_3105_Title {
            get {
                return ResourceManager.GetString("MiKo_3105_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If assertions such as Assert.That(...) contain operators such as ==, !=, &lt;=, &lt;, &gt;=, &gt; or the Equals() method, then those methods test for booleans.
        ///In case the test fails, the failure (e.g. &apos;true&apos; expected but &apos;false&apos; received) is hard to understand and needs to be carefully inspected.
        ///In worst case the test needs to be debugged to see what went wrong. If the test itself is a shaky one, this is even more annoying.
        ///
        ///In contrast, the failure would be much easier to understand if the test would immediately [rest of string was truncated]&quot;;.
        /// </summary>
        public static string MiKo_3106_Description {
            get {
                return ResourceManager.GetString("MiKo_3106_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &apos;{1}&apos; in assertion.
        /// </summary>
        public static string MiKo_3106_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3106_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use equality or comparison operators in assertions..
        /// </summary>
        public static string MiKo_3106_Title {
            get {
                return ResourceManager.GetString("MiKo_3106_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is troublesome to have code that attemps to use Moq mocks but actually does not use them properly. So condition matchers should be used on mocks to setup or verify conditions. Such matchers should not be used on constructors or methods of non-mocks as they don&apos;t make sense there..
        /// </summary>
        public static string MiKo_3107_Description {
            get {
                return ResourceManager.GetString("MiKo_3107_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use a mock instead.
        /// </summary>
        public static string MiKo_3107_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3107_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Moq Mock condition matchers should be used on mocks only..
        /// </summary>
        public static string MiKo_3107_Title {
            get {
                return ResourceManager.GetString("MiKo_3107_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Namespaces should have only a limited depth. If a namespace hierarchy becomes too deep, then the namespaces are probably too concrete or special to make sense.
        ///Such namespaces should be flattened..
        /// </summary>
        public static string MiKo_3401_Description {
            get {
                return ResourceManager.GetString("MiKo_3401_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Namespace hierarchy too deep: {1,4} (max. {2}).
        /// </summary>
        public static string MiKo_3401_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3401_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Namespace hierarchies should not be too deep..
        /// </summary>
        public static string MiKo_3401_Title {
            get {
                return ResourceManager.GetString("MiKo_3401_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods that have the same name but a different number of parameters should be ordered in a way so that each method with fewer parameters is ordered before a method with more parameters..
        /// </summary>
        public static string MiKo_4001_Description {
            get {
                return ResourceManager.GetString("MiKo_4001_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Order methods in following way:
        ///{1}
        ///.
        /// </summary>
        public static string MiKo_4001_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_4001_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods with same name should be ordered based on the number of their parameters..
        /// </summary>
        public static string MiKo_4001_Title {
            get {
                return ResourceManager.GetString("MiKo_4001_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods that have the same name should be placed side-by-side so that those methods can be easily found together..
        /// </summary>
        public static string MiKo_4002_Description {
            get {
                return ResourceManager.GetString("MiKo_4002_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place method &apos;{0}&apos; side-by-side with following other methods:
        ///{1}
        ///.
        /// </summary>
        public static string MiKo_4002_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_4002_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods with same name and accessibility should be placed side-by-side..
        /// </summary>
        public static string MiKo_4002_Title {
            get {
                return ResourceManager.GetString("MiKo_4002_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ctors, finalizers and Dispose methods are all directly related to the lifetime of an object. Therefore, they belong together and should be placed side by side..
        /// </summary>
        public static string MiKo_4003_Description {
            get {
                return ResourceManager.GetString("MiKo_4003_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place &apos;{0}&apos; directly after all ctors and finalizers.
        /// </summary>
        public static string MiKo_4003_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_4003_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dispose methods should be placed directly after constructors and finalizers..
        /// </summary>
        public static string MiKo_4003_Title {
            get {
                return ResourceManager.GetString("MiKo_4003_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test initialization method define the most common parts that tests shall contain. So to ease their finding they should be ordered first..
        /// </summary>
        public static string MiKo_4101_Description {
            get {
                return ResourceManager.GetString("MiKo_4101_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place test initialization method before all other methods.
        /// </summary>
        public static string MiKo_4101_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_4101_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test initialization methods should be ordered first..
        /// </summary>
        public static string MiKo_4101_Title {
            get {
                return ResourceManager.GetString("MiKo_4101_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test cleanup methods define the common parts that shall be executed after any test has been finished. So to ease their finding they should be ordered before the test methods..
        /// </summary>
        public static string MiKo_4102_Description {
            get {
                return ResourceManager.GetString("MiKo_4102_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place test cleanup methods before all test methods.
        /// </summary>
        public static string MiKo_4102_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_4102_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test cleanup methods should be ordered before test methods..
        /// </summary>
        public static string MiKo_4102_Title {
            get {
                return ResourceManager.GetString("MiKo_4102_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For performance reasons, &apos;IsDebugEnabled&apos; should be invoked before the &apos;Debug&apos; or &apos;DebugFormat&apos; methods get invoked as those require messages to be created. That creation (and the garbage collection of them as well) is not needed if the &apos;Debug&apos; log level is not set..
        /// </summary>
        public static string MiKo_5001_Description {
            get {
                return ResourceManager.GetString("MiKo_5001_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invoke &apos;{2}&apos; before invoking &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_5001_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_5001_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;Debug&apos; and &apos;DebugFormat&apos; methods should be invoked only after &apos;IsDebugEnabled&apos;..
        /// </summary>
        public static string MiKo_5001_Title {
            get {
                return ResourceManager.GetString("MiKo_5001_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For performance reasons, &apos;xxxFormat&apos; methods (such as &apos;DebugFormat&apos;) should be invoked only with arguments to format the string. Otherwise, the corresponding non-formatting methods (such as &apos;Debug&apos;) should be invoked..
        /// </summary>
        public static string MiKo_5002_Description {
            get {
                return ResourceManager.GetString("MiKo_5002_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invoke &apos;{2}&apos; instead.
        /// </summary>
        public static string MiKo_5002_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_5002_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;xxxFormat&apos; methods should be invoked with multiple arguments only..
        /// </summary>
        public static string MiKo_5002_Title {
            get {
                return ResourceManager.GetString("MiKo_5002_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log methods (such as &apos;Debug&apos;, &apos;Info&apos;, &apos;Warn&apos;, ...) provide an overload that takes an Exception. In case an Exception shall be logged, those Log methods should be invoked instead of those without Exception parameter.
        ///That allows the Log framework to log not only the name of the exception but also additional information (such as it&apos;s stack trace)..
        /// </summary>
        public static string MiKo_5003_Description {
            get {
                return ResourceManager.GetString("MiKo_5003_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invoke &apos;{1}&apos; overload with exception instead.
        /// </summary>
        public static string MiKo_5003_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_5003_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Correct Log methods should be invoked for exceptions..
        /// </summary>
        public static string MiKo_5003_Title {
            get {
                return ResourceManager.GetString("MiKo_5003_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For performance reasons, it makes no sense to use &apos;object.Equals()&apos; on value types. Value types get boxed and unboxed when being casted to objects. That puts unnecessary pressure on the garbage collector as temporary objects are created and immediately get garbage collected.
        ///
        ///Instead the equality operator should be used to compare value types..
        /// </summary>
        public static string MiKo_5010_Description {
            get {
                return ResourceManager.GetString("MiKo_5010_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;==&apos; operator instead of &apos;object.Equals&apos;.
        /// </summary>
        public static string MiKo_5010_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_5010_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &apos;object.Equals()&apos; on value types..
        /// </summary>
        public static string MiKo_5010_Title {
            get {
                return ResourceManager.GetString("MiKo_5010_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For performance reasons (and to avoid large pressure on the garbage collector) strings should be concatenated with &apos;string.Concat()&apos;, &apos;string.Join()&apos; or by using a &apos;StringBuilder&apos;..
        /// </summary>
        public static string MiKo_5011_Description {
            get {
                return ResourceManager.GetString("MiKo_5011_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;string.Concat()&apos; or &apos;string.Join()&apos; instead.
        /// </summary>
        public static string MiKo_5011_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_5011_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not concatenate strings with += operator..
        /// </summary>
        public static string MiKo_5011_Title {
            get {
                return ResourceManager.GetString("MiKo_5011_Title", resourceCulture);
            }
        }
    }
}
